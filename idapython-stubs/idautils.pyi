# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_nalt
from _typeshed import Incomplete
from collections.abc import Generator

def CodeRefsTo(ea, flow) -> Generator[Incomplete, Incomplete, None]: ...
def CodeRefsFrom(ea, flow) -> Generator[Incomplete, Incomplete, None]: ...
def DataRefsTo(ea) -> Generator[Incomplete, Incomplete, None]: ...
def DataRefsFrom(ea) -> Generator[Incomplete, Incomplete, None]: ...

_ref_types: Incomplete

def XrefTypeName(typecode): ...
def XrefsFrom(ea, flags: int = 0): ...
def XrefsTo(ea, flags: int = 0): ...
def Threads() -> Generator[Incomplete, None, None]: ...
def Heads(start: Incomplete | None = None, end: Incomplete | None = None) -> Generator[Incomplete, None, None]: ...
def Functions(start: Incomplete | None = None, end: Incomplete | None = None) -> Generator[Incomplete, None, None]: ...
def Chunks(start) -> Generator[Incomplete, None, None]: ...
def Modules() -> Generator[Incomplete, None, None]: ...
def Names() -> Generator[Incomplete, None, None]: ...
def Segments() -> Generator[Incomplete, None, None]: ...
def Entries() -> Generator[Incomplete, None, None]: ...
def FuncItems(start): ...
def Structs() -> Generator[Incomplete, None, None]: ...
def StructMembers(sid) -> Generator[Incomplete, None, None]: ...
def DecodePrecedingInstruction(ea): ...
def DecodePreviousInstruction(ea): ...
def DecodeInstruction(ea): ...
def GetDataList(ea, count, itemsize: int = 1) -> Generator[Incomplete, None, None]: ...
def PutDataList(ea, datalist, itemsize: int = 1) -> None: ...
def MapDataList(ea, length, func, wordsize: int = 1) -> None: ...
GetInputFileMD5 = ida_nalt.retrieve_input_file_md5

class Strings:
    class StringItem:
        ea: Incomplete
        strtype: Incomplete
        length: Incomplete
        def __init__(self, si) -> None: ...
        def is_1_byte_encoding(self): ...
        def _toseq(self, as_unicode): ...
        def __str__(self) -> str: ...
        def __unicode__(self): ...
    def clear_cache(self) -> None: ...
    size: int
    _si: Incomplete
    def __init__(self, default_setup: bool = False) -> None: ...
    def refresh(self) -> None: ...
    def setup(self, strtypes=..., minlen: int = 5, only_7bit: bool = True, ignore_instructions: bool = False, display_only_existing_strings: bool = False) -> None: ...
    def _get_item(self, index): ...
    def __iter__(self): ...
    def __getitem__(self, index): ...

def GetIdbDir(): ...
def GetRegisterList(): ...
def GetInstructionList(): ...
def Assemble(ea, line): ...
_Assemble = Assemble

def _copy_obj(src, dest, skip_list: Incomplete | None = None): ...

class _reg_dtyp_t:
    reg: Incomplete
    dtype: Incomplete
    def __init__(self, reg, dtype) -> None: ...
    def __eq__(self, other): ...

class _procregs:
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value) -> None: ...

class _cpu:
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class __process_ui_actions_helper:
    __action_list: Incomplete
    __flags: Incomplete
    __idx: int
    def __init__(self, actions, flags: int = 0) -> None: ...
    def __len__(self) -> int: ...
    def __call__(self): ...

def ProcessUiActions(actions, flags: int = 0): ...

class peutils_t:
    PE_NODE: str
    PE_ALT_DBG_FPOS: Incomplete
    PE_ALT_IMAGEBASE: Incomplete
    PE_ALT_PEHDR_OFF: Incomplete
    PE_ALT_NEFLAGS: Incomplete
    PE_ALT_TDS_LOADED: Incomplete
    PE_ALT_PSXDLL: Incomplete
    __penode: Incomplete
    def __init__(self) -> None: ...
    imagebase: Incomplete
    header_offset: Incomplete
    def __str__(self) -> str: ...
    header: Incomplete

cpu: Incomplete
procregs: Incomplete
