# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
import ida_range
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class xreflist_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'xreflist_entry_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'xreflist_entry_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'xreflist_entry_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< xreflist_entry_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< xreflist_entry_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< xreflist_entry_t >::iterator': ...
    def erase(self, *args) -> 'qvector< xreflist_entry_t >::iterator': ...
    def find(self, *args) -> 'qvector< xreflist_entry_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'xreflist_entry_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

def get_stkvar(*args) -> 'PyObject *': ...
def is_funcarg_off(*args) -> bool: ...
def lvar_off(*args) -> sval_t: ...

class stkpnt_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    ea: Incomplete
    spd: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class stkpnts_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def add_frame(*args) -> bool: ...
def del_frame(*args) -> bool: ...
def set_frame_size(*args) -> bool: ...
def get_frame_size(*args) -> asize_t: ...
def get_frame_retsize(*args) -> int: ...

FPC_ARGS: Incomplete
FPC_RETADDR: Incomplete
FPC_SAVREGS: Incomplete
FPC_LVARS: Incomplete

def get_frame_part(*args) -> None: ...
def frame_off_args(*args) -> ea_t: ...
def frame_off_retaddr(*args) -> ea_t: ...
def frame_off_savregs(*args) -> ea_t: ...
def frame_off_lvars(*args) -> ea_t: ...
def get_frame(*args) -> 'struc_t *': ...
def soff_to_fpoff(*args) -> sval_t: ...
def update_fpd(*args) -> bool: ...
def set_purged(*args) -> bool: ...
def get_func_by_frame(*args) -> ea_t: ...
def get_frame_member_by_id(*args) -> 'member_t *': ...

STKVAR_VALID_SIZE: Incomplete

def define_stkvar(*args) -> bool: ...
def build_stkvar_name(*args) -> 'qstring *': ...
def calc_stkvar_struc_offset(*args) -> ea_t: ...
def free_regvar(*args) -> None: ...

class regvar_t(ida_range.range_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    canon: Incomplete
    user: Incomplete
    cmt: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def swap(self, *args) -> None: ...

def add_regvar(*args) -> int: ...

REGVAR_ERROR_OK: Incomplete
REGVAR_ERROR_ARG: Incomplete
REGVAR_ERROR_RANGE: Incomplete
REGVAR_ERROR_NAME: Incomplete

def find_regvar(*args) -> 'regvar_t *': ...
def has_regvar(*args) -> bool: ...
def rename_regvar(*args) -> int: ...
def set_regvar_cmt(*args) -> int: ...
def del_regvar(*args) -> int: ...
def add_auto_stkpnt(*args) -> bool: ...
def add_user_stkpnt(*args) -> bool: ...
def del_stkpnt(*args) -> bool: ...
def get_spd(*args) -> sval_t: ...
def get_effective_spd(*args) -> sval_t: ...
def get_sp_delta(*args) -> sval_t: ...
def set_auto_spd(*args) -> bool: ...
def recalc_spd(*args) -> bool: ...
def recalc_spd_for_basic_block(*args) -> bool: ...

class xreflist_entry_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    ea: Incomplete
    opnum: Incomplete
    type: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def build_stkvar_xrefs(*args) -> None: ...
def get_min_spd_ea(*args) -> ea_t: ...
def delete_unreferenced_stkvars(*args) -> int: ...
def delete_wrong_stkvar_ops(*args) -> int: ...
