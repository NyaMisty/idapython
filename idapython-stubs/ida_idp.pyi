# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class reg_access_vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'reg_access_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'reg_access_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'reg_access_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< reg_access_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< reg_access_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< reg_access_t >::iterator': ...
    def erase(self, *args) -> 'qvector< reg_access_t >::iterator': ...
    def find(self, *args) -> 'qvector< reg_access_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'reg_access_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

def AssembleLine(*args) -> 'PyObject *': ...

IDP_INTERFACE_VERSION: Incomplete
CF_STOP: Incomplete
CF_CALL: Incomplete
CF_CHG1: Incomplete
CF_CHG2: Incomplete
CF_CHG3: Incomplete
CF_CHG4: Incomplete
CF_CHG5: Incomplete
CF_CHG6: Incomplete
CF_USE1: Incomplete
CF_USE2: Incomplete
CF_USE3: Incomplete
CF_USE4: Incomplete
CF_USE5: Incomplete
CF_USE6: Incomplete
CF_JUMP: Incomplete
CF_SHFT: Incomplete
CF_HLL: Incomplete
CF_CHG7: Incomplete
CF_CHG8: Incomplete
CF_USE7: Incomplete
CF_USE8: Incomplete

def has_cf_chg(*args) -> bool: ...
def has_cf_use(*args) -> bool: ...
def has_insn_feature(*args) -> bool: ...
def is_call_insn(*args) -> bool: ...
def is_ret_insn(*args) -> bool: ...
def is_indirect_jump_insn(*args) -> bool: ...
def is_basic_block_end(*args) -> bool: ...

class asm_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    flag: Incomplete
    uflag: Incomplete
    name: Incomplete
    help: Incomplete
    header: Incomplete
    origin: Incomplete
    end: Incomplete
    cmnt: Incomplete
    ascsep: Incomplete
    accsep: Incomplete
    esccodes: Incomplete
    a_ascii: Incomplete
    a_byte: Incomplete
    a_word: Incomplete
    a_dword: Incomplete
    a_qword: Incomplete
    a_oword: Incomplete
    a_float: Incomplete
    a_double: Incomplete
    a_tbyte: Incomplete
    a_packreal: Incomplete
    a_dups: Incomplete
    a_bss: Incomplete
    a_equ: Incomplete
    a_seg: Incomplete
    a_curip: Incomplete
    a_public: Incomplete
    a_weak: Incomplete
    a_extrn: Incomplete
    a_comdef: Incomplete
    a_align: Incomplete
    lbrace: Incomplete
    rbrace: Incomplete
    a_mod: Incomplete
    a_band: Incomplete
    a_bor: Incomplete
    a_xor: Incomplete
    a_bnot: Incomplete
    a_shl: Incomplete
    a_shr: Incomplete
    a_sizeof_fmt: Incomplete
    flag2: Incomplete
    cmnt2: Incomplete
    low8: Incomplete
    high8: Incomplete
    low16: Incomplete
    high16: Incomplete
    a_include_fmt: Incomplete
    a_vstruc_fmt: Incomplete
    a_rva: Incomplete
    a_yword: Incomplete
    a_zword: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

AS_OFFST: Incomplete
AS_COLON: Incomplete
AS_UDATA: Incomplete
AS_2CHRE: Incomplete
AS_NCHRE: Incomplete
AS_N2CHR: Incomplete
AS_1TEXT: Incomplete
AS_NHIAS: Incomplete
AS_NCMAS: Incomplete
AS_HEXFM: Incomplete
ASH_HEXF0: Incomplete
ASH_HEXF1: Incomplete
ASH_HEXF2: Incomplete
ASH_HEXF3: Incomplete
ASH_HEXF4: Incomplete
ASH_HEXF5: Incomplete
AS_DECFM: Incomplete
ASD_DECF0: Incomplete
ASD_DECF1: Incomplete
ASD_DECF2: Incomplete
ASD_DECF3: Incomplete
AS_OCTFM: Incomplete
ASO_OCTF0: Incomplete
ASO_OCTF1: Incomplete
ASO_OCTF2: Incomplete
ASO_OCTF3: Incomplete
ASO_OCTF4: Incomplete
ASO_OCTF5: Incomplete
ASO_OCTF6: Incomplete
ASO_OCTF7: Incomplete
AS_BINFM: Incomplete
ASB_BINF0: Incomplete
ASB_BINF1: Incomplete
ASB_BINF2: Incomplete
ASB_BINF3: Incomplete
ASB_BINF4: Incomplete
ASB_BINF5: Incomplete
AS_UNEQU: Incomplete
AS_ONEDUP: Incomplete
AS_NOXRF: Incomplete
AS_XTRNTYPE: Incomplete
AS_RELSUP: Incomplete
AS_LALIGN: Incomplete
AS_NOCODECLN: Incomplete
AS_NOSPACE: Incomplete
AS_ALIGN2: Incomplete
AS_ASCIIC: Incomplete
AS_ASCIIZ: Incomplete
AS2_BRACE: Incomplete
AS2_STRINV: Incomplete
AS2_BYTE1CHAR: Incomplete
AS2_IDEALDSCR: Incomplete
AS2_TERSESTR: Incomplete
AS2_COLONSUF: Incomplete
AS2_YWORD: Incomplete
AS2_ZWORD: Incomplete
HKCB_GLOBAL: Incomplete
PLFM_386: Incomplete
PLFM_Z80: Incomplete
PLFM_I860: Incomplete
PLFM_8051: Incomplete
PLFM_TMS: Incomplete
PLFM_6502: Incomplete
PLFM_PDP: Incomplete
PLFM_68K: Incomplete
PLFM_JAVA: Incomplete
PLFM_6800: Incomplete
PLFM_ST7: Incomplete
PLFM_MC6812: Incomplete
PLFM_MIPS: Incomplete
PLFM_ARM: Incomplete
PLFM_TMSC6: Incomplete
PLFM_PPC: Incomplete
PLFM_80196: Incomplete
PLFM_Z8: Incomplete
PLFM_SH: Incomplete
PLFM_NET: Incomplete
PLFM_AVR: Incomplete
PLFM_H8: Incomplete
PLFM_PIC: Incomplete
PLFM_SPARC: Incomplete
PLFM_ALPHA: Incomplete
PLFM_HPPA: Incomplete
PLFM_H8500: Incomplete
PLFM_TRICORE: Incomplete
PLFM_DSP56K: Incomplete
PLFM_C166: Incomplete
PLFM_ST20: Incomplete
PLFM_IA64: Incomplete
PLFM_I960: Incomplete
PLFM_F2MC: Incomplete
PLFM_TMS320C54: Incomplete
PLFM_TMS320C55: Incomplete
PLFM_TRIMEDIA: Incomplete
PLFM_M32R: Incomplete
PLFM_NEC_78K0: Incomplete
PLFM_NEC_78K0S: Incomplete
PLFM_M740: Incomplete
PLFM_M7700: Incomplete
PLFM_ST9: Incomplete
PLFM_FR: Incomplete
PLFM_MC6816: Incomplete
PLFM_M7900: Incomplete
PLFM_TMS320C3: Incomplete
PLFM_KR1878: Incomplete
PLFM_AD218X: Incomplete
PLFM_OAKDSP: Incomplete
PLFM_TLCS900: Incomplete
PLFM_C39: Incomplete
PLFM_CR16: Incomplete
PLFM_MN102L00: Incomplete
PLFM_TMS320C1X: Incomplete
PLFM_NEC_V850X: Incomplete
PLFM_SCR_ADPT: Incomplete
PLFM_EBC: Incomplete
PLFM_MSP430: Incomplete
PLFM_SPU: Incomplete
PLFM_DALVIK: Incomplete
PLFM_65C816: Incomplete
PLFM_M16C: Incomplete
PLFM_ARC: Incomplete
PLFM_UNSP: Incomplete
PLFM_TMS320C28: Incomplete
PLFM_DSP96K: Incomplete
PLFM_SPC700: Incomplete
PLFM_AD2106X: Incomplete
PLFM_PIC16: Incomplete
PLFM_S390: Incomplete
PLFM_XTENSA: Incomplete
PLFM_RISCV: Incomplete
PLFM_RL78: Incomplete
PLFM_RX: Incomplete
PR_SEGS: Incomplete
PR_USE32: Incomplete
PR_DEFSEG32: Incomplete
PR_RNAMESOK: Incomplete
PR_ADJSEGS: Incomplete
PR_DEFNUM: Incomplete
PRN_HEX: Incomplete
PRN_OCT: Incomplete
PRN_DEC: Incomplete
PRN_BIN: Incomplete
PR_WORD_INS: Incomplete
PR_NOCHANGE: Incomplete
PR_ASSEMBLE: Incomplete
PR_ALIGN: Incomplete
PR_TYPEINFO: Incomplete
PR_USE64: Incomplete
PR_SGROTHER: Incomplete
PR_STACK_UP: Incomplete
PR_BINMEM: Incomplete
PR_SEGTRANS: Incomplete
PR_CHK_XREF: Incomplete
PR_NO_SEGMOVE: Incomplete
PR_USE_ARG_TYPES: Incomplete
PR_SCALE_STKVARS: Incomplete
PR_DELAYED: Incomplete
PR_ALIGN_INSN: Incomplete
PR_PURGING: Incomplete
PR_CNDINSNS: Incomplete
PR_USE_TBYTE: Incomplete
PR_DEFSEG64: Incomplete
PR_OUTER: Incomplete
PR2_MAPPINGS: Incomplete
PR2_IDP_OPTS: Incomplete
PR2_REALCVT: Incomplete
PR2_CODE16_BIT: Incomplete
PR2_MACRO: Incomplete
PR2_USE_CALCREL: Incomplete
PR2_REL_BITS: Incomplete
PR2_FORCE_16BIT: Incomplete
OP_FP_BASED: Incomplete
OP_SP_BASED: Incomplete
OP_SP_ADD: Incomplete
OP_SP_SUB: Incomplete
CUSTOM_INSN_ITYPE: Incomplete
REG_SPOIL: Incomplete

class _processor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    version: Incomplete
    def has_idp_opts(self, *args) -> bool: ...
    def has_realcvt(self, *args) -> bool: ...
    def has_segregs(self, *args) -> bool: ...
    def use32(self, *args) -> bool: ...
    def use64(self, *args) -> bool: ...
    def ti(self, *args) -> bool: ...
    def stkup(self, *args) -> bool: ...
    def use_tbyte(self, *args) -> bool: ...
    def use_mappings(self, *args) -> bool: ...
    def has_code16_bit(self, *args) -> bool: ...
    def supports_macros(self, *args) -> bool: ...
    def supports_calcrel(self, *args) -> bool: ...
    def calcrel_in_bits(self, *args) -> bool: ...
    def get_default_segm_bitness(self, *args) -> int: ...
    def cbsize(self, *args) -> int: ...
    def dbsize(self, *args) -> int: ...
    def get_proc_index(self, *args) -> int: ...
    ev_init: Incomplete
    ev_term: Incomplete
    ev_newprc: Incomplete
    ev_newasm: Incomplete
    ev_newfile: Incomplete
    ev_oldfile: Incomplete
    ev_newbinary: Incomplete
    ev_endbinary: Incomplete
    ev_set_idp_options: Incomplete
    ev_set_proc_options: Incomplete
    ev_ana_insn: Incomplete
    ev_emu_insn: Incomplete
    ev_out_header: Incomplete
    ev_out_footer: Incomplete
    ev_out_segstart: Incomplete
    ev_out_segend: Incomplete
    ev_out_assumes: Incomplete
    ev_out_insn: Incomplete
    ev_out_mnem: Incomplete
    ev_out_operand: Incomplete
    ev_out_data: Incomplete
    ev_out_label: Incomplete
    ev_out_special_item: Incomplete
    ev_gen_stkvar_def: Incomplete
    ev_gen_regvar_def: Incomplete
    ev_gen_src_file_lnnum: Incomplete
    ev_creating_segm: Incomplete
    ev_moving_segm: Incomplete
    ev_coagulate: Incomplete
    ev_undefine: Incomplete
    ev_treat_hindering_item: Incomplete
    ev_rename: Incomplete
    ev_is_far_jump: Incomplete
    ev_is_sane_insn: Incomplete
    ev_is_cond_insn: Incomplete
    ev_is_call_insn: Incomplete
    ev_is_ret_insn: Incomplete
    ev_may_be_func: Incomplete
    ev_is_basic_block_end: Incomplete
    ev_is_indirect_jump: Incomplete
    ev_is_insn_table_jump: Incomplete
    ev_is_switch: Incomplete
    ev_calc_switch_cases: Incomplete
    ev_create_switch_xrefs: Incomplete
    ev_is_align_insn: Incomplete
    ev_is_alloca_probe: Incomplete
    ev_delay_slot_insn: Incomplete
    ev_is_sp_based: Incomplete
    ev_can_have_type: Incomplete
    ev_cmp_operands: Incomplete
    ev_adjust_refinfo: Incomplete
    ev_get_operand_string: Incomplete
    ev_get_reg_name: Incomplete
    ev_str2reg: Incomplete
    ev_get_autocmt: Incomplete
    ev_get_bg_color: Incomplete
    ev_is_jump_func: Incomplete
    ev_func_bounds: Incomplete
    ev_verify_sp: Incomplete
    ev_verify_noreturn: Incomplete
    ev_create_func_frame: Incomplete
    ev_get_frame_retsize: Incomplete
    ev_get_stkvar_scale_factor: Incomplete
    ev_demangle_name: Incomplete
    ev_add_cref: Incomplete
    ev_add_dref: Incomplete
    ev_del_cref: Incomplete
    ev_del_dref: Incomplete
    ev_coagulate_dref: Incomplete
    ev_may_show_sreg: Incomplete
    ev_loader_elf_machine: Incomplete
    ev_auto_queue_empty: Incomplete
    ev_validate_flirt_func: Incomplete
    ev_adjust_libfunc_ea: Incomplete
    ev_assemble: Incomplete
    ev_extract_address: Incomplete
    ev_realcvt: Incomplete
    ev_gen_asm_or_lst: Incomplete
    ev_gen_map_file: Incomplete
    ev_create_flat_group: Incomplete
    ev_getreg: Incomplete
    ev_analyze_prolog: Incomplete
    ev_calc_spdelta: Incomplete
    ev_calcrel: Incomplete
    ev_find_reg_value: Incomplete
    ev_find_op_value: Incomplete
    ev_replaying_undo: Incomplete
    ev_ending_undo: Incomplete
    ev_set_code16_mode: Incomplete
    ev_get_code16_mode: Incomplete
    ev_get_procmod: Incomplete
    ev_asm_installed: Incomplete
    ev_get_reg_accesses: Incomplete
    ev_is_control_flow_guard: Incomplete
    ev_broadcast: Incomplete
    ev_create_merge_handlers: Incomplete
    ev_privrange_changed: Incomplete
    ev_cvt64_supval: Incomplete
    ev_cvt64_hashval: Incomplete
    ev_get_regfinder: Incomplete
    ev_last_cb_before_debugger: Incomplete
    ev_next_exec_insn: Incomplete
    ev_calc_step_over: Incomplete
    ev_calc_next_eas: Incomplete
    ev_get_macro_insn_head: Incomplete
    ev_get_dbr_opnum: Incomplete
    ev_insn_reads_tbit: Incomplete
    ev_clean_tbit: Incomplete
    ev_get_idd_opinfo: Incomplete
    ev_get_reg_info: Incomplete
    ev_update_call_stack: Incomplete
    ev_last_cb_before_type_callbacks: Incomplete
    ev_setup_til: Incomplete
    ev_get_abi_info: Incomplete
    ev_max_ptr_size: Incomplete
    ev_get_default_enum_size: Incomplete
    ev_get_cc_regs: Incomplete
    ev_obsolete1: Incomplete
    ev_obsolete2: Incomplete
    ev_get_simd_types: Incomplete
    ev_calc_cdecl_purged_bytes: Incomplete
    ev_calc_purged_bytes: Incomplete
    ev_calc_retloc: Incomplete
    ev_calc_arglocs: Incomplete
    ev_calc_varglocs: Incomplete
    ev_adjust_argloc: Incomplete
    ev_lower_func_type: Incomplete
    ev_equal_reglocs: Incomplete
    ev_use_stkarg_type: Incomplete
    ev_use_regarg_type: Incomplete
    ev_use_arg_types: Incomplete
    ev_arg_addrs_ready: Incomplete
    ev_decorate_name: Incomplete
    ev_arch_changed: Incomplete
    ev_get_stkarg_area_info: Incomplete
    ev_last_cb_before_loader: Incomplete
    ev_loader: Incomplete
    @staticmethod
    def notify(*args) -> ssize_t: ...
    @staticmethod
    def init(*args) -> ssize_t: ...
    @staticmethod
    def term(*args) -> ssize_t: ...
    @staticmethod
    def newprc(*args) -> ssize_t: ...
    @staticmethod
    def newasm(*args) -> ssize_t: ...
    @staticmethod
    def asm_installed(*args) -> ssize_t: ...
    @staticmethod
    def newfile(*args) -> ssize_t: ...
    @staticmethod
    def oldfile(*args) -> ssize_t: ...
    @staticmethod
    def newbinary(*args) -> ssize_t: ...
    @staticmethod
    def endbinary(*args) -> ssize_t: ...
    @staticmethod
    def creating_segm(*args) -> ssize_t: ...
    @staticmethod
    def assemble(*args) -> ssize_t: ...
    @staticmethod
    def ana_insn(*args) -> ssize_t: ...
    @staticmethod
    def emu_insn(*args) -> ssize_t: ...
    @staticmethod
    def out_header(*args) -> ssize_t: ...
    @staticmethod
    def out_footer(*args) -> ssize_t: ...
    @staticmethod
    def out_segstart(*args) -> ssize_t: ...
    @staticmethod
    def out_segend(*args) -> ssize_t: ...
    @staticmethod
    def out_assumes(*args) -> ssize_t: ...
    @staticmethod
    def out_insn(*args) -> ssize_t: ...
    @staticmethod
    def out_mnem(*args) -> ssize_t: ...
    @staticmethod
    def out_operand(*args) -> ssize_t: ...
    @staticmethod
    def out_data(*args) -> ssize_t: ...
    @staticmethod
    def out_label(*args) -> ssize_t: ...
    @staticmethod
    def out_special_item(*args) -> ssize_t: ...
    @staticmethod
    def gen_stkvar_def(*args) -> ssize_t: ...
    @staticmethod
    def gen_regvar_def(*args) -> ssize_t: ...
    @staticmethod
    def gen_src_file_lnnum(*args) -> ssize_t: ...
    @staticmethod
    def rename(*args) -> ssize_t: ...
    @staticmethod
    def may_show_sreg(*args) -> ssize_t: ...
    @staticmethod
    def coagulate(*args) -> ssize_t: ...
    @staticmethod
    def auto_queue_empty(*args) -> None: ...
    @staticmethod
    def func_bounds(*args) -> ssize_t: ...
    @staticmethod
    def may_be_func(*args) -> ssize_t: ...
    @staticmethod
    def is_sane_insn(*args) -> ssize_t: ...
    @staticmethod
    def cmp_operands(*args) -> ssize_t: ...
    @staticmethod
    def is_jump_func(*args) -> ssize_t: ...
    @staticmethod
    def is_basic_block_end(*args) -> ssize_t: ...
    @staticmethod
    def getreg(*args) -> ssize_t: ...
    @staticmethod
    def undefine(*args) -> ssize_t: ...
    @staticmethod
    def moving_segm(*args) -> ssize_t: ...
    @staticmethod
    def is_sp_based(*args) -> ssize_t: ...
    @staticmethod
    def is_far_jump(*args) -> ssize_t: ...
    @staticmethod
    def is_call_insn(*args) -> ssize_t: ...
    @staticmethod
    def is_ret_insn(*args) -> ssize_t: ...
    @staticmethod
    def is_align_insn(*args) -> ssize_t: ...
    @staticmethod
    def can_have_type(*args) -> ssize_t: ...
    @staticmethod
    def get_stkvar_scale_factor(*args) -> ssize_t: ...
    @staticmethod
    def demangle_name(*args) -> int: ...
    @staticmethod
    def create_flat_group(*args) -> ssize_t: ...
    @staticmethod
    def is_alloca_probe(*args) -> ssize_t: ...
    @staticmethod
    def get_reg_name(*args) -> 'qstring *': ...
    @staticmethod
    def gen_asm_or_lst(*args) -> ssize_t: ...
    @staticmethod
    def gen_map_file(*args) -> ssize_t: ...
    @staticmethod
    def get_autocmt(*args) -> 'qstring *': ...
    @staticmethod
    def loader_elf_machine(*args) -> ssize_t: ...
    @staticmethod
    def is_indirect_jump(*args) -> ssize_t: ...
    @staticmethod
    def verify_noreturn(*args) -> ssize_t: ...
    @staticmethod
    def verify_sp(*args) -> ssize_t: ...
    @staticmethod
    def create_func_frame(*args) -> ssize_t: ...
    @staticmethod
    def get_frame_retsize(*args) -> ssize_t: ...
    @staticmethod
    def analyze_prolog(*args) -> ssize_t: ...
    @staticmethod
    def calc_spdelta(*args) -> ssize_t: ...
    @staticmethod
    def calcrel(*args) -> 'bytevec_t *, size_t *': ...
    @staticmethod
    def get_reg_accesses(*args) -> ssize_t: ...
    @staticmethod
    def is_control_flow_guard(*args) -> ssize_t: ...
    @staticmethod
    def find_reg_value(*args) -> 'uint64 *': ...
    @staticmethod
    def find_op_value(*args) -> 'uint64 *': ...
    @staticmethod
    def treat_hindering_item(*args) -> ssize_t: ...
    @staticmethod
    def extract_address(*args) -> ssize_t: ...
    @staticmethod
    def str2reg(*args) -> ssize_t: ...
    @staticmethod
    def is_switch(*args) -> ssize_t: ...
    @staticmethod
    def create_switch_xrefs(*args) -> ssize_t: ...
    @staticmethod
    def calc_switch_cases(*args) -> ssize_t: ...
    @staticmethod
    def get_bg_color(*args) -> ssize_t: ...
    @staticmethod
    def validate_flirt_func(*args) -> ssize_t: ...
    @staticmethod
    def get_operand_string(*args) -> 'qstring *': ...
    @staticmethod
    def add_cref(*args) -> ssize_t: ...
    @staticmethod
    def add_dref(*args) -> ssize_t: ...
    @staticmethod
    def del_cref(*args) -> ssize_t: ...
    @staticmethod
    def del_dref(*args) -> ssize_t: ...
    @staticmethod
    def coagulate_dref(*args) -> ssize_t: ...
    @staticmethod
    def set_idp_options(*args) -> 'char const *': ...
    @staticmethod
    def set_proc_options(*args) -> ssize_t: ...
    @staticmethod
    def adjust_libfunc_ea(*args) -> ssize_t: ...
    @staticmethod
    def realcvt(*args) -> fpvalue_error_t: ...
    def delay_slot_insn(self, *args) -> bool: ...
    @staticmethod
    def adjust_refinfo(*args) -> ssize_t: ...
    @staticmethod
    def is_cond_insn(*args) -> ssize_t: ...
    @staticmethod
    def set_code16_mode(*args) -> ssize_t: ...
    @staticmethod
    def get_code16_mode(*args) -> bool: ...
    @staticmethod
    def next_exec_insn(*args) -> ssize_t: ...
    @staticmethod
    def calc_step_over(*args) -> ssize_t: ...
    @staticmethod
    def get_macro_insn_head(*args) -> ssize_t: ...
    @staticmethod
    def get_dbr_opnum(*args) -> ssize_t: ...
    @staticmethod
    def insn_reads_tbit(*args) -> ssize_t: ...
    @staticmethod
    def get_idd_opinfo(*args) -> ssize_t: ...
    @staticmethod
    def calc_next_eas(*args) -> ssize_t: ...
    @staticmethod
    def clean_tbit(*args) -> ssize_t: ...
    @staticmethod
    def get_reg_info(*args) -> 'char const *': ...
    @staticmethod
    def update_call_stack(*args) -> ssize_t: ...
    @staticmethod
    def setup_til(*args) -> ssize_t: ...
    @staticmethod
    def max_ptr_size(*args) -> ssize_t: ...
    @staticmethod
    def calc_cdecl_purged_bytes(*args) -> ssize_t: ...
    @staticmethod
    def equal_reglocs(*args) -> ssize_t: ...
    @staticmethod
    def decorate_name(*args) -> ssize_t: ...
    @staticmethod
    def calc_retloc(*args) -> ssize_t: ...
    @staticmethod
    def calc_varglocs(*args) -> ssize_t: ...
    @staticmethod
    def calc_arglocs(*args) -> ssize_t: ...
    @staticmethod
    def use_stkarg_type(*args) -> ssize_t: ...
    @staticmethod
    def use_regarg_type(*args) -> ssize_t: ...
    @staticmethod
    def use_arg_types(*args) -> ssize_t: ...
    @staticmethod
    def calc_purged_bytes(*args) -> ssize_t: ...
    @staticmethod
    def get_stkarg_area_info(*args) -> ssize_t: ...
    @staticmethod
    def get_cc_regs(*args) -> ssize_t: ...
    @staticmethod
    def get_simd_types(*args) -> ssize_t: ...
    @staticmethod
    def arg_addrs_ready(*args) -> ssize_t: ...
    @staticmethod
    def adjust_argloc(*args) -> ssize_t: ...
    @staticmethod
    def lower_func_type(*args) -> ssize_t: ...
    @staticmethod
    def get_abi_info(*args) -> ssize_t: ...
    @staticmethod
    def arch_changed(*args) -> ssize_t: ...
    @staticmethod
    def create_merge_handlers(*args) -> ssize_t: ...
    def privrange_changed(self, *args) -> ssize_t: ...
    def cvt64_supval(self, *args) -> ssize_t: ...
    def cvt64_hashval(self, *args) -> ssize_t: ...
    def get_stkvar_scale(self, *args) -> int: ...
    def get_canon_mnem(self, *args) -> 'char const *': ...
    def get_canon_feature(self, *args) -> uint32: ...
    def sizeof_ldbl(self, *args) -> size_t: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def _processor_t_notify(*args) -> ssize_t: ...
def _processor_t_init(*args) -> ssize_t: ...
def _processor_t_term(*args) -> ssize_t: ...
def _processor_t_newprc(*args) -> ssize_t: ...
def _processor_t_newasm(*args) -> ssize_t: ...
def _processor_t_asm_installed(*args) -> ssize_t: ...
def _processor_t_newfile(*args) -> ssize_t: ...
def _processor_t_oldfile(*args) -> ssize_t: ...
def _processor_t_newbinary(*args) -> ssize_t: ...
def _processor_t_endbinary(*args) -> ssize_t: ...
def _processor_t_creating_segm(*args) -> ssize_t: ...
def _processor_t_assemble(*args) -> ssize_t: ...
def _processor_t_ana_insn(*args) -> ssize_t: ...
def _processor_t_emu_insn(*args) -> ssize_t: ...
def _processor_t_out_header(*args) -> ssize_t: ...
def _processor_t_out_footer(*args) -> ssize_t: ...
def _processor_t_out_segstart(*args) -> ssize_t: ...
def _processor_t_out_segend(*args) -> ssize_t: ...
def _processor_t_out_assumes(*args) -> ssize_t: ...
def _processor_t_out_insn(*args) -> ssize_t: ...
def _processor_t_out_mnem(*args) -> ssize_t: ...
def _processor_t_out_operand(*args) -> ssize_t: ...
def _processor_t_out_data(*args) -> ssize_t: ...
def _processor_t_out_label(*args) -> ssize_t: ...
def _processor_t_out_special_item(*args) -> ssize_t: ...
def _processor_t_gen_stkvar_def(*args) -> ssize_t: ...
def _processor_t_gen_regvar_def(*args) -> ssize_t: ...
def _processor_t_gen_src_file_lnnum(*args) -> ssize_t: ...
def _processor_t_rename(*args) -> ssize_t: ...
def _processor_t_may_show_sreg(*args) -> ssize_t: ...
def _processor_t_coagulate(*args) -> ssize_t: ...
def _processor_t_auto_queue_empty(*args) -> None: ...
def _processor_t_func_bounds(*args) -> ssize_t: ...
def _processor_t_may_be_func(*args) -> ssize_t: ...
def _processor_t_is_sane_insn(*args) -> ssize_t: ...
def _processor_t_cmp_operands(*args) -> ssize_t: ...
def _processor_t_is_jump_func(*args) -> ssize_t: ...
def _processor_t_is_basic_block_end(*args) -> ssize_t: ...
def _processor_t_getreg(*args) -> ssize_t: ...
def _processor_t_undefine(*args) -> ssize_t: ...
def _processor_t_moving_segm(*args) -> ssize_t: ...
def _processor_t_is_sp_based(*args) -> ssize_t: ...
def _processor_t_is_far_jump(*args) -> ssize_t: ...
def _processor_t_is_call_insn(*args) -> ssize_t: ...
def _processor_t_is_ret_insn(*args) -> ssize_t: ...
def _processor_t_is_align_insn(*args) -> ssize_t: ...
def _processor_t_can_have_type(*args) -> ssize_t: ...
def _processor_t_get_stkvar_scale_factor(*args) -> ssize_t: ...
def _processor_t_demangle_name(*args) -> int: ...
def _processor_t_create_flat_group(*args) -> ssize_t: ...
def _processor_t_is_alloca_probe(*args) -> ssize_t: ...
def _processor_t_get_reg_name(*args) -> 'qstring *': ...
def _processor_t_gen_asm_or_lst(*args) -> ssize_t: ...
def _processor_t_gen_map_file(*args) -> ssize_t: ...
def _processor_t_get_autocmt(*args) -> 'qstring *': ...
def _processor_t_loader_elf_machine(*args) -> ssize_t: ...
def _processor_t_is_indirect_jump(*args) -> ssize_t: ...
def _processor_t_verify_noreturn(*args) -> ssize_t: ...
def _processor_t_verify_sp(*args) -> ssize_t: ...
def _processor_t_create_func_frame(*args) -> ssize_t: ...
def _processor_t_get_frame_retsize(*args) -> ssize_t: ...
def _processor_t_analyze_prolog(*args) -> ssize_t: ...
def _processor_t_calc_spdelta(*args) -> ssize_t: ...
def _processor_t_calcrel(*args) -> 'bytevec_t *, size_t *': ...
def _processor_t_get_reg_accesses(*args) -> ssize_t: ...
def _processor_t_is_control_flow_guard(*args) -> ssize_t: ...
def _processor_t_find_reg_value(*args) -> 'uint64 *': ...
def _processor_t_find_op_value(*args) -> 'uint64 *': ...
def _processor_t_treat_hindering_item(*args) -> ssize_t: ...
def _processor_t_extract_address(*args) -> ssize_t: ...
def _processor_t_str2reg(*args) -> ssize_t: ...
def _processor_t_is_switch(*args) -> ssize_t: ...
def _processor_t_create_switch_xrefs(*args) -> ssize_t: ...
def _processor_t_calc_switch_cases(*args) -> ssize_t: ...
def _processor_t_get_bg_color(*args) -> ssize_t: ...
def _processor_t_validate_flirt_func(*args) -> ssize_t: ...
def _processor_t_get_operand_string(*args) -> 'qstring *': ...
def _processor_t_add_cref(*args) -> ssize_t: ...
def _processor_t_add_dref(*args) -> ssize_t: ...
def _processor_t_del_cref(*args) -> ssize_t: ...
def _processor_t_del_dref(*args) -> ssize_t: ...
def _processor_t_coagulate_dref(*args) -> ssize_t: ...
def _processor_t_set_idp_options(*args) -> 'char const *': ...
def _processor_t_set_proc_options(*args) -> ssize_t: ...
def _processor_t_adjust_libfunc_ea(*args) -> ssize_t: ...
def _processor_t_realcvt(*args) -> fpvalue_error_t: ...
def _processor_t_adjust_refinfo(*args) -> ssize_t: ...
def _processor_t_is_cond_insn(*args) -> ssize_t: ...
def _processor_t_set_code16_mode(*args) -> ssize_t: ...
def _processor_t_get_code16_mode(*args) -> bool: ...
def _processor_t_next_exec_insn(*args) -> ssize_t: ...
def _processor_t_calc_step_over(*args) -> ssize_t: ...
def _processor_t_get_macro_insn_head(*args) -> ssize_t: ...
def _processor_t_get_dbr_opnum(*args) -> ssize_t: ...
def _processor_t_insn_reads_tbit(*args) -> ssize_t: ...
def _processor_t_get_idd_opinfo(*args) -> ssize_t: ...
def _processor_t_calc_next_eas(*args) -> ssize_t: ...
def _processor_t_clean_tbit(*args) -> ssize_t: ...
def _processor_t_get_reg_info(*args) -> 'char const *': ...
def _processor_t_update_call_stack(*args) -> ssize_t: ...
def _processor_t_setup_til(*args) -> ssize_t: ...
def _processor_t_max_ptr_size(*args) -> ssize_t: ...
def _processor_t_calc_cdecl_purged_bytes(*args) -> ssize_t: ...
def _processor_t_equal_reglocs(*args) -> ssize_t: ...
def _processor_t_decorate_name(*args) -> ssize_t: ...
def _processor_t_calc_retloc(*args) -> ssize_t: ...
def _processor_t_calc_varglocs(*args) -> ssize_t: ...
def _processor_t_calc_arglocs(*args) -> ssize_t: ...
def _processor_t_use_stkarg_type(*args) -> ssize_t: ...
def _processor_t_use_regarg_type(*args) -> ssize_t: ...
def _processor_t_use_arg_types(*args) -> ssize_t: ...
def _processor_t_calc_purged_bytes(*args) -> ssize_t: ...
def _processor_t_get_stkarg_area_info(*args) -> ssize_t: ...
def _processor_t_get_cc_regs(*args) -> ssize_t: ...
def _processor_t_get_simd_types(*args) -> ssize_t: ...
def _processor_t_arg_addrs_ready(*args) -> ssize_t: ...
def _processor_t_adjust_argloc(*args) -> ssize_t: ...
def _processor_t_lower_func_type(*args) -> ssize_t: ...
def _processor_t_get_abi_info(*args) -> ssize_t: ...
def _processor_t_arch_changed(*args) -> ssize_t: ...
def _processor_t_create_merge_handlers(*args) -> ssize_t: ...
def get_ph(*args) -> 'processor_t *': ...
def get_ash(*args) -> 'asm_t *': ...
def str2reg(*args) -> int: ...
def is_align_insn(*args) -> int: ...
def get_reg_name(*args) -> 'qstring *': ...

class reg_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    reg: Incomplete
    size: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def parse_reg_name(*args) -> bool: ...

NO_ACCESS: Incomplete
WRITE_ACCESS: Incomplete
READ_ACCESS: Incomplete
RW_ACCESS: Incomplete

class reg_access_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    regnum: Incomplete
    range: Incomplete
    access_type: Incomplete
    opnum: Incomplete
    def have_common_bits(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class reg_accesses_t(reg_access_vec_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

SETPROC_IDB: Incomplete
SETPROC_LOADER: Incomplete
SETPROC_LOADER_NON_FATAL: Incomplete
SETPROC_USER: Incomplete

def set_processor_type(*args) -> bool: ...
def get_idp_name(*args) -> size_t: ...
def set_target_assembler(*args) -> bool: ...

LTC_NONE: Incomplete
LTC_ADDED: Incomplete
LTC_DELETED: Incomplete
LTC_EDITED: Incomplete
LTC_ALIASED: Incomplete
LTC_COMPILER: Incomplete
LTC_TIL_LOADED: Incomplete
LTC_TIL_UNLOADED: Incomplete
LTC_TIL_COMPACTED: Incomplete
closebase: Incomplete
savebase: Incomplete
upgraded: Incomplete
auto_empty: Incomplete
auto_empty_finally: Incomplete
determined_main: Incomplete
local_types_changed: Incomplete
extlang_changed: Incomplete
idasgn_loaded: Incomplete
kernel_config_loaded: Incomplete
loader_finished: Incomplete
flow_chart_created: Incomplete
compiler_changed: Incomplete
changing_ti: Incomplete
ti_changed: Incomplete
changing_op_ti: Incomplete
op_ti_changed: Incomplete
changing_op_type: Incomplete
op_type_changed: Incomplete
enum_created: Incomplete
deleting_enum: Incomplete
enum_deleted: Incomplete
renaming_enum: Incomplete
enum_renamed: Incomplete
changing_enum_bf: Incomplete
enum_bf_changed: Incomplete
changing_enum_cmt: Incomplete
enum_cmt_changed: Incomplete
enum_member_created: Incomplete
deleting_enum_member: Incomplete
enum_member_deleted: Incomplete
struc_created: Incomplete
deleting_struc: Incomplete
struc_deleted: Incomplete
changing_struc_align: Incomplete
struc_align_changed: Incomplete
renaming_struc: Incomplete
struc_renamed: Incomplete
expanding_struc: Incomplete
struc_expanded: Incomplete
struc_member_created: Incomplete
deleting_struc_member: Incomplete
struc_member_deleted: Incomplete
renaming_struc_member: Incomplete
struc_member_renamed: Incomplete
changing_struc_member: Incomplete
struc_member_changed: Incomplete
changing_struc_cmt: Incomplete
struc_cmt_changed: Incomplete
segm_added: Incomplete
deleting_segm: Incomplete
segm_deleted: Incomplete
changing_segm_start: Incomplete
segm_start_changed: Incomplete
changing_segm_end: Incomplete
segm_end_changed: Incomplete
changing_segm_name: Incomplete
segm_name_changed: Incomplete
changing_segm_class: Incomplete
segm_class_changed: Incomplete
segm_attrs_updated: Incomplete
segm_moved: Incomplete
allsegs_moved: Incomplete
func_added: Incomplete
func_updated: Incomplete
set_func_start: Incomplete
set_func_end: Incomplete
deleting_func: Incomplete
frame_deleted: Incomplete
thunk_func_created: Incomplete
func_tail_appended: Incomplete
deleting_func_tail: Incomplete
func_tail_deleted: Incomplete
tail_owner_changed: Incomplete
func_noret_changed: Incomplete
stkpnts_changed: Incomplete
updating_tryblks: Incomplete
tryblks_updated: Incomplete
deleting_tryblks: Incomplete
sgr_changed: Incomplete
make_code: Incomplete
make_data: Incomplete
destroyed_items: Incomplete
renamed: Incomplete
byte_patched: Incomplete
changing_cmt: Incomplete
cmt_changed: Incomplete
changing_range_cmt: Incomplete
range_cmt_changed: Incomplete
extra_cmt_changed: Incomplete
item_color_changed: Incomplete
callee_addr_changed: Incomplete
bookmark_changed: Incomplete
sgr_deleted: Incomplete
adding_segm: Incomplete
func_deleted: Incomplete
dirtree_mkdir: Incomplete
dirtree_rmdir: Incomplete
dirtree_link: Incomplete
dirtree_move: Incomplete
dirtree_rank: Incomplete
dirtree_rminode: Incomplete
dirtree_segm_moved: Incomplete
enum_width_changed: Incomplete
enum_flag_changed: Incomplete
enum_ordinal_changed: Incomplete

def gen_idb_event(*args) -> None: ...

IDPOPT_CST: Incomplete
IDPOPT_JVL: Incomplete
IDPOPT_PRI_DEFAULT: Incomplete
IDPOPT_PRI_HIGH: Incomplete
IDPOPT_NUM_INT: Incomplete
IDPOPT_NUM_CHAR: Incomplete
IDPOPT_NUM_SHORT: Incomplete
IDPOPT_NUM_RANGE: Incomplete
IDPOPT_NUM_UNS: Incomplete
IDPOPT_BIT_UINT: Incomplete
IDPOPT_BIT_UCHAR: Incomplete
IDPOPT_BIT_USHORT: Incomplete
IDPOPT_BIT_BOOL: Incomplete
IDPOPT_STR_QSTRING: Incomplete
IDPOPT_STR_LONG: Incomplete
IDPOPT_I64_RANGE: Incomplete
IDPOPT_I64_UNS: Incomplete
IDPOPT_CST_PARAMS: Incomplete
IDPOPT_MBROFF: Incomplete

class num_range_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    minval: Incomplete
    maxval: Incomplete
    __swig_destroy__: Incomplete

class params_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    p1: Incomplete
    p2: Incomplete
    __swig_destroy__: Incomplete

cik_string: Incomplete
cik_filename: Incomplete
cik_path: Incomplete

def register_cfgopts(*args) -> bool: ...
def get_config_value(*args) -> 'jvalue_t *': ...
def cfg_get_cc_parm(*args) -> 'char const *': ...
def cfg_get_cc_header_path(*args) -> 'char const *': ...
def cfg_get_cc_predefined_macros(*args) -> 'char const *': ...
def process_config_directive(*args) -> None: ...
def assemble(*args) -> bool: ...
def ph_get_id(*args) -> size_t: ...
def ph_get_version(*args) -> size_t: ...
def ph_get_flag(*args) -> size_t: ...
def ph_get_cnbits(*args) -> size_t: ...
def ph_get_dnbits(*args) -> size_t: ...
def ph_get_reg_first_sreg(*args) -> size_t: ...
def ph_get_reg_last_sreg(*args) -> size_t: ...
def ph_get_segreg_size(*args) -> size_t: ...
def ph_get_reg_code_sreg(*args) -> size_t: ...
def ph_get_reg_data_sreg(*args) -> size_t: ...
def ph_get_icode_return(*args) -> size_t: ...
def ph_get_instruc_start(*args) -> size_t: ...
def ph_get_instruc_end(*args) -> size_t: ...
def ph_get_tbyte_size(*args) -> size_t: ...
def ph_get_instruc(*args) -> 'PyObject *': ...
def ph_get_regnames(*args) -> 'PyObject *': ...
def ph_get_operand_info(*args) -> 'PyObject *': ...
def ph_calcrel(*args) -> 'bytevec_t *, size_t *': ...
def ph_find_reg_value(*args) -> 'uint64 *': ...
def ph_find_op_value(*args) -> 'uint64 *': ...
def ph_get_reg_accesses(*args) -> ssize_t: ...

class IDP_Hooks:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def hook(self, *args) -> bool: ...
    def unhook(self, *args) -> bool: ...
    def ev_init(self, *args) -> int: ...
    def ev_term(self, *args) -> int: ...
    def ev_newprc(self, *args) -> int: ...
    def ev_newasm(self, *args) -> int: ...
    def ev_newfile(self, *args) -> int: ...
    def ev_oldfile(self, *args) -> int: ...
    def ev_newbinary(self, *args) -> int: ...
    def ev_endbinary(self, *args) -> int: ...
    def ev_set_idp_options(self, *args) -> int: ...
    def ev_set_proc_options(self, *args) -> int: ...
    def ev_ana_insn(self, *args) -> bool: ...
    def ev_emu_insn(self, *args) -> bool: ...
    def ev_out_header(self, *args) -> int: ...
    def ev_out_footer(self, *args) -> int: ...
    def ev_out_segstart(self, *args) -> int: ...
    def ev_out_segend(self, *args) -> int: ...
    def ev_out_assumes(self, *args) -> int: ...
    def ev_out_insn(self, *args) -> bool: ...
    def ev_out_mnem(self, *args) -> int: ...
    def ev_out_operand(self, *args) -> bool: ...
    def ev_out_data(self, *args) -> int: ...
    def ev_out_label(self, *args) -> int: ...
    def ev_out_special_item(self, *args) -> int: ...
    def ev_gen_stkvar_def(self, *args) -> int: ...
    def ev_gen_regvar_def(self, *args) -> int: ...
    def ev_gen_src_file_lnnum(self, *args) -> int: ...
    def ev_creating_segm(self, *args) -> int: ...
    def ev_moving_segm(self, *args) -> int: ...
    def ev_coagulate(self, *args) -> int: ...
    def ev_undefine(self, *args) -> int: ...
    def ev_treat_hindering_item(self, *args) -> int: ...
    def ev_rename(self, *args) -> int: ...
    def ev_is_far_jump(self, *args) -> int: ...
    def ev_is_sane_insn(self, *args) -> int: ...
    def ev_is_cond_insn(self, *args) -> int: ...
    def ev_is_call_insn(self, *args) -> int: ...
    def ev_is_ret_insn(self, *args) -> int: ...
    def ev_may_be_func(self, *args) -> int: ...
    def ev_is_basic_block_end(self, *args) -> int: ...
    def ev_is_indirect_jump(self, *args) -> int: ...
    def ev_is_insn_table_jump(self, *args) -> int: ...
    def ev_is_switch(self, *args) -> int: ...
    def ev_calc_switch_cases(self, *args) -> int: ...
    def ev_create_switch_xrefs(self, *args) -> int: ...
    def ev_is_align_insn(self, *args) -> int: ...
    def ev_is_alloca_probe(self, *args) -> int: ...
    def ev_delay_slot_insn(self, *args) -> 'PyObject *': ...
    def ev_is_sp_based(self, *args) -> int: ...
    def ev_can_have_type(self, *args) -> int: ...
    def ev_cmp_operands(self, *args) -> int: ...
    def ev_adjust_refinfo(self, *args) -> int: ...
    def ev_get_operand_string(self, *args) -> 'PyObject *': ...
    def ev_get_reg_name(self, *args) -> 'PyObject *': ...
    def ev_str2reg(self, *args) -> int: ...
    def ev_get_autocmt(self, *args) -> 'PyObject *': ...
    def ev_get_bg_color(self, *args) -> int: ...
    def ev_is_jump_func(self, *args) -> int: ...
    def ev_func_bounds(self, *args) -> int: ...
    def ev_verify_sp(self, *args) -> int: ...
    def ev_verify_noreturn(self, *args) -> int: ...
    def ev_create_func_frame(self, *args) -> int: ...
    def ev_get_frame_retsize(self, *args) -> int: ...
    def ev_get_stkvar_scale_factor(self, *args) -> int: ...
    def ev_demangle_name(self, *args) -> 'PyObject *': ...
    def ev_add_cref(self, *args) -> int: ...
    def ev_add_dref(self, *args) -> int: ...
    def ev_del_cref(self, *args) -> int: ...
    def ev_del_dref(self, *args) -> int: ...
    def ev_coagulate_dref(self, *args) -> int: ...
    def ev_may_show_sreg(self, *args) -> int: ...
    def ev_auto_queue_empty(self, *args) -> int: ...
    def ev_validate_flirt_func(self, *args) -> int: ...
    def ev_adjust_libfunc_ea(self, *args) -> int: ...
    def ev_assemble(self, *args) -> 'PyObject *': ...
    def ev_extract_address(self, *args) -> int: ...
    def ev_realcvt(self, *args) -> int: ...
    def ev_gen_asm_or_lst(self, *args) -> int: ...
    def ev_gen_map_file(self, *args) -> int: ...
    def ev_create_flat_group(self, *args) -> int: ...
    def ev_getreg(self, *args) -> int: ...
    def ev_analyze_prolog(self, *args) -> int: ...
    def ev_calc_spdelta(self, *args) -> int: ...
    def ev_calcrel(self, *args) -> int: ...
    def ev_find_reg_value(self, *args) -> 'PyObject *': ...
    def ev_find_op_value(self, *args) -> 'PyObject *': ...
    def ev_replaying_undo(self, *args) -> int: ...
    def ev_ending_undo(self, *args) -> int: ...
    def ev_set_code16_mode(self, *args) -> int: ...
    def ev_get_code16_mode(self, *args) -> int: ...
    def ev_get_procmod(self, *args) -> int: ...
    def ev_asm_installed(self, *args) -> int: ...
    def ev_get_reg_accesses(self, *args) -> int: ...
    def ev_is_control_flow_guard(self, *args) -> int: ...
    def ev_create_merge_handlers(self, *args) -> int: ...
    def ev_privrange_changed(self, *args) -> int: ...
    def ev_cvt64_supval(self, *args) -> int: ...
    def ev_cvt64_hashval(self, *args) -> int: ...
    def ev_next_exec_insn(self, *args) -> int: ...
    def ev_calc_step_over(self, *args) -> int: ...
    def ev_calc_next_eas(self, *args) -> int: ...
    def ev_get_macro_insn_head(self, *args) -> int: ...
    def ev_get_dbr_opnum(self, *args) -> int: ...
    def ev_insn_reads_tbit(self, *args) -> int: ...
    def ev_clean_tbit(self, *args) -> int: ...
    def ev_get_reg_info(self, *args) -> int: ...
    def ev_update_call_stack(self, *args) -> int: ...
    def ev_setup_til(self, *args) -> int: ...
    def ev_get_abi_info(self, *args) -> int: ...
    def ev_max_ptr_size(self, *args) -> int: ...
    def ev_get_default_enum_size(self, *args) -> int: ...
    def ev_get_cc_regs(self, *args) -> int: ...
    def ev_get_simd_types(self, *args) -> int: ...
    def ev_calc_cdecl_purged_bytes(self, *args) -> int: ...
    def ev_calc_purged_bytes(self, *args) -> int: ...
    def ev_calc_retloc(self, *args) -> int: ...
    def ev_calc_arglocs(self, *args) -> int: ...
    def ev_calc_varglocs(self, *args) -> int: ...
    def ev_adjust_argloc(self, *args) -> int: ...
    def ev_lower_func_type(self, *args) -> int: ...
    def ev_equal_reglocs(self, *args) -> int: ...
    def ev_use_stkarg_type(self, *args) -> int: ...
    def ev_use_regarg_type(self, *args) -> 'PyObject *': ...
    def ev_use_arg_types(self, *args) -> int: ...
    def ev_arg_addrs_ready(self, *args) -> int: ...
    def ev_decorate_name(self, *args) -> 'PyObject *': ...
    def ev_arch_changed(self, *args) -> int: ...
    def ev_get_stkarg_area_info(self, *args) -> int: ...
    def ev_last_cb_before_loader(self, *args) -> int: ...
    def ev_loader(self, *args) -> int: ...
    __swig_destroy__: Incomplete
    def __disown__(self): ...

def get_idp_notifier_addr(*args) -> 'PyObject *': ...
def get_idp_notifier_ud_addr(*args) -> 'PyObject *': ...
def delay_slot_insn(*args) -> bool: ...
def get_reg_info(*args) -> 'char const *': ...
def sizeof_ldbl(*args) -> size_t: ...

REAL_ERROR_FORMAT: int
REAL_ERROR_RANGE: int
REAL_ERROR_BADDATA: int
IDPOPT_STR: int
IDPOPT_NUM: int
IDPOPT_BIT: int
IDPOPT_FLT: int
IDPOPT_I64: int
IDPOPT_OK: int
IDPOPT_BADKEY: int
IDPOPT_BADTYPE: int
IDPOPT_BADVALUE: int

class processor_t(IDP_Hooks):
    __idc_cvt_id__: Incomplete
    idb_hooks: Incomplete
    def __init__(self) -> None: ...
    def get_idpdesc(self): ...
    def get_uFlag(self): ...
    def get_auxpref(self, insn): ...
    def _get_idp_notifier_addr(self): ...
    def _get_idp_notifier_ud_addr(self): ...
    def _get_idb_notifier_addr(self): ...
    def _get_idb_notifier_ud_addr(self): ...
    def _make_forced_value_wrapper(self, val, meth: Incomplete | None = None): ...
    def _make_int_returning_wrapper(self, meth, intval: int = 0): ...
    def _get_notify(self, what, unimp_val: int = 0, imp_forced_val: Incomplete | None = None, add_prefix: bool = True, mandatory_impl: Incomplete | None = None): ...
    def ev_newprc(self, *args): ...
    def ev_newfile(self, *args): ...
    def ev_oldfile(self, *args): ...
    def ev_newbinary(self, *args): ...
    def ev_endbinary(self, *args): ...
    def ev_set_idp_options(self, keyword, value_type, value, idb_loaded): ...
    def ev_set_proc_options(self, *args): ...
    def ev_ana_insn(self, *args): ...
    def ev_emu_insn(self, *args): ...
    def ev_out_header(self, *args): ...
    def ev_out_footer(self, *args): ...
    def ev_out_segstart(self, ctx, s): ...
    def ev_out_segend(self, ctx, s): ...
    def ev_out_assumes(self, *args): ...
    def ev_out_insn(self, *args): ...
    def ev_out_mnem(self, *args): ...
    def ev_out_operand(self, *args): ...
    def ev_out_data(self, *args): ...
    def ev_out_label(self, *args): ...
    def ev_out_special_item(self, *args): ...
    def ev_gen_regvar_def(self, ctx, v): ...
    def ev_gen_src_file_lnnum(self, *args): ...
    def ev_creating_segm(self, s): ...
    def ev_moving_segm(self, s, to_ea, flags): ...
    def ev_coagulate(self, *args): ...
    def ev_undefine(self, *args): ...
    def ev_treat_hindering_item(self, *args): ...
    def ev_rename(self, *args): ...
    def ev_is_far_jump(self, *args): ...
    def ev_is_sane_insn(self, *args): ...
    def ev_is_call_insn(self, *args): ...
    def ev_is_ret_insn(self, *args): ...
    def ev_may_be_func(self, *args): ...
    def ev_is_basic_block_end(self, *args): ...
    def ev_is_indirect_jump(self, *args): ...
    def ev_is_insn_table_jump(self, *args): ...
    def ev_is_switch(self, *args): ...
    def ev_create_switch_xrefs(self, *args): ...
    def ev_is_align_insn(self, *args): ...
    def ev_is_alloca_probe(self, *args): ...
    def ev_is_sp_based(self, mode, insn, op): ...
    def ev_can_have_type(self, *args): ...
    def ev_cmp_operands(self, *args): ...
    def ev_get_operand_string(self, buf, insn, opnum): ...
    def ev_str2reg(self, *args): ...
    def ev_get_autocmt(self, *args): ...
    def ev_func_bounds(self, _possible_return_code, pfn, max_func_end_ea): ...
    def ev_verify_sp(self, pfn): ...
    def ev_verify_noreturn(self, pfn): ...
    def ev_create_func_frame(self, pfn): ...
    def ev_get_frame_retsize(self, frsize, pfn): ...
    def ev_coagulate_dref(self, from_ea, to_ea, may_define, _code_ea): ...
    def ev_may_show_sreg(self, *args): ...
    def ev_auto_queue_empty(self, *args): ...
    def ev_validate_flirt_func(self, *args): ...
    def ev_assemble(self, *args): ...
    def ev_gen_map_file(self, nlines, fp): ...
    def ev_calc_step_over(self, target, ip): ...
    def closebase(self, *args) -> None: ...
    def savebase(self, *args) -> None: ...
    def auto_empty(self, *args) -> None: ...
    def auto_empty_finally(self, *args) -> None: ...
    def determined_main(self, *args) -> None: ...
    def idasgn_loaded(self, *args) -> None: ...
    def kernel_config_loaded(self, *args) -> None: ...
    def compiler_changed(self, *args) -> None: ...
    def segm_moved(self, from_ea, to_ea, size, changed_netmap) -> None: ...
    def func_added(self, pfn) -> None: ...
    def set_func_start(self, *args) -> None: ...
    def set_func_end(self, *args) -> None: ...
    def deleting_func(self, pfn) -> None: ...
    def sgr_changed(self, *args) -> None: ...
    def make_code(self, *args) -> None: ...
    def make_data(self, *args) -> None: ...
    def renamed(self, *args) -> None: ...

class __ph:
    id: Incomplete
    cnbits: Incomplete
    dnbits: Incomplete
    flag: Incomplete
    icode_return: Incomplete
    instruc: Incomplete
    instruc_end: Incomplete
    instruc_start: Incomplete
    reg_code_sreg: Incomplete
    reg_data_sreg: Incomplete
    reg_first_sreg: Incomplete
    reg_last_sreg: Incomplete
    regnames: Incomplete
    segreg_size: Incomplete
    tbyte_size: Incomplete
    version: Incomplete

ph: Incomplete

class _idp_cvar_t:
    ash: Incomplete

cvar: Incomplete

class IDB_Hooks:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def hook(self, *args) -> bool: ...
    def unhook(self, *args) -> bool: ...
    def closebase(self, *args) -> None: ...
    def savebase(self, *args) -> None: ...
    def upgraded(self, *args) -> None: ...
    def auto_empty(self, *args) -> None: ...
    def auto_empty_finally(self, *args) -> None: ...
    def determined_main(self, *args) -> None: ...
    def local_types_changed(self, *args) -> None: ...
    def extlang_changed(self, *args) -> None: ...
    def idasgn_loaded(self, *args) -> None: ...
    def kernel_config_loaded(self, *args) -> None: ...
    def loader_finished(self, *args) -> None: ...
    def flow_chart_created(self, *args) -> None: ...
    def compiler_changed(self, *args) -> None: ...
    def changing_ti(self, *args) -> None: ...
    def ti_changed(self, *args) -> None: ...
    def changing_op_ti(self, *args) -> None: ...
    def op_ti_changed(self, *args) -> None: ...
    def changing_op_type(self, *args) -> None: ...
    def op_type_changed(self, *args) -> None: ...
    def enum_created(self, *args) -> None: ...
    def deleting_enum(self, *args) -> None: ...
    def enum_deleted(self, *args) -> None: ...
    def renaming_enum(self, *args) -> None: ...
    def enum_renamed(self, *args) -> None: ...
    def changing_enum_bf(self, *args) -> None: ...
    def enum_bf_changed(self, *args) -> None: ...
    def changing_enum_cmt(self, *args) -> None: ...
    def enum_cmt_changed(self, *args) -> None: ...
    def enum_member_created(self, *args) -> None: ...
    def deleting_enum_member(self, *args) -> None: ...
    def enum_member_deleted(self, *args) -> None: ...
    def struc_created(self, *args) -> None: ...
    def deleting_struc(self, *args) -> None: ...
    def struc_deleted(self, *args) -> None: ...
    def changing_struc_align(self, *args) -> None: ...
    def struc_align_changed(self, *args) -> None: ...
    def renaming_struc(self, *args) -> None: ...
    def struc_renamed(self, *args) -> None: ...
    def expanding_struc(self, *args) -> None: ...
    def struc_expanded(self, *args) -> None: ...
    def struc_member_created(self, *args) -> None: ...
    def deleting_struc_member(self, *args) -> None: ...
    def struc_member_deleted(self, *args) -> None: ...
    def renaming_struc_member(self, *args) -> None: ...
    def struc_member_renamed(self, *args) -> None: ...
    def changing_struc_member(self, *args) -> None: ...
    def struc_member_changed(self, *args) -> None: ...
    def changing_struc_cmt(self, *args) -> None: ...
    def struc_cmt_changed(self, *args) -> None: ...
    def segm_added(self, *args) -> None: ...
    def deleting_segm(self, *args) -> None: ...
    def segm_deleted(self, *args) -> None: ...
    def changing_segm_start(self, *args) -> None: ...
    def segm_start_changed(self, *args) -> None: ...
    def changing_segm_end(self, *args) -> None: ...
    def segm_end_changed(self, *args) -> None: ...
    def changing_segm_name(self, *args) -> None: ...
    def segm_name_changed(self, *args) -> None: ...
    def changing_segm_class(self, *args) -> None: ...
    def segm_class_changed(self, *args) -> None: ...
    def segm_attrs_updated(self, *args) -> None: ...
    def segm_moved(self, *args) -> None: ...
    def allsegs_moved(self, *args) -> None: ...
    def func_added(self, *args) -> None: ...
    def func_updated(self, *args) -> None: ...
    def set_func_start(self, *args) -> None: ...
    def set_func_end(self, *args) -> None: ...
    def deleting_func(self, *args) -> None: ...
    def frame_deleted(self, *args) -> None: ...
    def thunk_func_created(self, *args) -> None: ...
    def func_tail_appended(self, *args) -> None: ...
    def deleting_func_tail(self, *args) -> None: ...
    def func_tail_deleted(self, *args) -> None: ...
    def tail_owner_changed(self, *args) -> None: ...
    def func_noret_changed(self, *args) -> None: ...
    def stkpnts_changed(self, *args) -> None: ...
    def updating_tryblks(self, *args) -> None: ...
    def tryblks_updated(self, *args) -> None: ...
    def deleting_tryblks(self, *args) -> None: ...
    def sgr_changed(self, *args) -> None: ...
    def make_code(self, *args) -> None: ...
    def make_data(self, *args) -> None: ...
    def destroyed_items(self, *args) -> None: ...
    def renamed(self, *args) -> None: ...
    def byte_patched(self, *args) -> None: ...
    def changing_cmt(self, *args) -> None: ...
    def cmt_changed(self, *args) -> None: ...
    def changing_range_cmt(self, *args) -> None: ...
    def range_cmt_changed(self, *args) -> None: ...
    def extra_cmt_changed(self, *args) -> None: ...
    def item_color_changed(self, *args) -> None: ...
    def callee_addr_changed(self, *args) -> None: ...
    def bookmark_changed(self, *args) -> None: ...
    def sgr_deleted(self, *args) -> None: ...
    def adding_segm(self, *args) -> None: ...
    def func_deleted(self, *args) -> None: ...
    def dirtree_mkdir(self, *args) -> None: ...
    def dirtree_rmdir(self, *args) -> None: ...
    def dirtree_link(self, *args) -> None: ...
    def dirtree_move(self, *args) -> None: ...
    def dirtree_rank(self, *args) -> None: ...
    def dirtree_rminode(self, *args) -> None: ...
    def dirtree_segm_moved(self, *args) -> None: ...
    def enum_width_changed(self, *args) -> None: ...
    def enum_flag_changed(self, *args) -> None: ...
    def enum_ordinal_changed(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __disown__(self): ...

def get_idb_notifier_addr(*args) -> 'PyObject *': ...
def get_idb_notifier_ud_addr(*args) -> 'PyObject *': ...

class _processor_t_Trampoline_IDB_Hooks(IDB_Hooks):
    proc: Incomplete
    def __init__(self, proc) -> None: ...
    def __dummy(self, *args): ...
    def __make_parent_caller(self, key): ...

class _notify_when_dispatcher_t:
    class _callback_t:
        fun: Incomplete
        slots: int
        def __init__(self, fun) -> None: ...
    class _IDP_Hooks(IDP_Hooks):
        dispatcher: Incomplete
        def __init__(self, dispatcher) -> None: ...
        def ev_newfile(self, name): ...
        def ev_oldfile(self, name): ...
    class _IDB_Hooks(IDB_Hooks):
        dispatcher: Incomplete
        def __init__(self, dispatcher) -> None: ...
        def closebase(self): ...
    idp_hooks: Incomplete
    idb_hooks: Incomplete
    callbacks: Incomplete
    def __init__(self) -> None: ...
    def _find(self, fun): ...
    def dispatch(self, slot, *args): ...
    def notify_when(self, when, fun): ...
