# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

def compile_idc_file(*args) -> 'qstring *': ...
def compile_idc_text(*args) -> 'qstring *': ...
def py_get_call_idc_func(*args) -> size_t: ...
def pyw_register_idc_func(*args) -> size_t: ...
def pyw_unregister_idc_func(*args) -> bool: ...
def pyw_convert_defvals(*args) -> bool: ...
def py_add_idc_func(*args) -> bool: ...
def eval_expr(*args) -> 'qstring *': ...
def eval_idc_expr(*args) -> 'qstring *': ...

IDC_LANG_EXT: Incomplete

def idcv_long(*args) -> error_t: ...
def idcv_int64(*args) -> error_t: ...
def idcv_num(*args) -> error_t: ...
def idcv_string(*args) -> error_t: ...
def idcv_float(*args) -> error_t: ...
def idcv_object(*args) -> error_t: ...
def move_idcv(*args) -> error_t: ...
def copy_idcv(*args) -> error_t: ...
def deep_copy_idcv(*args) -> error_t: ...
def free_idcv(*args) -> None: ...
def swap_idcvs(*args) -> None: ...
def get_idcv_class_name(*args) -> 'qstring *': ...
def get_idcv_attr(*args) -> error_t: ...
def set_idcv_attr(*args) -> error_t: ...
def del_idcv_attr(*args) -> error_t: ...
def first_idcv_attr(*args) -> 'char const *': ...
def last_idcv_attr(*args) -> 'char const *': ...
def next_idcv_attr(*args) -> 'char const *': ...
def prev_idcv_attr(*args) -> 'char const *': ...
def print_idcv(*args) -> 'qstring *': ...
def get_idcv_slice(*args) -> error_t: ...

VARSLICE_SINGLE: Incomplete

def set_idcv_slice(*args) -> error_t: ...
def add_idc_class(*args) -> 'idc_class_t *': ...
def find_idc_class(*args) -> 'idc_class_t *': ...
def deref_idcv(*args) -> 'idc_value_t *': ...

VREF_LOOP: Incomplete
VREF_ONCE: Incomplete
VREF_COPY: Incomplete

def create_idcv_ref(*args) -> bool: ...
def add_idc_gvar(*args) -> 'idc_value_t *': ...
def find_idc_gvar(*args) -> 'idc_value_t *': ...

class idc_value_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    vtype: Incomplete
    num: Incomplete
    e: Incomplete
    obj: Incomplete
    funcidx: Incomplete
    pvoid: Incomplete
    i64: Incomplete
    reserve: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def clear(self, *args) -> None: ...
    def qstr(self, *args) -> 'qstring const &': ...
    def c_str(self, *args) -> 'char const *': ...
    def u_str(self, *args) -> 'uchar const *': ...
    def swap(self, *args) -> None: ...
    def is_zero(self, *args) -> bool: ...
    def is_integral(self, *args) -> bool: ...
    def is_convertible(self, *args) -> bool: ...
    def _create_empty_string(self, *args) -> None: ...
    def create_empty_string(self, *args) -> None: ...
    def set_string(self, *args) -> None: ...
    def set_long(self, *args) -> None: ...
    def set_pvoid(self, *args) -> None: ...
    def set_int64(self, *args) -> None: ...
    def set_float(self, *args) -> None: ...
    str: Incomplete

VT_LONG: Incomplete
VT_FLOAT: Incomplete
VT_WILD: Incomplete
VT_OBJ: Incomplete
VT_FUNC: Incomplete
VT_STR: Incomplete
VT_PVOID: Incomplete
VT_INT64: Incomplete
VT_REF: Incomplete

class idc_global_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    name: Incomplete
    value: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

eExecThrow: Incomplete

def find_idc_func(*args) -> 'qstring *': ...

HF_DEFAULT: Incomplete
HF_KEYWORD1: Incomplete
HF_KEYWORD2: Incomplete
HF_KEYWORD3: Incomplete
HF_STRING: Incomplete
HF_COMMENT: Incomplete
HF_PREPROC: Incomplete
HF_NUMBER: Incomplete
HF_MAX: Incomplete

class highlighter_cbs_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    __swig_destroy__: Incomplete
    def set_style(self, *args) -> None: ...
    def prev_block_state(self, *args) -> int32: ...
    def cur_block_state(self, *args) -> int32: ...
    def set_block_state(self, *args) -> None: ...
    def __init__(self, *args) -> None: ...
    def __disown__(self): ...

def set_header_path(*args) -> bool: ...
def get_idc_filename(*args) -> 'char const *': ...
def exec_system_script(*args) -> bool: ...

CPL_DEL_MACROS: Incomplete
CPL_USE_LABELS: Incomplete
CPL_ONLY_SAFE: Incomplete

def compile_idc_snippet(*args) -> 'qstring *': ...
def exec_idc_script(*args) -> 'qstring *': ...
def throw_idc_exception(*args) -> error_t: ...

class idc_values_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'idc_value_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'idc_value_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'idc_value_t *': ...
    def inject(self, *args) -> None: ...
    def begin(self, *args) -> 'qvector< idc_value_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< idc_value_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< idc_value_t >::iterator': ...
    def erase(self, *args) -> 'qvector< idc_value_t >::iterator': ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'idc_value_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

_IDCFUNC_CB_T: Incomplete
call_idc_func__: Incomplete
EXTFUN_BASE: int
EXTFUN_NORET: int
EXTFUN_SAFE: int

class _IdcFunction:
    ctxptr: Incomplete
    cb: Incomplete
    def __init__(self, ctxptr) -> None: ...
    fp_ptr: Incomplete
    def __call__(self, args, res): ...

__IDC_FUNC_CTXS: Incomplete

def del_idc_func(name): ...
def add_idc_func(name, fp, args, defvals=(), flags: int = 0): ...
