# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class operands_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    data: Incomplete
    def __init__(self, *args) -> None: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'op_t const &': ...
    def __setitem__(self, *args) -> None: ...
    def _get_bytes(self, *args) -> bytevec_t: ...
    def _set_bytes(self, *args) -> None: ...
    __iter__ = ida_idaapi._bounded_getitem_iterator
    bytes: Incomplete
    __swig_destroy__: Incomplete

class op_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    n: Incomplete
    type: Incomplete
    offb: Incomplete
    offo: Incomplete
    flags: Incomplete
    def set_shown(self, *args) -> None: ...
    def clr_shown(self, *args) -> None: ...
    def shown(self, *args) -> bool: ...
    dtype: Incomplete
    reg: Incomplete
    phrase: Incomplete
    def is_reg(self, *args) -> bool: ...
    value: Incomplete
    def is_imm(self, *args) -> bool: ...
    addr: Incomplete
    specval: Incomplete
    specflag1: Incomplete
    specflag2: Incomplete
    specflag3: Incomplete
    specflag4: Incomplete
    def __get_reg_phrase__(self, *args) -> uint16: ...
    def __set_reg_phrase__(self, *args) -> None: ...
    def __get_value__(self, *args) -> ea_t: ...
    def __set_value__(self, *args) -> None: ...
    def __get_value64__(self, *args) -> uint64: ...
    def __set_value64__(self, *args) -> None: ...
    def __get_addr__(self, *args) -> ea_t: ...
    def __set_addr__(self, *args) -> None: ...
    def __get_specval__(self, *args) -> ea_t: ...
    def __set_specval__(self, *args) -> None: ...
    def assign(self, *args) -> None: ...
    def has_reg(self, r): ...
    value64: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

cvar: Incomplete
o_void: Incomplete
o_reg: Incomplete
o_mem: Incomplete
o_phrase: Incomplete
o_displ: Incomplete
o_imm: Incomplete
o_far: Incomplete
o_near: Incomplete
o_idpspec0: Incomplete
o_idpspec1: Incomplete
o_idpspec2: Incomplete
o_idpspec3: Incomplete
o_idpspec4: Incomplete
o_idpspec5: Incomplete
OF_NO_BASE_DISP: Incomplete
OF_OUTER_DISP: Incomplete
PACK_FORM_DEF: Incomplete
OF_NUMBER: Incomplete
OF_SHOW: Incomplete
dt_byte: Incomplete
dt_word: Incomplete
dt_dword: Incomplete
dt_float: Incomplete
dt_double: Incomplete
dt_tbyte: Incomplete
dt_packreal: Incomplete
dt_qword: Incomplete
dt_byte16: Incomplete
dt_code: Incomplete
dt_void: Incomplete
dt_fword: Incomplete
dt_bitfild: Incomplete
dt_string: Incomplete
dt_unicode: Incomplete
dt_ldbl: Incomplete
dt_byte32: Incomplete
dt_byte64: Incomplete
dt_half: Incomplete

def insn_add_cref(*args) -> None: ...
def insn_add_dref(*args) -> None: ...
def insn_add_off_drefs(*args) -> ea_t: ...
def insn_create_stkvar(*args) -> bool: ...

class insn_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    cs: Incomplete
    ip: Incomplete
    ea: Incomplete
    itype: Incomplete
    size: Incomplete
    auxpref: Incomplete
    auxpref_u16: Incomplete
    auxpref_u8: Incomplete
    segpref: Incomplete
    insnpref: Incomplete
    flags: Incomplete
    ops: Incomplete
    def is_macro(self, *args) -> bool: ...
    def is_64bit(self, *args) -> bool: ...
    def get_next_byte(self, *args) -> uint8: ...
    def get_next_word(self, *args) -> uint16: ...
    def get_next_dword(self, *args) -> uint32: ...
    def get_next_qword(self, *args) -> uint64: ...
    def create_op_data(self, *args) -> bool: ...
    def create_stkvar(self, *args) -> bool: ...
    def add_cref(self, *args) -> None: ...
    def add_dref(self, *args) -> None: ...
    def add_off_drefs(self, *args) -> ea_t: ...
    def __get_ops__(self, *args) -> 'wrapped_array_t< op_t,8 >': ...
    def __get_operand__(self, *args) -> 'op_t *': ...
    def __get_auxpref__(self, *args) -> uint32: ...
    def __set_auxpref__(self, *args) -> None: ...
    def assign(self, *args) -> None: ...
    def is_canon_insn(self, *args) -> bool: ...
    def get_canon_feature(self, *args) -> uint32: ...
    def get_canon_mnem(self, *args) -> 'char const *': ...
    Op1: Incomplete
    Op2: Incomplete
    Op3: Incomplete
    Op4: Incomplete
    Op5: Incomplete
    Op6: Incomplete
    Op7: Incomplete
    Op8: Incomplete
    def __iter__(self): ...
    def __getitem__(self, idx): ...
    __swig_destroy__: Incomplete

INSN_MACRO: Incomplete
INSN_MODMAC: Incomplete
INSN_64BIT: Incomplete
STKVAR_VALID_SIZE: Incomplete

def get_lookback(*args) -> int: ...
def calc_dataseg(*args) -> ea_t: ...
def map_data_ea(*args) -> ea_t: ...
def map_code_ea(*args) -> ea_t: ...
def map_ea(*args) -> ea_t: ...

class outctx_base_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    insn_ea: Incomplete
    outbuf: Incomplete
    F32: Incomplete
    default_lnnum: Incomplete
    def only_main_line(self, *args) -> bool: ...
    def multiline(self, *args) -> bool: ...
    def force_code(self, *args) -> bool: ...
    def stack_view(self, *args) -> bool: ...
    def display_voids(self, *args) -> bool: ...
    def set_gen_xrefs(self, *args) -> None: ...
    def set_gen_cmt(self, *args) -> None: ...
    def clr_gen_label(self, *args) -> None: ...
    def set_gen_label(self, *args) -> None: ...
    def set_gen_demangled_label(self, *args) -> None: ...
    def set_comment_addr(self, *args) -> None: ...
    def set_dlbind_opnd(self, *args) -> None: ...
    def print_label_now(self, *args) -> bool: ...
    def forbid_annotations(self, *args) -> int: ...
    def restore_ctxflags(self, *args) -> None: ...
    def out_printf(self, *args) -> size_t: ...
    def out_value(self, *args) -> flags64_t: ...
    def out_symbol(self, *args) -> None: ...
    def out_chars(self, *args) -> None: ...
    def out_spaces(self, *args) -> None: ...
    def out_line(self, *args) -> None: ...
    def out_keyword(self, *args) -> None: ...
    def out_register(self, *args) -> None: ...
    def out_tagon(self, *args) -> None: ...
    def out_tagoff(self, *args) -> None: ...
    def out_addr_tag(self, *args) -> None: ...
    def out_colored_register_line(self, *args) -> None: ...
    def out_char(self, *args) -> None: ...
    def out_btoa(self, *args) -> None: ...
    def out_long(self, *args) -> None: ...
    def out_name_expr(self, *args) -> bool: ...
    def close_comment(self, *args) -> None: ...
    def flush_outbuf(self, *args) -> bool: ...
    def flush_buf(self, *args) -> bool: ...
    def term_outctx(self, *args) -> int: ...
    def gen_printf(self, *args) -> bool: ...
    def gen_empty_line(self, *args) -> bool: ...
    def gen_border_line(self, *args) -> bool: ...
    def gen_cmt_line(self, *args) -> bool: ...
    def gen_collapsed_line(self, *args) -> bool: ...
    def gen_block_cmt(self, *args) -> bool: ...
    def setup_outctx(self, *args) -> None: ...
    def retrieve_cmt(self, *args) -> ssize_t: ...
    def retrieve_name(self, *args) -> ssize_t: ...
    def gen_xref_lines(self, *args) -> bool: ...
    def init_lines_array(self, *args) -> None: ...
    def get_stkvar(self, *args) -> 'member_t *': ...
    def gen_empty_line_without_annotations(self, *args) -> None: ...
    def getF(self, *args) -> flags64_t: ...

CTXF_MAIN: Incomplete
CTXF_MULTI: Incomplete
CTXF_CODE: Incomplete
CTXF_STACK: Incomplete
CTXF_GEN_XREFS: Incomplete
CTXF_XREF_STATE: Incomplete
XREFSTATE_NONE: Incomplete
XREFSTATE_GO: Incomplete
XREFSTATE_DONE: Incomplete
CTXF_GEN_CMT: Incomplete
CTXF_CMT_STATE: Incomplete
COMMSTATE_NONE: Incomplete
COMMSTATE_GO: Incomplete
COMMSTATE_DONE: Incomplete
CTXF_VOIDS: Incomplete
CTXF_NORMAL_LABEL: Incomplete
CTXF_DEMANGLED_LABEL: Incomplete
CTXF_LABEL_OK: Incomplete
CTXF_DEMANGLED_OK: Incomplete
CTXF_OVSTORE_PRNT: Incomplete
CTXF_OUTCTX_T: Incomplete
CTXF_DBLIND_OPND: Incomplete
CTXF_BINOP_STATE: Incomplete
BINOPSTATE_NONE: Incomplete
BINOPSTATE_GO: Incomplete
BINOPSTATE_DONE: Incomplete
CTXF_HIDDEN_ADDR: Incomplete
CTXF_BIT_PREFIX: Incomplete
OOF_SIGNMASK: Incomplete
OOFS_IFSIGN: Incomplete
OOFS_NOSIGN: Incomplete
OOFS_NEEDSIGN: Incomplete
OOF_SIGNED: Incomplete
OOF_NUMBER: Incomplete
OOF_WIDTHMASK: Incomplete
OOFW_IMM: Incomplete
OOFW_8: Incomplete
OOFW_16: Incomplete
OOFW_24: Incomplete
OOFW_32: Incomplete
OOFW_64: Incomplete
OOF_ADDR: Incomplete
OOF_OUTER: Incomplete
OOF_ZSTROFF: Incomplete
OOF_NOBNOT: Incomplete
OOF_SPACES: Incomplete
OOF_ANYSERIAL: Incomplete
OOF_LZEROES: Incomplete
OOF_NO_LZEROES: Incomplete
DEFAULT_INDENT: Incomplete
MAKELINE_NONE: Incomplete
MAKELINE_BINPREF: Incomplete
MAKELINE_VOID: Incomplete
MAKELINE_STACK: Incomplete

class outctx_t(outctx_base_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    bin_ea: Incomplete
    bin_state: Incomplete
    gl_bpsize: Incomplete
    bin_width: Incomplete
    insn: Incomplete
    curlabel: Incomplete
    wif: Incomplete
    procmod: Incomplete
    ph: Incomplete
    ash: Incomplete
    saved_immvals: Incomplete
    prefix_ea: Incomplete
    next_line_ea: Incomplete
    def setup_outctx(self, *args) -> None: ...
    def term_outctx(self, *args) -> int: ...
    def retrieve_cmt(self, *args) -> ssize_t: ...
    def retrieve_name(self, *args) -> ssize_t: ...
    def gen_xref_lines(self, *args) -> bool: ...
    def out_btoa(self, *args) -> None: ...
    def set_bin_state(self, *args) -> None: ...
    def out_mnem(self, *args) -> None: ...
    def out_custom_mnem(self, *args) -> None: ...
    def out_mnemonic(self, *args) -> None: ...
    def out_one_operand(self, *args) -> bool: ...
    def out_immchar_cmts(self, *args) -> None: ...
    def gen_func_header(self, *args) -> None: ...
    def gen_func_footer(self, *args) -> None: ...
    def out_data(self, *args) -> None: ...
    def out_specea(self, *args) -> bool: ...
    def gen_header_extra(self, *args) -> None: ...
    def gen_header(self, *args) -> None: ...
    def out_fcref_names(self, *args) -> None: ...

GH_PRINT_PROC: Incomplete
GH_PRINT_ASM: Incomplete
GH_PRINT_BYTESEX: Incomplete
GH_PRINT_HEADER: Incomplete
GH_BYTESEX_HAS_HIGHBYTE: Incomplete
GH_PRINT_PROC_AND_ASM: Incomplete
GH_PRINT_PROC_ASM_AND_BYTESEX: Incomplete
GH_PRINT_ALL: Incomplete
GH_PRINT_ALL_BUT_BYTESEX: Incomplete

def create_outctx(*args) -> 'outctx_base_t *': ...
def print_insn_mnem(*args) -> 'qstring *': ...

FCBF_CONT: Incomplete
FCBF_ERR_REPL: Incomplete
FCBF_FF_LIT: Incomplete
FCBF_DELIM: Incomplete

def get_dtype_flag(*args) -> flags64_t: ...
def get_dtype_size(*args) -> size_t: ...
def is_floating_dtype(*args) -> bool: ...
def create_insn(*args) -> int: ...
def decode_insn(*args) -> int: ...
def can_decode(*args) -> bool: ...
def print_operand(*args) -> 'qstring *': ...
def decode_prev_insn(*args) -> ea_t: ...

class macro_constructor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    reserved: Incomplete
    __swig_destroy__: Incomplete
    def build_macro(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    def __disown__(self): ...

def construct_macro2(*args) -> bool: ...
def decode_preceding_insn(*args) -> 'PyObject *': ...
def construct_macro(*args) -> bool: ...
def get_dtype_by_size(*args) -> int: ...
def get_immvals(*args) -> 'PyObject *': ...
def get_printable_immvals(*args) -> 'PyObject *': ...
def insn_t__from_ptrval__(*args) -> 'insn_t *': ...
def op_t__from_ptrval__(*args) -> 'op_t *': ...
def outctx_base_t__from_ptrval__(*args) -> 'outctx_base_t *': ...
def outctx_t__from_ptrval__(*args) -> 'outctx_t *': ...
ua_mnem = print_insn_mnem
