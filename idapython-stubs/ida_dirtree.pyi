# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class direntry_vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'direntry_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'direntry_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'direntry_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< direntry_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< direntry_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< direntry_t >::iterator': ...
    def erase(self, *args) -> 'qvector< direntry_t >::iterator': ...
    def find(self, *args) -> 'qvector< direntry_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'direntry_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class dirtree_cursor_vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'dirtree_cursor_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'dirtree_cursor_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'dirtree_cursor_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< dirtree_cursor_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< dirtree_cursor_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< dirtree_cursor_t >::iterator': ...
    def erase(self, *args) -> 'qvector< dirtree_cursor_t >::iterator': ...
    def find(self, *args) -> 'qvector< dirtree_cursor_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'dirtree_cursor_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class direntry_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    idx: Incomplete
    isdir: Incomplete
    BADIDX: Incomplete
    ROOTIDX: Incomplete
    def __init__(self, *args) -> None: ...
    def valid(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

DTN_FULL_NAME: Incomplete
DTN_DISPLAY_NAME: Incomplete

class dirspec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    flags: Incomplete
    DSF_INODE_EA: Incomplete
    DSF_PRIVRANGE: Incomplete
    DSF_ORDERABLE: Incomplete
    id: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def get_name(self, *args) -> bool: ...
    def get_inode(self, *args) -> inode_t: ...
    def get_attrs(self, *args) -> qstring: ...
    def rename_inode(self, *args) -> bool: ...
    def unlink_inode(self, *args) -> None: ...
    def is_orderable(self, *args) -> bool: ...
    nodename = id
    def __disown__(self): ...

class dirtree_cursor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    parent: Incomplete
    rank: Incomplete
    def __init__(self, *args) -> None: ...
    def valid(self, *args) -> bool: ...
    def is_root_cursor(self, *args) -> bool: ...
    def set_root_cursor(self, *args) -> None: ...
    @staticmethod
    def root_cursor(*args) -> dirtree_cursor_t: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    __swig_destroy__: Incomplete

def dirtree_cursor_t_root_cursor(*args) -> dirtree_cursor_t: ...

class dirtree_selection_t(dirtree_cursor_vec_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class dirtree_iterator_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    pattern: Incomplete
    cursor: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

DTE_OK: Incomplete
DTE_ALREADY_EXISTS: Incomplete
DTE_NOT_FOUND: Incomplete
DTE_NOT_DIRECTORY: Incomplete
DTE_NOT_EMPTY: Incomplete
DTE_BAD_PATH: Incomplete
DTE_CANT_RENAME: Incomplete
DTE_OWN_CHILD: Incomplete
DTE_MAX_DIR: Incomplete
DTE_LAST: Incomplete

class dirtree_visitor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def visit(self, *args) -> ssize_t: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __disown__(self): ...

class dirtree_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    @staticmethod
    def errstr(*args) -> 'char const *': ...
    def is_orderable(self, *args) -> bool: ...
    def chdir(self, *args) -> dterr_t: ...
    def getcwd(self, *args) -> qstring: ...
    def get_abspath(self, *args) -> qstring: ...
    def resolve_cursor(self, *args) -> direntry_t: ...
    def resolve_path(self, *args) -> direntry_t: ...
    def isdir(self, *args) -> bool: ...
    def isfile(self, *args) -> bool: ...
    def get_entry_name(self, *args) -> qstring: ...
    def is_dir_ordered(self, *args) -> bool: ...
    def set_natural_order(self, *args) -> bool: ...
    def get_dir_size(self, *args) -> ssize_t: ...
    def get_entry_attrs(self, *args) -> qstring: ...
    def findfirst(self, *args) -> bool: ...
    def findnext(self, *args) -> bool: ...
    def mkdir(self, *args) -> dterr_t: ...
    def rmdir(self, *args) -> dterr_t: ...
    def link(self, *args) -> dterr_t: ...
    def unlink(self, *args) -> dterr_t: ...
    def rename(self, *args) -> dterr_t: ...
    def get_rank(self, *args) -> ssize_t: ...
    def change_rank(self, *args) -> dterr_t: ...
    def get_parent_cursor(self, *args) -> dirtree_cursor_t: ...
    def load(self, *args) -> bool: ...
    def save(self, *args) -> bool: ...
    def get_id(self, *args) -> 'char const *': ...
    def set_id(self, *args) -> None: ...
    def notify_dirtree(self, *args) -> None: ...
    def traverse(self, *args) -> ssize_t: ...
    def find_entry(self, *args) -> dirtree_cursor_t: ...
    get_nodename = get_id
    set_nodename = set_id

def dirtree_t_errstr(*args) -> 'char const *': ...

DIRTREE_LOCAL_TYPES: Incomplete
DIRTREE_STRUCTS: Incomplete
DIRTREE_ENUMS: Incomplete
DIRTREE_FUNCS: Incomplete
DIRTREE_NAMES: Incomplete
DIRTREE_IMPORTS: Incomplete
DIRTREE_IDAPLACE_BOOKMARKS: Incomplete
DIRTREE_STRUCTS_BOOKMARKS: Incomplete
DIRTREE_ENUMS_BOOKMARKS: Incomplete
DIRTREE_BPTS: Incomplete
DIRTREE_END: Incomplete

def get_std_dirtree(*args) -> 'dirtree_t *': ...
