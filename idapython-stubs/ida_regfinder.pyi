# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class reg_value_def_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    val: Incomplete
    def_ea: Incomplete
    def_itype: Incomplete
    flags: Incomplete
    SHORT_INSN: Incomplete
    PC_BASED: Incomplete
    LIKE_GOT: Incomplete
    def __init__(self, *args) -> None: ...
    def is_short_insn(self, *args) -> bool: ...
    def is_pc_based(self, *args) -> bool: ...
    def is_like_got(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    NOVAL: Incomplete
    UVAL: Incomplete
    SPVAL: Incomplete
    def dstr(self, *args) -> qstring: ...
    __swig_destroy__: Incomplete

cvar: Incomplete

class reg_value_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def empty(self, *args) -> bool: ...
    @staticmethod
    def make_dead_end(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_aborted(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_badinsn(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_unkinsn(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_unkfunc(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_unkloop(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_unkmult(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_num(*args) -> reg_value_info_t: ...
    @staticmethod
    def make_initial_sp(*args) -> reg_value_info_t: ...
    def is_dead_end(self, *args) -> bool: ...
    def aborted(self, *args) -> bool: ...
    def is_special(self, *args) -> bool: ...
    def is_badinsn(self, *args) -> bool: ...
    def is_unkinsn(self, *args) -> bool: ...
    def is_unkfunc(self, *args) -> bool: ...
    def is_unkloop(self, *args) -> bool: ...
    def is_unkmult(self, *args) -> bool: ...
    def is_unknown(self, *args) -> bool: ...
    def is_num(self, *args) -> bool: ...
    def is_spd(self, *args) -> bool: ...
    def is_known(self, *args) -> bool: ...
    def get_num(self, *args) -> bool: ...
    def get_spd(self, *args) -> bool: ...
    def get_def_ea(self, *args) -> ea_t: ...
    def get_def_itype(self, *args) -> uint16: ...
    def is_value_unique(self, *args) -> bool: ...
    def have_all_vals_flag(self, *args) -> bool: ...
    def is_all_vals_pc_based(self, *args) -> bool: ...
    def is_all_vals_like_got(self, *args) -> bool: ...
    def set_dead_end(self, *args) -> None: ...
    def set_badinsn(self, *args) -> None: ...
    def set_unkinsn(self, *args) -> None: ...
    def set_unkfunc(self, *args) -> None: ...
    def set_unkloop(self, *args) -> None: ...
    def set_unkmult(self, *args) -> None: ...
    def set_aborted(self, *args) -> None: ...
    def set_num(self, *args) -> None: ...
    EQUAL: Incomplete
    CONTAINS: Incomplete
    CONTAINED: Incomplete
    NOT_COMPARABLE: Incomplete
    def vals_union(self, *args) -> 'reg_value_info_t::set_compare_res_t': ...
    def extend(self, *args) -> None: ...
    def trunc_uval(self, *args) -> None: ...
    ADD: Incomplete
    SUB: Incomplete
    OR: Incomplete
    AND: Incomplete
    XOR: Incomplete
    AND_NOT: Incomplete
    SLL: Incomplete
    SLR: Incomplete
    NEG: Incomplete
    NOT: Incomplete
    def add(self, *args) -> None: ...
    def sub(self, *args) -> None: ...
    def bor(self, *args) -> None: ...
    def band(self, *args) -> None: ...
    def bxor(self, *args) -> None: ...
    def bandnot(self, *args) -> None: ...
    def sll(self, *args) -> None: ...
    def slr(self, *args) -> None: ...
    def neg(self, *args) -> None: ...
    def bnot(self, *args) -> None: ...
    def add_num(self, *args) -> None: ...
    def shift_left(self, *args) -> None: ...
    def shift_right(self, *args) -> None: ...
    def __str__(self, *args) -> qstring: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'reg_value_def_t const &': ...
    __swig_destroy__: Incomplete

def reg_value_info_t_make_dead_end(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_aborted(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_badinsn(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_unkinsn(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_unkfunc(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_unkloop(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_unkmult(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_num(*args) -> reg_value_info_t: ...
def reg_value_info_t_make_initial_sp(*args) -> reg_value_info_t: ...
def find_reg_value(*args) -> 'uint64 *': ...
def find_sp_value(*args) -> 'int64 *': ...
def find_reg_value_info(*args) -> bool: ...
def find_nearest_rvi(*args) -> int: ...
def invalidate_regfinder_cache(*args) -> None: ...
