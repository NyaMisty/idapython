# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class segm_move_info_vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'segm_move_info_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'segm_move_info_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'segm_move_info_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< segm_move_info_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< segm_move_info_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< segm_move_info_t >::iterator': ...
    def erase(self, *args) -> 'qvector< segm_move_info_t >::iterator': ...
    def find(self, *args) -> 'qvector< segm_move_info_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'segm_move_info_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class graph_location_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    zoom: Incomplete
    orgx: Incomplete
    orgy: Incomplete
    def __init__(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class segm_move_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    _from: Incomplete
    to: Incomplete
    size: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class segm_move_infos_t(segm_move_info_vec_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def find(self, *args) -> 'segm_move_info_t const *': ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class renderer_info_pos_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    node: Incomplete
    cx: Incomplete
    cy: Incomplete
    def __init__(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class renderer_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    gli: Incomplete
    pos: Incomplete
    rtype: Incomplete
    def __init__(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

LSEF_PLACE: Incomplete
LSEF_RINFO: Incomplete
LSEF_PTYPE: Incomplete
LSEF_ALL: Incomplete

class lochist_entry_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    rinfo: Incomplete
    plce: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def renderer_info(self, *args) -> 'renderer_info_t &': ...
    def place(self, *args) -> 'place_t *': ...
    def set_place(self, *args) -> None: ...
    def is_valid(self, *args) -> bool: ...
    def acquire_place(self, *args) -> None: ...

UNHID_SEGM: Incomplete
UNHID_FUNC: Incomplete
UNHID_RANGE: Incomplete
DEFAULT_CURSOR_Y: Incomplete
DEFAULT_LNNUM: Incomplete
CURLOC_LIST: Incomplete
MAX_MARK_SLOT: Incomplete

class lochist_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def is_history_enabled(self, *args) -> bool: ...
    def get_place_id(self, *args) -> int: ...
    def init(self, *args) -> bool: ...
    def netcode(self, *args) -> nodeidx_t: ...
    def jump(self, *args) -> None: ...
    def current_index(self, *args) -> uint32: ...
    def seek(self, *args) -> bool: ...
    def fwd(self, *args) -> bool: ...
    def back(self, *args) -> bool: ...
    def save(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def get_current(self, *args) -> 'lochist_entry_t const &': ...
    def set_current(self, *args) -> None: ...
    def set(self, *args) -> None: ...
    def get(self, *args) -> bool: ...
    def size(self, *args) -> uint32: ...
    def get_template_place(self, *args) -> 'place_t const *': ...

class bookmarks_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    @staticmethod
    def mark(*args) -> uint32: ...
    @staticmethod
    def get_desc(*args) -> 'qstring *': ...
    @staticmethod
    def find_index(*args) -> uint32: ...
    @staticmethod
    def size(*args) -> uint32: ...
    @staticmethod
    def erase(*args) -> bool: ...
    @staticmethod
    def get_dirtree_id(*args) -> dirtree_id_t: ...
    @staticmethod
    def get(*args) -> 'PyObject *': ...
    widget: Incomplete
    userdata: Incomplete
    template: Incomplete
    def __init__(self, w) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, idx): ...

BOOKMARKS_PROMPT_WITH_HINT_PREFIX: Incomplete

def bookmarks_t_mark(*args) -> uint32: ...
def bookmarks_t_get_desc(*args) -> 'qstring *': ...
def bookmarks_t_find_index(*args) -> uint32: ...
def bookmarks_t_size(*args) -> uint32: ...
def bookmarks_t_erase(*args) -> bool: ...
def bookmarks_t_get_dirtree_id(*args) -> dirtree_id_t: ...
def bookmarks_t_get(*args) -> 'PyObject *': ...
