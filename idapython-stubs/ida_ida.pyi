# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import _ida_ida
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete
AF_FINAL: Incomplete
f_EXE_old: Incomplete
f_COM_old: Incomplete
f_BIN: Incomplete
f_DRV: Incomplete
f_WIN: Incomplete
f_HEX: Incomplete
f_MEX: Incomplete
f_LX: Incomplete
f_LE: Incomplete
f_NLM: Incomplete
f_COFF: Incomplete
f_PE: Incomplete
f_OMF: Incomplete
f_SREC: Incomplete
f_ZIP: Incomplete
f_OMFLIB: Incomplete
f_AR: Incomplete
f_LOADER: Incomplete
f_ELF: Incomplete
f_W32RUN: Incomplete
f_AOUT: Incomplete
f_PRC: Incomplete
f_EXE: Incomplete
f_COM: Incomplete
f_AIXAR: Incomplete
f_MACHO: Incomplete
f_PSXOBJ: Incomplete

def is_filetype_like_binary(*args) -> bool: ...

class compiler_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    id: Incomplete
    cm: Incomplete
    size_i: Incomplete
    size_b: Incomplete
    size_e: Incomplete
    defalign: Incomplete
    size_s: Incomplete
    size_l: Incomplete
    size_ll: Incomplete
    size_ldbl: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

STT_CUR: Incomplete
STT_VA: Incomplete
STT_MM: Incomplete
STT_DBG: Incomplete
IDAINFO_TAG_SIZE: Incomplete
IDAINFO_PROCNAME_SIZE: Incomplete
IDAINFO_STRLIT_PREF_SIZE: Incomplete

class idainfo:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    tag: Incomplete
    version: Incomplete
    procname: Incomplete
    s_genflags: Incomplete
    database_change_count: Incomplete
    filetype: Incomplete
    ostype: Incomplete
    apptype: Incomplete
    asmtype: Incomplete
    specsegs: Incomplete
    af: Incomplete
    af2: Incomplete
    baseaddr: Incomplete
    start_ss: Incomplete
    start_cs: Incomplete
    start_ip: Incomplete
    start_ea: Incomplete
    start_sp: Incomplete
    main: Incomplete
    min_ea: Incomplete
    max_ea: Incomplete
    omin_ea: Incomplete
    omax_ea: Incomplete
    lowoff: Incomplete
    highoff: Incomplete
    maxref: Incomplete
    xrefnum: Incomplete
    type_xrefnum: Incomplete
    refcmtnum: Incomplete
    s_xrefflag: Incomplete
    max_autoname_len: Incomplete
    nametype: Incomplete
    short_demnames: Incomplete
    long_demnames: Incomplete
    demnames: Incomplete
    listnames: Incomplete
    indent: Incomplete
    cmt_indent: Incomplete
    margin: Incomplete
    lenxref: Incomplete
    outflags: Incomplete
    s_cmtflg: Incomplete
    s_limiter: Incomplete
    bin_prefix_size: Incomplete
    s_prefflag: Incomplete
    strlit_flags: Incomplete
    strlit_break: Incomplete
    strlit_zeroes: Incomplete
    strtype: Incomplete
    strlit_pref: Incomplete
    strlit_sernum: Incomplete
    datatypes: Incomplete
    cc: Incomplete
    abibits: Incomplete
    appcall_options: Incomplete
    def get_abiname(self, *args) -> qstring: ...
    def _get_lflags(self, *args) -> uint32: ...
    def _set_lflags(self, *args) -> None: ...
    abiname: Incomplete
    lflags: Incomplete
    minEA: Incomplete
    maxEA: Incomplete
    procName: Incomplete

INFFL_AUTO: Incomplete
INFFL_ALLASM: Incomplete
INFFL_LOADIDC: Incomplete
INFFL_NOUSER: Incomplete
INFFL_READONLY: Incomplete
INFFL_CHKOPS: Incomplete
INFFL_NMOPS: Incomplete
INFFL_GRAPH_VIEW: Incomplete
LFLG_PC_FPP: Incomplete
LFLG_PC_FLAT: Incomplete
LFLG_64BIT: Incomplete
LFLG_IS_DLL: Incomplete
LFLG_FLAT_OFF32: Incomplete
LFLG_MSF: Incomplete
LFLG_WIDE_HBF: Incomplete
LFLG_DBG_NOPATH: Incomplete
LFLG_SNAPSHOT: Incomplete
LFLG_PACK: Incomplete
LFLG_COMPRESS: Incomplete
LFLG_KERNMODE: Incomplete
IDB_UNPACKED: Incomplete
IDB_PACKED: Incomplete
IDB_COMPRESSED: Incomplete
AF_CODE: Incomplete
AF_MARKCODE: Incomplete
AF_JUMPTBL: Incomplete
AF_PURDAT: Incomplete
AF_USED: Incomplete
AF_UNK: Incomplete
AF_PROCPTR: Incomplete
AF_PROC: Incomplete
AF_FTAIL: Incomplete
AF_LVAR: Incomplete
AF_STKARG: Incomplete
AF_REGARG: Incomplete
AF_TRACE: Incomplete
AF_VERSP: Incomplete
AF_ANORET: Incomplete
AF_MEMFUNC: Incomplete
AF_TRFUNC: Incomplete
AF_STRLIT: Incomplete
AF_CHKUNI: Incomplete
AF_FIXUP: Incomplete
AF_DREFOFF: Incomplete
AF_IMMOFF: Incomplete
AF_DATOFF: Incomplete
AF_FLIRT: Incomplete
AF_SIGCMT: Incomplete
AF_SIGMLT: Incomplete
AF_HFLIRT: Incomplete
AF_JFUNC: Incomplete
AF_NULLSUB: Incomplete
AF_DODATA: Incomplete
AF_DOCODE: Incomplete
AF2_DOEH: Incomplete
AF2_DORTTI: Incomplete
AF2_MACRO: Incomplete
AF2_MERGESTR: Incomplete
SW_SEGXRF: Incomplete
SW_XRFMRK: Incomplete
SW_XRFFNC: Incomplete
SW_XRFVAL: Incomplete
NM_REL_OFF: Incomplete
NM_PTR_OFF: Incomplete
NM_NAM_OFF: Incomplete
NM_REL_EA: Incomplete
NM_PTR_EA: Incomplete
NM_NAM_EA: Incomplete
NM_EA: Incomplete
NM_EA4: Incomplete
NM_EA8: Incomplete
NM_SHORT: Incomplete
NM_SERIAL: Incomplete
DEMNAM_MASK: Incomplete
DEMNAM_CMNT: Incomplete
DEMNAM_NAME: Incomplete
DEMNAM_NONE: Incomplete
DEMNAM_GCC3: Incomplete
DEMNAM_FIRST: Incomplete
LN_NORMAL: Incomplete
LN_PUBLIC: Incomplete
LN_AUTO: Incomplete
LN_WEAK: Incomplete
OFLG_SHOW_VOID: Incomplete
OFLG_SHOW_AUTO: Incomplete
OFLG_GEN_NULL: Incomplete
OFLG_SHOW_PREF: Incomplete
OFLG_PREF_SEG: Incomplete
OFLG_LZERO: Incomplete
OFLG_GEN_ORG: Incomplete
OFLG_GEN_ASSUME: Incomplete
OFLG_GEN_TRYBLKS: Incomplete
SCF_RPTCMT: Incomplete
SCF_ALLCMT: Incomplete
SCF_NOCMT: Incomplete
SCF_LINNUM: Incomplete
SCF_TESTMODE: Incomplete
SCF_SHHID_ITEM: Incomplete
SCF_SHHID_FUNC: Incomplete
SCF_SHHID_SEGM: Incomplete
LMT_THIN: Incomplete
LMT_THICK: Incomplete
LMT_EMPTY: Incomplete
PREF_SEGADR: Incomplete
PREF_FNCOFF: Incomplete
PREF_STACK: Incomplete
PREF_PFXTRUNC: Incomplete
STRF_GEN: Incomplete
STRF_AUTO: Incomplete
STRF_SERIAL: Incomplete
STRF_UNICODE: Incomplete
STRF_COMMENT: Incomplete
STRF_SAVECASE: Incomplete
ABI_8ALIGN4: Incomplete
ABI_PACK_STKARGS: Incomplete
ABI_BIGARG_ALIGN: Incomplete
ABI_STACK_LDBL: Incomplete
ABI_STACK_VARARGS: Incomplete
ABI_HARD_FLOAT: Incomplete
ABI_SET_BY_USER: Incomplete
ABI_GCC_LAYOUT: Incomplete
ABI_MAP_STKARGS: Incomplete
ABI_HUGEARG_ALIGN: Incomplete
INF_VERSION: Incomplete
INF_PROCNAME: Incomplete
INF_GENFLAGS: Incomplete
INF_LFLAGS: Incomplete
INF_DATABASE_CHANGE_COUNT: Incomplete
INF_FILETYPE: Incomplete
INF_OSTYPE: Incomplete
INF_APPTYPE: Incomplete
INF_ASMTYPE: Incomplete
INF_SPECSEGS: Incomplete
INF_AF: Incomplete
INF_AF2: Incomplete
INF_BASEADDR: Incomplete
INF_START_SS: Incomplete
INF_START_CS: Incomplete
INF_START_IP: Incomplete
INF_START_EA: Incomplete
INF_START_SP: Incomplete
INF_MAIN: Incomplete
INF_MIN_EA: Incomplete
INF_MAX_EA: Incomplete
INF_OMIN_EA: Incomplete
INF_OMAX_EA: Incomplete
INF_LOWOFF: Incomplete
INF_HIGHOFF: Incomplete
INF_MAXREF: Incomplete
INF_PRIVRANGE: Incomplete
INF_PRIVRANGE_START_EA: Incomplete
INF_PRIVRANGE_END_EA: Incomplete
INF_NETDELTA: Incomplete
INF_XREFNUM: Incomplete
INF_TYPE_XREFNUM: Incomplete
INF_REFCMTNUM: Incomplete
INF_XREFFLAG: Incomplete
INF_MAX_AUTONAME_LEN: Incomplete
INF_NAMETYPE: Incomplete
INF_SHORT_DEMNAMES: Incomplete
INF_LONG_DEMNAMES: Incomplete
INF_DEMNAMES: Incomplete
INF_LISTNAMES: Incomplete
INF_INDENT: Incomplete
INF_CMT_INDENT: Incomplete
INF_MARGIN: Incomplete
INF_LENXREF: Incomplete
INF_OUTFLAGS: Incomplete
INF_CMTFLG: Incomplete
INF_LIMITER: Incomplete
INF_BIN_PREFIX_SIZE: Incomplete
INF_PREFFLAG: Incomplete
INF_STRLIT_FLAGS: Incomplete
INF_STRLIT_BREAK: Incomplete
INF_STRLIT_ZEROES: Incomplete
INF_STRTYPE: Incomplete
INF_STRLIT_PREF: Incomplete
INF_STRLIT_SERNUM: Incomplete
INF_DATATYPES: Incomplete
INF_CC: Incomplete
INF_CC_ID: Incomplete
INF_CC_CM: Incomplete
INF_CC_SIZE_I: Incomplete
INF_CC_SIZE_B: Incomplete
INF_CC_SIZE_E: Incomplete
INF_CC_DEFALIGN: Incomplete
INF_CC_SIZE_S: Incomplete
INF_CC_SIZE_L: Incomplete
INF_CC_SIZE_LL: Incomplete
INF_CC_SIZE_LDBL: Incomplete
INF_ABIBITS: Incomplete
INF_APPCALL_OPTIONS: Incomplete
INF_FILE_FORMAT_NAME: Incomplete
INF_GROUPS: Incomplete
INF_H_PATH: Incomplete
INF_C_MACROS: Incomplete
INF_INCLUDE: Incomplete
INF_DUALOP_GRAPH: Incomplete
INF_DUALOP_TEXT: Incomplete
INF_MD5: Incomplete
INF_IDA_VERSION: Incomplete
INF_STR_ENCODINGS: Incomplete
INF_DBG_BINPATHS: Incomplete
INF_SHA256: Incomplete
INF_ABINAME: Incomplete
INF_ARCHIVE_PATH: Incomplete
INF_PROBLEMS: Incomplete
INF_SELECTORS: Incomplete
INF_NOTEPAD: Incomplete
INF_SRCDBG_PATHS: Incomplete
INF_SRCDBG_UNDESIRED: Incomplete
INF_INITIAL_VERSION: Incomplete
INF_CTIME: Incomplete
INF_ELAPSED: Incomplete
INF_NOPENS: Incomplete
INF_CRC32: Incomplete
INF_IMAGEBASE: Incomplete
INF_IDSNODE: Incomplete
INF_FSIZE: Incomplete
INF_OUTFILEENC: Incomplete
INF_INPUT_FILE_PATH: Incomplete
INF_LAST: Incomplete

def getinf_str(*args) -> 'qstring *': ...
def delinf(*args) -> bool: ...
def inf_get_version(*args) -> ushort: ...
def inf_set_version(*args) -> bool: ...
def inf_get_genflags(*args) -> ushort: ...
def inf_set_genflags(*args) -> bool: ...
def inf_is_auto_enabled(*args) -> bool: ...
def inf_set_auto_enabled(*args) -> bool: ...
def inf_use_allasm(*args) -> bool: ...
def inf_set_use_allasm(*args) -> bool: ...
def inf_loading_idc(*args) -> bool: ...
def inf_set_loading_idc(*args) -> bool: ...
def inf_no_store_user_info(*args) -> bool: ...
def inf_set_no_store_user_info(*args) -> bool: ...
def inf_readonly_idb(*args) -> bool: ...
def inf_set_readonly_idb(*args) -> bool: ...
def inf_check_manual_ops(*args) -> bool: ...
def inf_set_check_manual_ops(*args) -> bool: ...
def inf_allow_non_matched_ops(*args) -> bool: ...
def inf_set_allow_non_matched_ops(*args) -> bool: ...
def inf_is_graph_view(*args) -> bool: ...
def inf_set_graph_view(*args) -> bool: ...
def inf_get_lflags(*args) -> uint32: ...
def inf_set_lflags(*args) -> bool: ...
def inf_decode_fpp(*args) -> bool: ...
def inf_set_decode_fpp(*args) -> bool: ...
def inf_is_32bit_or_higher(*args) -> bool: ...
def inf_is_32bit_exactly(*args) -> bool: ...
def inf_set_32bit(*args) -> bool: ...
def inf_is_16bit(*args) -> bool: ...
def inf_is_64bit(*args) -> bool: ...
def inf_set_64bit(*args) -> bool: ...
def inf_is_dll(*args) -> bool: ...
def inf_set_dll(*args) -> bool: ...
def inf_is_flat_off32(*args) -> bool: ...
def inf_set_flat_off32(*args) -> bool: ...
def inf_is_be(*args) -> bool: ...
def inf_set_be(*args) -> bool: ...
def inf_is_wide_high_byte_first(*args) -> bool: ...
def inf_set_wide_high_byte_first(*args) -> bool: ...
def inf_dbg_no_store_path(*args) -> bool: ...
def inf_set_dbg_no_store_path(*args) -> bool: ...
def inf_is_snapshot(*args) -> bool: ...
def inf_set_snapshot(*args) -> bool: ...
def inf_pack_idb(*args) -> bool: ...
def inf_set_pack_idb(*args) -> bool: ...
def inf_compress_idb(*args) -> bool: ...
def inf_set_compress_idb(*args) -> bool: ...
def inf_is_kernel_mode(*args) -> bool: ...
def inf_set_kernel_mode(*args) -> bool: ...
def inf_get_app_bitness(*args) -> uint: ...
def inf_set_app_bitness(*args) -> None: ...
def inf_get_database_change_count(*args) -> uint32: ...
def inf_set_database_change_count(*args) -> bool: ...
def inf_get_filetype(*args) -> filetype_t: ...
def inf_set_filetype(*args) -> bool: ...
def inf_get_ostype(*args) -> ushort: ...
def inf_set_ostype(*args) -> bool: ...
def inf_get_apptype(*args) -> ushort: ...
def inf_set_apptype(*args) -> bool: ...
def inf_get_asmtype(*args) -> uchar: ...
def inf_set_asmtype(*args) -> bool: ...
def inf_get_specsegs(*args) -> uchar: ...
def inf_set_specsegs(*args) -> bool: ...
def inf_get_af(*args) -> uint32: ...
def inf_set_af(*args) -> bool: ...
def inf_trace_flow(*args) -> bool: ...
def inf_set_trace_flow(*args) -> bool: ...
def inf_mark_code(*args) -> bool: ...
def inf_set_mark_code(*args) -> bool: ...
def inf_create_jump_tables(*args) -> bool: ...
def inf_set_create_jump_tables(*args) -> bool: ...
def inf_noflow_to_data(*args) -> bool: ...
def inf_set_noflow_to_data(*args) -> bool: ...
def inf_create_all_xrefs(*args) -> bool: ...
def inf_set_create_all_xrefs(*args) -> bool: ...
def inf_del_no_xref_insns(*args) -> bool: ...
def inf_set_del_no_xref_insns(*args) -> bool: ...
def inf_create_func_from_ptr(*args) -> bool: ...
def inf_set_create_func_from_ptr(*args) -> bool: ...
def inf_create_func_from_call(*args) -> bool: ...
def inf_set_create_func_from_call(*args) -> bool: ...
def inf_create_func_tails(*args) -> bool: ...
def inf_set_create_func_tails(*args) -> bool: ...
def inf_should_create_stkvars(*args) -> bool: ...
def inf_set_should_create_stkvars(*args) -> bool: ...
def inf_propagate_stkargs(*args) -> bool: ...
def inf_set_propagate_stkargs(*args) -> bool: ...
def inf_propagate_regargs(*args) -> bool: ...
def inf_set_propagate_regargs(*args) -> bool: ...
def inf_should_trace_sp(*args) -> bool: ...
def inf_set_should_trace_sp(*args) -> bool: ...
def inf_full_sp_ana(*args) -> bool: ...
def inf_set_full_sp_ana(*args) -> bool: ...
def inf_noret_ana(*args) -> bool: ...
def inf_set_noret_ana(*args) -> bool: ...
def inf_guess_func_type(*args) -> bool: ...
def inf_set_guess_func_type(*args) -> bool: ...
def inf_truncate_on_del(*args) -> bool: ...
def inf_set_truncate_on_del(*args) -> bool: ...
def inf_create_strlit_on_xref(*args) -> bool: ...
def inf_set_create_strlit_on_xref(*args) -> bool: ...
def inf_check_unicode_strlits(*args) -> bool: ...
def inf_set_check_unicode_strlits(*args) -> bool: ...
def inf_create_off_using_fixup(*args) -> bool: ...
def inf_set_create_off_using_fixup(*args) -> bool: ...
def inf_create_off_on_dref(*args) -> bool: ...
def inf_set_create_off_on_dref(*args) -> bool: ...
def inf_op_offset(*args) -> bool: ...
def inf_set_op_offset(*args) -> bool: ...
def inf_data_offset(*args) -> bool: ...
def inf_set_data_offset(*args) -> bool: ...
def inf_use_flirt(*args) -> bool: ...
def inf_set_use_flirt(*args) -> bool: ...
def inf_append_sigcmt(*args) -> bool: ...
def inf_set_append_sigcmt(*args) -> bool: ...
def inf_allow_sigmulti(*args) -> bool: ...
def inf_set_allow_sigmulti(*args) -> bool: ...
def inf_hide_libfuncs(*args) -> bool: ...
def inf_set_hide_libfuncs(*args) -> bool: ...
def inf_rename_jumpfunc(*args) -> bool: ...
def inf_set_rename_jumpfunc(*args) -> bool: ...
def inf_rename_nullsub(*args) -> bool: ...
def inf_set_rename_nullsub(*args) -> bool: ...
def inf_coagulate_data(*args) -> bool: ...
def inf_set_coagulate_data(*args) -> bool: ...
def inf_coagulate_code(*args) -> bool: ...
def inf_set_coagulate_code(*args) -> bool: ...
def inf_final_pass(*args) -> bool: ...
def inf_set_final_pass(*args) -> bool: ...
def inf_get_af2(*args) -> uint32: ...
def inf_set_af2(*args) -> bool: ...
def inf_handle_eh(*args) -> bool: ...
def inf_set_handle_eh(*args) -> bool: ...
def inf_handle_rtti(*args) -> bool: ...
def inf_set_handle_rtti(*args) -> bool: ...
def inf_macros_enabled(*args) -> bool: ...
def inf_set_macros_enabled(*args) -> bool: ...
def inf_merge_strlits(*args) -> bool: ...
def inf_set_merge_strlits(*args) -> bool: ...
def inf_get_baseaddr(*args) -> uval_t: ...
def inf_set_baseaddr(*args) -> bool: ...
def inf_get_start_ss(*args) -> sel_t: ...
def inf_set_start_ss(*args) -> bool: ...
def inf_get_start_cs(*args) -> sel_t: ...
def inf_set_start_cs(*args) -> bool: ...
def inf_get_start_ip(*args) -> ea_t: ...
def inf_set_start_ip(*args) -> bool: ...
def inf_get_start_ea(*args) -> ea_t: ...
def inf_set_start_ea(*args) -> bool: ...
def inf_get_start_sp(*args) -> ea_t: ...
def inf_set_start_sp(*args) -> bool: ...
def inf_get_main(*args) -> ea_t: ...
def inf_set_main(*args) -> bool: ...
def inf_get_min_ea(*args) -> ea_t: ...
def inf_set_min_ea(*args) -> bool: ...
def inf_get_max_ea(*args) -> ea_t: ...
def inf_set_max_ea(*args) -> bool: ...
def inf_get_omin_ea(*args) -> ea_t: ...
def inf_set_omin_ea(*args) -> bool: ...
def inf_get_omax_ea(*args) -> ea_t: ...
def inf_set_omax_ea(*args) -> bool: ...
def inf_get_lowoff(*args) -> ea_t: ...
def inf_set_lowoff(*args) -> bool: ...
def inf_get_highoff(*args) -> ea_t: ...
def inf_set_highoff(*args) -> bool: ...
def inf_get_maxref(*args) -> uval_t: ...
def inf_set_maxref(*args) -> bool: ...
def inf_get_netdelta(*args) -> sval_t: ...
def inf_set_netdelta(*args) -> bool: ...
def inf_get_xrefnum(*args) -> uchar: ...
def inf_set_xrefnum(*args) -> bool: ...
def inf_get_type_xrefnum(*args) -> uchar: ...
def inf_set_type_xrefnum(*args) -> bool: ...
def inf_get_refcmtnum(*args) -> uchar: ...
def inf_set_refcmtnum(*args) -> bool: ...
def inf_get_xrefflag(*args) -> uchar: ...
def inf_set_xrefflag(*args) -> bool: ...
def inf_show_xref_seg(*args) -> bool: ...
def inf_set_show_xref_seg(*args) -> bool: ...
def inf_show_xref_tmarks(*args) -> bool: ...
def inf_set_show_xref_tmarks(*args) -> bool: ...
def inf_show_xref_fncoff(*args) -> bool: ...
def inf_set_show_xref_fncoff(*args) -> bool: ...
def inf_show_xref_val(*args) -> bool: ...
def inf_set_show_xref_val(*args) -> bool: ...
def inf_get_max_autoname_len(*args) -> ushort: ...
def inf_set_max_autoname_len(*args) -> bool: ...
def inf_get_nametype(*args) -> char: ...
def inf_set_nametype(*args) -> bool: ...
def inf_get_short_demnames(*args) -> uint32: ...
def inf_set_short_demnames(*args) -> bool: ...
def inf_get_long_demnames(*args) -> uint32: ...
def inf_set_long_demnames(*args) -> bool: ...
def inf_get_demnames(*args) -> uchar: ...
def inf_set_demnames(*args) -> bool: ...
def inf_get_listnames(*args) -> uchar: ...
def inf_set_listnames(*args) -> bool: ...
def inf_get_indent(*args) -> uchar: ...
def inf_set_indent(*args) -> bool: ...
def inf_get_cmt_indent(*args) -> uchar: ...
def inf_set_cmt_indent(*args) -> bool: ...
def inf_get_margin(*args) -> ushort: ...
def inf_set_margin(*args) -> bool: ...
def inf_get_lenxref(*args) -> ushort: ...
def inf_set_lenxref(*args) -> bool: ...
def inf_get_outflags(*args) -> uint32: ...
def inf_set_outflags(*args) -> bool: ...
def inf_show_void(*args) -> bool: ...
def inf_set_show_void(*args) -> bool: ...
def inf_show_auto(*args) -> bool: ...
def inf_set_show_auto(*args) -> bool: ...
def inf_gen_null(*args) -> bool: ...
def inf_set_gen_null(*args) -> bool: ...
def inf_show_line_pref(*args) -> bool: ...
def inf_set_show_line_pref(*args) -> bool: ...
def inf_line_pref_with_seg(*args) -> bool: ...
def inf_set_line_pref_with_seg(*args) -> bool: ...
def inf_gen_lzero(*args) -> bool: ...
def inf_set_gen_lzero(*args) -> bool: ...
def inf_gen_org(*args) -> bool: ...
def inf_set_gen_org(*args) -> bool: ...
def inf_gen_assume(*args) -> bool: ...
def inf_set_gen_assume(*args) -> bool: ...
def inf_gen_tryblks(*args) -> bool: ...
def inf_set_gen_tryblks(*args) -> bool: ...
def inf_get_cmtflg(*args) -> uchar: ...
def inf_set_cmtflg(*args) -> bool: ...
def inf_show_repeatables(*args) -> bool: ...
def inf_set_show_repeatables(*args) -> bool: ...
def inf_show_all_comments(*args) -> bool: ...
def inf_set_show_all_comments(*args) -> bool: ...
def inf_hide_comments(*args) -> bool: ...
def inf_set_hide_comments(*args) -> bool: ...
def inf_show_src_linnum(*args) -> bool: ...
def inf_set_show_src_linnum(*args) -> bool: ...
def inf_test_mode(*args) -> bool: ...
def inf_show_hidden_insns(*args) -> bool: ...
def inf_set_show_hidden_insns(*args) -> bool: ...
def inf_show_hidden_funcs(*args) -> bool: ...
def inf_set_show_hidden_funcs(*args) -> bool: ...
def inf_show_hidden_segms(*args) -> bool: ...
def inf_set_show_hidden_segms(*args) -> bool: ...
def inf_get_limiter(*args) -> uchar: ...
def inf_set_limiter(*args) -> bool: ...
def inf_is_limiter_thin(*args) -> bool: ...
def inf_set_limiter_thin(*args) -> bool: ...
def inf_is_limiter_thick(*args) -> bool: ...
def inf_set_limiter_thick(*args) -> bool: ...
def inf_is_limiter_empty(*args) -> bool: ...
def inf_set_limiter_empty(*args) -> bool: ...
def inf_get_bin_prefix_size(*args) -> short: ...
def inf_set_bin_prefix_size(*args) -> bool: ...
def inf_get_prefflag(*args) -> uchar: ...
def inf_set_prefflag(*args) -> bool: ...
def inf_prefix_show_segaddr(*args) -> bool: ...
def inf_set_prefix_show_segaddr(*args) -> bool: ...
def inf_prefix_show_funcoff(*args) -> bool: ...
def inf_set_prefix_show_funcoff(*args) -> bool: ...
def inf_prefix_show_stack(*args) -> bool: ...
def inf_set_prefix_show_stack(*args) -> bool: ...
def inf_prefix_truncate_opcode_bytes(*args) -> bool: ...
def inf_set_prefix_truncate_opcode_bytes(*args) -> bool: ...
def inf_get_strlit_flags(*args) -> uchar: ...
def inf_set_strlit_flags(*args) -> bool: ...
def inf_strlit_names(*args) -> bool: ...
def inf_set_strlit_names(*args) -> bool: ...
def inf_strlit_name_bit(*args) -> bool: ...
def inf_set_strlit_name_bit(*args) -> bool: ...
def inf_strlit_serial_names(*args) -> bool: ...
def inf_set_strlit_serial_names(*args) -> bool: ...
def inf_unicode_strlits(*args) -> bool: ...
def inf_set_unicode_strlits(*args) -> bool: ...
def inf_strlit_autocmt(*args) -> bool: ...
def inf_set_strlit_autocmt(*args) -> bool: ...
def inf_strlit_savecase(*args) -> bool: ...
def inf_set_strlit_savecase(*args) -> bool: ...
def inf_get_strlit_break(*args) -> uchar: ...
def inf_set_strlit_break(*args) -> bool: ...
def inf_get_strlit_zeroes(*args) -> char: ...
def inf_set_strlit_zeroes(*args) -> bool: ...
def inf_get_strtype(*args) -> int32: ...
def inf_set_strtype(*args) -> bool: ...
def inf_get_strlit_sernum(*args) -> uval_t: ...
def inf_set_strlit_sernum(*args) -> bool: ...
def inf_get_datatypes(*args) -> uval_t: ...
def inf_set_datatypes(*args) -> bool: ...
def inf_get_abibits(*args) -> uint32: ...
def inf_set_abibits(*args) -> bool: ...
def inf_is_mem_aligned4(*args) -> bool: ...
def inf_set_mem_aligned4(*args) -> bool: ...
def inf_pack_stkargs(*args) -> bool: ...
def inf_set_pack_stkargs(*args) -> bool: ...
def inf_big_arg_align(*args) -> bool: ...
def inf_set_big_arg_align(*args) -> bool: ...
def inf_stack_ldbl(*args) -> bool: ...
def inf_set_stack_ldbl(*args) -> bool: ...
def inf_stack_varargs(*args) -> bool: ...
def inf_set_stack_varargs(*args) -> bool: ...
def inf_is_hard_float(*args) -> bool: ...
def inf_set_hard_float(*args) -> bool: ...
def inf_abi_set_by_user(*args) -> bool: ...
def inf_set_abi_set_by_user(*args) -> bool: ...
def inf_use_gcc_layout(*args) -> bool: ...
def inf_set_use_gcc_layout(*args) -> bool: ...
def inf_map_stkargs(*args) -> bool: ...
def inf_set_map_stkargs(*args) -> bool: ...
def inf_huge_arg_align(*args) -> bool: ...
def inf_set_huge_arg_align(*args) -> bool: ...
def inf_get_appcall_options(*args) -> uint32: ...
def inf_set_appcall_options(*args) -> bool: ...
def inf_get_privrange_start_ea(*args) -> ea_t: ...
def inf_set_privrange_start_ea(*args) -> bool: ...
def inf_get_privrange_end_ea(*args) -> ea_t: ...
def inf_set_privrange_end_ea(*args) -> bool: ...
def inf_get_cc_id(*args) -> comp_t: ...
def inf_set_cc_id(*args) -> bool: ...
def inf_get_cc_cm(*args) -> cm_t: ...
def inf_set_cc_cm(*args) -> bool: ...
def inf_get_cc_size_i(*args) -> uchar: ...
def inf_set_cc_size_i(*args) -> bool: ...
def inf_get_cc_size_b(*args) -> uchar: ...
def inf_set_cc_size_b(*args) -> bool: ...
def inf_get_cc_size_e(*args) -> uchar: ...
def inf_set_cc_size_e(*args) -> bool: ...
def inf_get_cc_defalign(*args) -> uchar: ...
def inf_set_cc_defalign(*args) -> bool: ...
def inf_get_cc_size_s(*args) -> uchar: ...
def inf_set_cc_size_s(*args) -> bool: ...
def inf_get_cc_size_l(*args) -> uchar: ...
def inf_set_cc_size_l(*args) -> bool: ...
def inf_get_cc_size_ll(*args) -> uchar: ...
def inf_set_cc_size_ll(*args) -> bool: ...
def inf_get_cc_size_ldbl(*args) -> uchar: ...
def inf_set_cc_size_ldbl(*args) -> bool: ...
def inf_get_procname(*args) -> size_t: ...
def inf_set_procname(*args) -> bool: ...
def inf_get_strlit_pref(*args) -> size_t: ...
def inf_set_strlit_pref(*args) -> bool: ...
def inf_get_cc(*args) -> bool: ...
def inf_set_cc(*args) -> bool: ...
def inf_set_privrange(*args) -> bool: ...
def inf_get_privrange(*args) -> range_t: ...
def inf_get_af_low(*args) -> ushort: ...
def inf_set_af_low(*args) -> None: ...
def inf_get_af_high(*args) -> ushort: ...
def inf_set_af_high(*args) -> None: ...
def inf_get_af2_low(*args) -> ushort: ...
def inf_set_af2_low(*args) -> None: ...
def inf_get_pack_mode(*args) -> int: ...
def inf_set_pack_mode(*args) -> int: ...
def inf_inc_database_change_count(*args) -> None: ...
def inf_get_demname_form(*args) -> uchar: ...
def inf_postinc_strlit_sernum(*args) -> uval_t: ...
def inf_like_binary(*args) -> bool: ...

UA_MAXOP: Incomplete

def calc_default_idaplace_flags(*args) -> int: ...
def to_ea(*args) -> ea_t: ...

IDB_EXT32: Incomplete
IDB_EXT64: Incomplete
IDB_EXT: Incomplete

def get_dbctx_id(*args) -> ssize_t: ...
def get_dbctx_qty(*args) -> size_t: ...
def switch_dbctx(*args) -> 'dbctx_t *': ...
def is_database_busy(*args) -> bool: ...
def validate_idb(*args) -> size_t: ...

VLD_AUTO_REPAIR: Incomplete
VLD_DIALOG: Incomplete
VLD_SILENT: Incomplete

def move_privrange(*args) -> bool: ...

SW_RPTCMT: Incomplete
SW_ALLCMT: Incomplete
SW_NOCMT: Incomplete
SW_LINNUM: Incomplete
SW_TESTMODE: Incomplete
SW_SHHID_ITEM: Incomplete
SW_SHHID_FUNC: Incomplete
SW_SHHID_SEGM: Incomplete

def __make_idainfo_bound(func, attr): ...

_NO_SETTER: str

def __make_idainfo_accessors(attr, getter_name: Incomplete | None = None, setter_name: Incomplete | None = None) -> None: ...
def __make_idainfo_getter(name): ...
idainfo_big_arg_align = inf_big_arg_align
idainfo_gen_null = inf_gen_null
idainfo_set_gen_null = inf_set_gen_null
idainfo_gen_lzero = inf_gen_lzero
idainfo_set_gen_lzero = inf_set_gen_lzero
idainfo_gen_tryblks = inf_gen_tryblks
idainfo_set_gen_tryblks = inf_set_gen_tryblks
idainfo_get_demname_form = inf_get_demname_form
idainfo_get_pack_mode = inf_get_pack_mode
idainfo_set_pack_mode = inf_set_pack_mode

def idainfo_is_32bit(): ...
idainfo_is_64bit = inf_is_64bit
idainfo_set_64bit = inf_set_64bit
idainfo_is_auto_enabled = inf_is_auto_enabled
idainfo_set_auto_enabled = inf_set_auto_enabled
idainfo_is_be = inf_is_be
idainfo_set_be = inf_set_be
idainfo_is_dll = inf_is_dll
idainfo_is_flat_off32 = inf_is_flat_off32
idainfo_is_graph_view = inf_is_graph_view
idainfo_set_graph_view = inf_set_graph_view
idainfo_is_hard_float = inf_is_hard_float
idainfo_is_kernel_mode = inf_is_kernel_mode
idainfo_is_mem_aligned4 = inf_is_mem_aligned4
idainfo_is_snapshot = inf_is_snapshot
idainfo_is_wide_high_byte_first = inf_is_wide_high_byte_first
idainfo_set_wide_high_byte_first = inf_set_wide_high_byte_first
idainfo_like_binary = inf_like_binary
idainfo_line_pref_with_seg = inf_line_pref_with_seg
idainfo_set_line_pref_with_seg = inf_set_line_pref_with_seg
idainfo_show_auto = inf_show_auto
idainfo_set_show_auto = inf_set_show_auto
idainfo_show_line_pref = inf_show_line_pref
idainfo_set_show_line_pref = inf_set_show_line_pref
idainfo_show_void = inf_show_void
idainfo_set_show_void = inf_set_show_void
idainfo_loading_idc = inf_loading_idc
idainfo_map_stkargs = inf_map_stkargs
idainfo_pack_stkargs = inf_pack_stkargs
idainfo_readonly_idb = inf_readonly_idb
idainfo_set_store_user_info: Incomplete
idainfo_stack_ldbl = inf_stack_ldbl
idainfo_stack_varargs = inf_stack_varargs
idainfo_use_allasm = inf_use_allasm
idainfo_use_gcc_layout = inf_use_gcc_layout
macros_enabled = inf_macros_enabled
should_create_stkvars = inf_should_create_stkvars
should_trace_sp = inf_should_trace_sp
show_all_comments = inf_show_all_comments
show_comments: Incomplete
show_repeatables = inf_show_repeatables
inf_get_comment = inf_get_cmt_indent
inf_set_comment = inf_set_cmt_indent
idainfo_comment_get = inf_get_cmt_indent
idainfo_comment_set = inf_set_cmt_indent
_scope: Incomplete
_scope = _ida_ida

def __wrap_hooks_callback(klass, new_name, old_name, do_call): ...
def __set_module_dynattrs(modname, pdict): ...

cvar: Incomplete
