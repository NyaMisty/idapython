from typing import Any, overload

CPL_DEL_MACROS: int
CPL_ONLY_SAFE: int
CPL_USE_LABELS: int
HF_COMMENT: int
HF_DEFAULT: int
HF_KEYWORD1: int
HF_KEYWORD2: int
HF_KEYWORD3: int
HF_MAX: int
HF_NUMBER: int
HF_PREPROC: int
HF_STRING: int
IDC_LANG_EXT: str
SWIG_PYTHON_LEGACY_BOOL: int
VARSLICE_SINGLE: int
VREF_COPY: int
VREF_LOOP: int
VREF_ONCE: int
VT_FLOAT: int
VT_FUNC: int
VT_INT64: int
VT_LONG: int
VT_OBJ: int
VT_PVOID: int
VT_REF: int
VT_STR: int
VT_WILD: int
eExecThrow: int

def add_idc_class(*args, **kwargs): ...
def add_idc_gvar(name) -> idc_value_t: ...
def compile_idc_file(nonnul_line) -> bool: ...
def compile_idc_snippet(func, text, resolver=..., only_safe_funcs=...) -> bool: ...
def compile_idc_text(nonnul_line) -> bool: ...
def copy_idcv(dst, src) -> error_t: ...
def create_idcv_ref(ref, v) -> bool: ...
def deep_copy_idcv(dst, src) -> error_t: ...
def del_idcv_attr(obj, attr) -> error_t: ...
def delete_highlighter_cbs_t(self) -> Any: ...
def delete_idc_global_t(self) -> Any: ...
def delete_idc_value_t(self) -> Any: ...
def delete_idc_values_t(self) -> Any: ...
def deref_idcv(v, vref_flags) -> idc_value_t: ...
def disown_highlighter_cbs_t(*args, **kwargs): ...
def eval_expr(rv, where, line) -> bool: ...
def eval_idc_expr(rv, where, line) -> bool: ...
def exec_idc_script(result, path, func, args, argsnum) -> bool: ...
def exec_system_script(file, complain_if_no_file=...) -> bool: ...
def find_idc_class(*args, **kwargs): ...
def find_idc_func(prefix, n=...) -> bool: ...
def find_idc_gvar(name) -> idc_value_t: ...
def first_idcv_attr(*args, **kwargs): ...
def free_idcv(v) -> Any: ...
def get_idc_filename(*args, **kwargs): ...
def get_idcv_attr(res, obj, attr, may_use_getattr=...) -> error_t: ...
def get_idcv_class_name(obj) -> error_t: ...
def get_idcv_slice(res, v, i1, i2, flags=...) -> error_t: ...
def highlighter_cbs_t_cur_block_state(self) -> int32: ...
def highlighter_cbs_t_prev_block_state(self) -> int32: ...
def highlighter_cbs_t_set_block_state(self, arg0) -> Any: ...
def highlighter_cbs_t_set_style(self, arg0, arg1, arg2) -> Any: ...
def highlighter_cbs_t_swiginit(*args, **kwargs): ...
def highlighter_cbs_t_swigregister(*args, **kwargs): ...
def idc_global_t_name_get(*args, **kwargs): ...
def idc_global_t_name_set(self, name) -> Any: ...
def idc_global_t_swiginit(*args, **kwargs): ...
def idc_global_t_swigregister(*args, **kwargs): ...
def idc_global_t_value_get(self) -> idc_value_t: ...
def idc_global_t_value_set(self, value) -> Any: ...
def idc_value_t__create_empty_string(self) -> Any: ...
def idc_value_t_c_str(*args, **kwargs): ...
def idc_value_t_clear(self) -> Any: ...
def idc_value_t_create_empty_string(self) -> Any: ...
def idc_value_t_e_get(self) -> fpvalue_t: ...
def idc_value_t_e_set(self, e) -> Any: ...
def idc_value_t_funcidx_get(self) -> int: ...
def idc_value_t_funcidx_set(self, funcidx) -> Any: ...
def idc_value_t_i64_get(self) -> int64: ...
def idc_value_t_i64_set(self, i64) -> Any: ...
def idc_value_t_is_convertible(self) -> bool: ...
def idc_value_t_is_integral(self) -> bool: ...
def idc_value_t_is_zero(self) -> bool: ...
def idc_value_t_num_get(self) -> sval_t: ...
def idc_value_t_num_set(self, num) -> Any: ...
def idc_value_t_obj_get(*args, **kwargs): ...
def idc_value_t_obj_set(self, obj) -> Any: ...
def idc_value_t_pvoid_get(*args, **kwargs): ...
def idc_value_t_pvoid_set(self, pvoid) -> Any: ...
def idc_value_t_qstr(self) -> qstring: ...
def idc_value_t_reserve_get(*args, **kwargs): ...
def idc_value_t_reserve_set(self, reserve) -> Any: ...
def idc_value_t_set_float(self, f) -> Any: ...
def idc_value_t_set_int64(self, v) -> Any: ...
def idc_value_t_set_long(self, v) -> Any: ...
def idc_value_t_set_pvoid(self, p) -> Any: ...
@overload
def idc_value_t_set_string(self, _str, len) -> Any: ...
@overload
def idc_value_t_set_string(self, _str) -> Any: ...
def idc_value_t_swap(self, v) -> Any: ...
def idc_value_t_swiginit(*args, **kwargs): ...
def idc_value_t_swigregister(*args, **kwargs): ...
def idc_value_t_u_str(*args, **kwargs): ...
def idc_value_t_vtype_get(self) -> char: ...
def idc_value_t_vtype_set(self, vtype) -> Any: ...
def idc_values_t___getitem__(self, i) -> idc_value_t: ...
def idc_values_t___len__(self) -> size_t: ...
def idc_values_t___setitem__(self, i, v) -> Any: ...
def idc_values_t_at(self, _idx) -> idc_value_t: ...
@overload
def idc_values_t_begin(self) -> idc_value_t: ...
@overload
def idc_values_t_begin(self) -> idc_value_t: ...
def idc_values_t_capacity(self) -> size_t: ...
def idc_values_t_clear(self) -> Any: ...
def idc_values_t_empty(self) -> bool: ...
@overload
def idc_values_t_end(self) -> idc_value_t: ...
@overload
def idc_values_t_end(self) -> idc_value_t: ...
@overload
def idc_values_t_erase(self, it) -> idc_value_t: ...
@overload
def idc_values_t_erase(self, first, last) -> idc_value_t: ...
def idc_values_t_extract(self) -> idc_value_t: ...
def idc_values_t_grow(self, x=...) -> Any: ...
def idc_values_t_inject(self, s, len) -> Any: ...
def idc_values_t_insert(self, it, x) -> idc_value_t: ...
def idc_values_t_pop_back(self) -> Any: ...
@overload
def idc_values_t_push_back(self, x) -> Any: ...
@overload
def idc_values_t_push_back(self) -> idc_value_t: ...
def idc_values_t_qclear(self) -> Any: ...
def idc_values_t_reserve(self, cnt) -> Any: ...
@overload
def idc_values_t_resize(self, _newsize, x) -> Any: ...
@overload
def idc_values_t_resize(self, _newsize) -> Any: ...
def idc_values_t_size(self) -> size_t: ...
def idc_values_t_swap(self, r) -> Any: ...
def idc_values_t_swiginit(*args, **kwargs): ...
def idc_values_t_swigregister(*args, **kwargs): ...
def idc_values_t_truncate(self) -> Any: ...
def idcv_float(v) -> error_t: ...
def idcv_int64(v) -> error_t: ...
def idcv_long(v) -> error_t: ...
def idcv_num(v) -> error_t: ...
def idcv_object(v, icls=...) -> error_t: ...
def idcv_string(v) -> error_t: ...
def last_idcv_attr(*args, **kwargs): ...
def move_idcv(dst, src) -> error_t: ...
def new_highlighter_cbs_t(_self) -> highlighter_cbs_t: ...
def new_idc_global_t(n) -> idc_global_t: ...
def new_idc_value_t(_str) -> idc_value_t: ...
def new_idc_values_t(x) -> idc_values_t: ...
def next_idcv_attr(*args, **kwargs): ...
def prev_idcv_attr(*args, **kwargs): ...
def print_idcv(v, name=..., indent=...) -> bool: ...
def py_add_idc_func(name, fp_ptr, args, defvals, flags) -> bool: ...
def py_get_call_idc_func() -> size_t: ...
def pyw_convert_defvals(out, py_seq) -> bool: ...
def pyw_register_idc_func(name, args, py_fp) -> size_t: ...
def pyw_unregister_idc_func(ctxptr) -> bool: ...
def set_header_path(path, add) -> bool: ...
def set_idcv_attr(obj, attr, value, may_use_setattr=...) -> error_t: ...
def set_idcv_slice(v, i1, i2, _in, flags=...) -> error_t: ...
def swap_idcvs(v1, v2) -> Any: ...
def throw_idc_exception(r, desc) -> error_t: ...
# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"