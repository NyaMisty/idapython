from typing import Any

FIND_FUNC_DEFINE: int
FIND_FUNC_EXIST: int
FIND_FUNC_IGNOREFN: int
FIND_FUNC_KEEPBD: int
FIND_FUNC_NORMAL: int
FIND_FUNC_OK: int
FIND_FUNC_UNDEF: int
FUNC_BOTTOMBP: int
FUNC_FAR: int
FUNC_FRAME: int
FUNC_FUZZY_SP: int
FUNC_HIDDEN: int
FUNC_LIB: int
FUNC_LUMINA: int
FUNC_NORET: int
FUNC_NORET_PENDING: int
FUNC_OUTLINE: int
FUNC_PROLOG_OK: int
FUNC_PURGED_OK: int
FUNC_REANALYZE: int
FUNC_SP_READY: int
FUNC_STATICDEF: int
FUNC_TAIL: int
FUNC_THUNK: int
FUNC_USERFAR: int
IDASGN_APPLIED: int
IDASGN_BADARG: int
IDASGN_CURRENT: int
IDASGN_OK: int
IDASGN_PLANNED: int
LIBFUNC_DELAY: int
LIBFUNC_FOUND: int
LIBFUNC_NONE: int
MOVE_FUNC_BADSTART: int
MOVE_FUNC_NOCODE: int
MOVE_FUNC_NOFUNC: int
MOVE_FUNC_OK: int
MOVE_FUNC_REFUSED: int
SWIG_PYTHON_LEGACY_BOOL: int

def add_func(ea1, ea2=...) -> bool: ...
def add_func_ex(pfn) -> bool: ...
def add_regarg(pfn, reg, tif, name) -> Any: ...
def append_func_tail(pfn, ea1, ea2) -> bool: ...
def apply_idasgn_to(signame, ea, is_startup) -> int: ...
def apply_startup_sig(ea, startup) -> bool: ...
def calc_func_size(pfn) -> asize_t: ...
def calc_idasgn_state(n) -> int: ...
def calc_thunk_func_target(pfn) -> ea_t: ...
def del_func(ea) -> bool: ...
def del_idasgn(n) -> int: ...
def delete_dyn_ea_array(self) -> Any: ...
def delete_dyn_range_array(self) -> Any: ...
def delete_dyn_regarg_array(self) -> Any: ...
def delete_dyn_regvar_array(self) -> Any: ...
def delete_dyn_stkpnt_array(self) -> Any: ...
def delete_func_item_iterator_t(self) -> Any: ...
def delete_func_parent_iterator_t(self) -> Any: ...
def delete_func_t(self) -> Any: ...
def delete_func_tail_iterator_t(self) -> Any: ...
def delete_lock_func(self) -> Any: ...
def delete_lock_func_with_tails_t(self) -> Any: ...
def delete_regarg_t(self) -> Any: ...
def dyn_ea_array___getitem__(*args, **kwargs): ...
def dyn_ea_array___len__(self) -> size_t: ...
def dyn_ea_array___setitem__(self, i, v) -> Any: ...
def dyn_ea_array_count_get(self) -> size_t: ...
def dyn_ea_array_data_get(*args, **kwargs): ...
def dyn_ea_array_swiginit(*args, **kwargs): ...
def dyn_ea_array_swigregister(*args, **kwargs): ...
def dyn_range_array___getitem__(self, i) -> range_t: ...
def dyn_range_array___len__(self) -> size_t: ...
def dyn_range_array___setitem__(self, i, v) -> Any: ...
def dyn_range_array_count_get(self) -> size_t: ...
def dyn_range_array_data_get(self) -> range_t: ...
def dyn_range_array_swiginit(*args, **kwargs): ...
def dyn_range_array_swigregister(*args, **kwargs): ...
def dyn_regarg_array___getitem__(self, i) -> regarg_t: ...
def dyn_regarg_array___len__(self) -> size_t: ...
def dyn_regarg_array___setitem__(self, i, v) -> Any: ...
def dyn_regarg_array_count_get(self) -> size_t: ...
def dyn_regarg_array_data_get(self) -> regarg_t: ...
def dyn_regarg_array_swiginit(*args, **kwargs): ...
def dyn_regarg_array_swigregister(*args, **kwargs): ...
def dyn_regvar_array___getitem__(*args, **kwargs): ...
def dyn_regvar_array___len__(self) -> size_t: ...
def dyn_regvar_array___setitem__(self, i, v) -> Any: ...
def dyn_regvar_array_count_get(self) -> size_t: ...
def dyn_regvar_array_data_get(*args, **kwargs): ...
def dyn_regvar_array_swiginit(*args, **kwargs): ...
def dyn_regvar_array_swigregister(*args, **kwargs): ...
def dyn_stkpnt_array___getitem__(*args, **kwargs): ...
def dyn_stkpnt_array___len__(self) -> size_t: ...
def dyn_stkpnt_array___setitem__(self, i, v) -> Any: ...
def dyn_stkpnt_array_count_get(self) -> size_t: ...
def dyn_stkpnt_array_data_get(*args, **kwargs): ...
def dyn_stkpnt_array_swiginit(*args, **kwargs): ...
def dyn_stkpnt_array_swigregister(*args, **kwargs): ...
def f_any(arg1, arg2) -> bool: ...
def find_func_bounds(nfn, flags) -> int: ...
def free_regarg(v) -> Any: ...
def func_contains(pfn, ea) -> bool: ...
def func_does_return(callee) -> bool: ...
def func_item_iterator_t___next__(self, func) -> bool: ...
def func_item_iterator_t_chunk(self) -> range_t: ...
def func_item_iterator_t_current(self) -> ea_t: ...
def func_item_iterator_t_decode_preceding_insn(self, visited, p_farref, out) -> bool: ...
def func_item_iterator_t_decode_prev_insn(self, out) -> bool: ...
def func_item_iterator_t_first(self) -> bool: ...
def func_item_iterator_t_last(self) -> bool: ...
def func_item_iterator_t_next_addr(self) -> bool: ...
def func_item_iterator_t_next_code(self) -> bool: ...
def func_item_iterator_t_next_data(self) -> bool: ...
def func_item_iterator_t_next_head(self) -> bool: ...
def func_item_iterator_t_next_not_tail(self) -> bool: ...
def func_item_iterator_t_prev(self, func) -> bool: ...
def func_item_iterator_t_prev_addr(self) -> bool: ...
def func_item_iterator_t_prev_code(self) -> bool: ...
def func_item_iterator_t_prev_data(self) -> bool: ...
def func_item_iterator_t_prev_head(self) -> bool: ...
def func_item_iterator_t_prev_not_tail(self) -> bool: ...
def func_item_iterator_t_set(self, pfn, _ea=...) -> bool: ...
def func_item_iterator_t_set_range(self, ea1, ea2) -> bool: ...
def func_item_iterator_t_succ(self, func) -> bool: ...
def func_item_iterator_t_succ_code(self) -> bool: ...
def func_item_iterator_t_swiginit(*args, **kwargs): ...
def func_item_iterator_t_swigregister(*args, **kwargs): ...
def func_parent_iterator_set(fpi, pfn) -> bool: ...
def func_parent_iterator_t___next__(self) -> bool: ...
def func_parent_iterator_t_first(self) -> bool: ...
def func_parent_iterator_t_last(self) -> bool: ...
def func_parent_iterator_t_parent(self) -> ea_t: ...
def func_parent_iterator_t_prev(self) -> bool: ...
def func_parent_iterator_t_reset_fnt(self, _fnt) -> Any: ...
def func_parent_iterator_t_set(self, _fnt) -> bool: ...
def func_parent_iterator_t_swiginit(*args, **kwargs): ...
def func_parent_iterator_t_swigregister(*args, **kwargs): ...
def func_t___get_points__(self) -> dyn_stkpnt_array: ...
def func_t___get_referers__(self) -> dyn_ea_array: ...
def func_t___get_regargs__(self) -> dyn_regarg_array: ...
def func_t___get_regvars__(self) -> dyn_regvar_array: ...
def func_t___get_tails__(self) -> dyn_range_array: ...
def func_t__from_ptrval__(ptrval) -> func_t: ...
def func_t_analyzed_sp(self) -> bool: ...
def func_t_argsize_get(self) -> asize_t: ...
def func_t_argsize_set(self, argsize) -> Any: ...
def func_t_color_get(self) -> bgcolor_t: ...
def func_t_color_set(self, color) -> Any: ...
def func_t_does_return(self) -> bool: ...
def func_t_flags_get(self) -> uint64: ...
def func_t_flags_set(self, flags) -> Any: ...
def func_t_fpd_get(self) -> asize_t: ...
def func_t_fpd_set(self, fpd) -> Any: ...
def func_t_frame_get(self) -> uval_t: ...
def func_t_frame_set(self, frame) -> Any: ...
def func_t_frregs_get(self) -> ushort: ...
def func_t_frregs_set(self, frregs) -> Any: ...
def func_t_frsize_get(self) -> asize_t: ...
def func_t_frsize_set(self, frsize) -> Any: ...
def func_t_is_far(self) -> bool: ...
def func_t_need_prolog_analysis(self) -> bool: ...
def func_t_owner_get(self) -> ea_t: ...
def func_t_owner_set(self, owner) -> Any: ...
def func_t_pntqty_get(self) -> uint32: ...
def func_t_pntqty_set(self, pntqty) -> Any: ...
def func_t_points_get(*args, **kwargs): ...
def func_t_points_set(self, points) -> Any: ...
def func_t_referers_get(*args, **kwargs): ...
def func_t_referers_set(self, referers) -> Any: ...
def func_t_refqty_get(self) -> int: ...
def func_t_refqty_set(self, refqty) -> Any: ...
def func_t_regargqty_get(self) -> int: ...
def func_t_regargqty_set(self, regargqty) -> Any: ...
def func_t_regargs_get(self) -> regarg_t: ...
def func_t_regargs_set(self, regargs) -> Any: ...
def func_t_regvarqty_get(self) -> int: ...
def func_t_regvarqty_set(self, regvarqty) -> Any: ...
def func_t_regvars_get(*args, **kwargs): ...
def func_t_regvars_set(self, regvars) -> Any: ...
def func_t_swiginit(*args, **kwargs): ...
def func_t_swigregister(*args, **kwargs): ...
def func_t_tailqty_get(self) -> int: ...
def func_t_tailqty_set(self, tailqty) -> Any: ...
def func_t_tails_get(self) -> range_t: ...
def func_t_tails_set(self, tails) -> Any: ...
def func_tail_iterator_set(fti, pfn, ea) -> bool: ...
def func_tail_iterator_set_ea(fti, ea) -> bool: ...
def func_tail_iterator_t___next__(self) -> bool: ...
def func_tail_iterator_t_chunk(self) -> range_t: ...
def func_tail_iterator_t_first(self) -> bool: ...
def func_tail_iterator_t_last(self) -> bool: ...
def func_tail_iterator_t_main(self) -> bool: ...
def func_tail_iterator_t_prev(self) -> bool: ...
def func_tail_iterator_t_set(self, _pfn, ea=...) -> bool: ...
def func_tail_iterator_t_set_ea(self, ea) -> bool: ...
def func_tail_iterator_t_set_range(self, ea1, ea2) -> bool: ...
def func_tail_iterator_t_swiginit(*args, **kwargs): ...
def func_tail_iterator_t_swigregister(*args, **kwargs): ...
def get_current_idasgn() -> int: ...
def get_fchunk(ea) -> func_t: ...
def get_fchunk_num(ea) -> int: ...
def get_fchunk_qty() -> size_t: ...
def get_fchunk_referer(ea, idx) -> ea_t: ...
def get_func(ea) -> func_t: ...
def get_func_bitness(pfn) -> int: ...
def get_func_bits(pfn) -> int: ...
def get_func_bytes(pfn) -> int: ...
def get_func_chunknum(pfn, ea) -> int: ...
def get_func_cmt(pfn, repeatable) -> ssize_t: ...
def get_func_name(ea) -> ssize_t: ...
def get_func_num(ea) -> int: ...
def get_func_qty() -> size_t: ...
def get_func_ranges(ranges, pfn) -> ea_t: ...
def get_idasgn_desc(*args, **kwargs): ...
def get_idasgn_desc_with_matches(*args, **kwargs): ...
def get_idasgn_qty() -> int: ...
def get_idasgn_title(name) -> ssize_t: ...
def get_next_fchunk(ea) -> func_t: ...
def get_next_func(ea) -> func_t: ...
def get_next_func_addr(pfn, ea) -> ea_t: ...
def get_prev_fchunk(ea) -> func_t: ...
def get_prev_func(ea) -> func_t: ...
def get_prev_func_addr(pfn, ea) -> ea_t: ...
def getn_fchunk(n) -> func_t: ...
def getn_func(n) -> func_t: ...
def is_finally_visible_func(pfn) -> bool: ...
def is_func_entry(pfn) -> bool: ...
def is_func_locked(pfn) -> bool: ...
def is_func_tail(pfn) -> bool: ...
def is_same_func(ea1, ea2) -> bool: ...
def is_visible_func(pfn) -> bool: ...
def lock_func_range(pfn, lock) -> Any: ...
def lock_func_swiginit(*args, **kwargs): ...
def lock_func_swigregister(*args, **kwargs): ...
def lock_func_with_tails_t_swiginit(*args, **kwargs): ...
def lock_func_with_tails_t_swigregister(*args, **kwargs): ...
def new_dyn_ea_array(_data, _count) -> dyn_ea_array: ...
def new_dyn_range_array(_data, _count) -> dyn_range_array: ...
def new_dyn_regarg_array(_data, _count) -> dyn_regarg_array: ...
def new_dyn_regvar_array(_data, _count) -> dyn_regvar_array: ...
def new_dyn_stkpnt_array(_data, _count) -> dyn_stkpnt_array: ...
def new_func_item_iterator_t(pfn, _ea=...) -> func_item_iterator_t: ...
def new_func_parent_iterator_t(_fnt) -> func_parent_iterator_t: ...
def new_func_t(start=..., end=..., f=...) -> func_t: ...
def new_func_tail_iterator_t(_pfn, ea=...) -> func_tail_iterator_t: ...
def new_lock_func(_pfn) -> lock_func: ...
def new_lock_func_with_tails_t(pfn) -> lock_func_with_tails_t: ...
def new_regarg_t(r) -> regarg_t: ...
def plan_to_apply_idasgn(fname) -> int: ...
def read_regargs(pfn) -> Any: ...
def reanalyze_function(pfn, ea1=..., ea2=..., analyze_parents=...) -> Any: ...
def reanalyze_noret_flag(ea) -> bool: ...
def regarg_t_name_get(*args, **kwargs): ...
def regarg_t_name_set(self, name) -> Any: ...
def regarg_t_reg_get(self) -> int: ...
def regarg_t_reg_set(self, reg) -> Any: ...
def regarg_t_swap(self, r) -> Any: ...
def regarg_t_swiginit(*args, **kwargs): ...
def regarg_t_swigregister(*args, **kwargs): ...
def regarg_t_type_get(*args, **kwargs): ...
def regarg_t_type_set(self, type) -> Any: ...
def remove_func_tail(pfn, tail_ea) -> bool: ...
def set_func_cmt(pfn, cmt, repeatable) -> bool: ...
def set_func_end(ea, newend) -> bool: ...
def set_func_name_if_jumpfunc(pfn, oldname) -> int: ...
def set_func_start(ea, newstart) -> int: ...
def set_noret_insn(insn_ea, noret) -> bool: ...
def set_tail_owner(fnt, new_owner) -> bool: ...
def set_visible_func(pfn, visible) -> Any: ...
def try_to_add_libfunc(ea) -> int: ...
def update_func(pfn) -> bool: ...
# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"