from typing import Any, overload

SWIG_PYTHON_LEGACY_BOOL: int
cvar: Any
reg_value_def_t_NOVAL: int
reg_value_def_t_SPVAL: int
reg_value_def_t_UVAL: int
reg_value_info_t_ADD: int
reg_value_info_t_AND: int
reg_value_info_t_AND_NOT: int
reg_value_info_t_CONTAINED: int
reg_value_info_t_CONTAINS: int
reg_value_info_t_EQUAL: int
reg_value_info_t_NEG: int
reg_value_info_t_NOT: int
reg_value_info_t_NOT_COMPARABLE: int
reg_value_info_t_OR: int
reg_value_info_t_SLL: int
reg_value_info_t_SLR: int
reg_value_info_t_SUB: int
reg_value_info_t_XOR: int

def delete_reg_value_def_t(self) -> Any: ...
def delete_reg_value_info_t(self) -> Any: ...
def find_nearest_rvi(rvi, ea, reg) -> int: ...
def find_reg_value(ea, reg) -> int: ...
def find_reg_value_info(rvi, ea, reg, max_depth=...) -> bool: ...
def find_sp_value(ea, reg=...) -> int: ...
def invalidate_regfinder_cache(ea=...) -> Any: ...
def new_reg_value_def_t(_val, insn, _flags=...) -> reg_value_def_t: ...
def new_reg_value_info_t(*args, **kwargs): ...
def reg_value_def_t_LIKE_GOT_get(*args, **kwargs): ...
def reg_value_def_t_PC_BASED_get(*args, **kwargs): ...
def reg_value_def_t_SHORT_INSN_get(*args, **kwargs): ...
def reg_value_def_t___eq__(self, r) -> bool: ...
def reg_value_def_t___lt__(self, r) -> bool: ...
def reg_value_def_t_def_ea_get(self) -> ea_t: ...
def reg_value_def_t_def_ea_set(self, def_ea) -> Any: ...
def reg_value_def_t_def_itype_get(self) -> uint16: ...
def reg_value_def_t_def_itype_set(self, def_itype) -> Any: ...
def reg_value_def_t_dstr(self, how, pm=...) -> qstring: ...
def reg_value_def_t_flags_get(self) -> uint16: ...
def reg_value_def_t_flags_set(self, flags) -> Any: ...
def reg_value_def_t_is_like_got(self) -> bool: ...
def reg_value_def_t_is_pc_based(self) -> bool: ...
@overload
def reg_value_def_t_is_short_insn(insn) -> bool: ...
@overload
def reg_value_def_t_is_short_insn() -> bool: ...
def reg_value_def_t_swiginit(*args, **kwargs): ...
def reg_value_def_t_swigregister(*args, **kwargs): ...
def reg_value_def_t_val_get(self) -> uval_t: ...
def reg_value_def_t_val_set(self, val) -> Any: ...
def reg_value_info_t___getitem__(self, i) -> reg_value_def_t: ...
def reg_value_info_t___len__(self) -> size_t: ...
def reg_value_info_t___str__(self) -> qstring: ...
def reg_value_info_t_aborted(self) -> bool: ...
def reg_value_info_t_add(self, r, insn) -> Any: ...
@overload
def reg_value_info_t_add_num(self, r, insn) -> Any: ...
@overload
def reg_value_info_t_add_num(self, r) -> Any: ...
def reg_value_info_t_band(self, r, insn) -> Any: ...
def reg_value_info_t_bandnot(self, r, insn) -> Any: ...
def reg_value_info_t_bnot(self, insn) -> Any: ...
def reg_value_info_t_bor(self, r, insn) -> Any: ...
def reg_value_info_t_bxor(self, r, insn) -> Any: ...
def reg_value_info_t_clear(self) -> Any: ...
def reg_value_info_t_empty(self) -> bool: ...
def reg_value_info_t_extend(self, pm, width, is_signed) -> Any: ...
def reg_value_info_t_get_def_ea(self) -> ea_t: ...
def reg_value_info_t_get_def_itype(self) -> uint16: ...
def reg_value_info_t_get_num(self) -> bool: ...
def reg_value_info_t_get_spd(self) -> bool: ...
def reg_value_info_t_have_all_vals_flag(self, val_flags) -> bool: ...
def reg_value_info_t_is_all_vals_like_got(self) -> bool: ...
def reg_value_info_t_is_all_vals_pc_based(self) -> bool: ...
def reg_value_info_t_is_badinsn(self) -> bool: ...
def reg_value_info_t_is_dead_end(self) -> bool: ...
def reg_value_info_t_is_known(self) -> bool: ...
def reg_value_info_t_is_num(self) -> bool: ...
def reg_value_info_t_is_spd(self) -> bool: ...
def reg_value_info_t_is_special(self) -> bool: ...
def reg_value_info_t_is_unkfunc(self) -> bool: ...
def reg_value_info_t_is_unkinsn(self) -> bool: ...
def reg_value_info_t_is_unkloop(self) -> bool: ...
def reg_value_info_t_is_unkmult(self) -> bool: ...
def reg_value_info_t_is_unknown(self) -> bool: ...
def reg_value_info_t_is_value_unique(self) -> bool: ...
def reg_value_info_t_make_aborted(bblk_ea) -> reg_value_info_t: ...
def reg_value_info_t_make_badinsn(insn_ea) -> reg_value_info_t: ...
def reg_value_info_t_make_dead_end(dead_end_ea) -> reg_value_info_t: ...
def reg_value_info_t_make_initial_sp(func_ea) -> reg_value_info_t: ...
@overload
def reg_value_info_t_make_num(rval, insn, val_flags=...) -> reg_value_info_t: ...
@overload
def reg_value_info_t_make_num(rval, val_ea, val_flags=...) -> reg_value_info_t: ...
def reg_value_info_t_make_unkfunc(func_ea) -> reg_value_info_t: ...
def reg_value_info_t_make_unkinsn(insn) -> reg_value_info_t: ...
def reg_value_info_t_make_unkloop(bblk_ea) -> reg_value_info_t: ...
def reg_value_info_t_make_unkmult(bblk_ea) -> reg_value_info_t: ...
def reg_value_info_t_neg(self, insn) -> Any: ...
def reg_value_info_t_set_aborted(self, bblk_ea) -> Any: ...
def reg_value_info_t_set_badinsn(self, insn_ea) -> Any: ...
def reg_value_info_t_set_dead_end(self, dead_end_ea) -> Any: ...
@overload
def reg_value_info_t_set_num(self, rval, insn, val_flags=...) -> Any: ...
@overload
def reg_value_info_t_set_num(self, rvals, insn) -> Any: ...
@overload
def reg_value_info_t_set_num(self, rval, val_ea, val_flags=...) -> Any: ...
def reg_value_info_t_set_unkfunc(self, func_ea) -> Any: ...
def reg_value_info_t_set_unkinsn(self, insn) -> Any: ...
def reg_value_info_t_set_unkloop(self, bblk_ea) -> Any: ...
def reg_value_info_t_set_unkmult(self, bblk_ea) -> Any: ...
def reg_value_info_t_shift_left(self, r) -> Any: ...
def reg_value_info_t_shift_right(self, r) -> Any: ...
def reg_value_info_t_sll(self, r, insn) -> Any: ...
def reg_value_info_t_slr(self, r, insn) -> Any: ...
def reg_value_info_t_sub(self, r, insn) -> Any: ...
def reg_value_info_t_swiginit(*args, **kwargs): ...
def reg_value_info_t_swigregister(*args, **kwargs): ...
def reg_value_info_t_trunc_uval(self, pm) -> Any: ...
def reg_value_info_t_vals_union(*args, **kwargs): ...
# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"