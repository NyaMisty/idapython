from typing import Any, overload

ACCEPT_ARCHIVE: int
ACCEPT_CONTINUE: int
ACCEPT_FIRST: int
DBFL_BAK: int
DBFL_COMP: int
DBFL_KILL: int
DBFL_TEMP: int
DLLEXT: str
FILEREG_NOTPATCHABLE: int
FILEREG_PATCHABLE: int
GENFLG_ASMINC: int
GENFLG_ASMTYPE: int
GENFLG_GENHTML: int
GENFLG_IDCTYPE: int
GENFLG_MAPDMNG: int
GENFLG_MAPLOC: int
GENFLG_MAPNAME: int
GENFLG_MAPSEG: int
IDP_DLL: str
LDRF_RELOAD: int
LDRF_REQ_PROC: int
LOADER_DLL: str
MAX_DATABASE_DESCRIPTION: int
MODULE_ENTRY_IDP: str
MODULE_ENTRY_LOADER: str
MODULE_ENTRY_PLUGIN: str
NEF_CODE: int
NEF_FILL: int
NEF_FIRST: int
NEF_FLAT: int
NEF_IMPS: int
NEF_LALL: int
NEF_LOPT: int
NEF_MAN: int
NEF_MINI: int
NEF_NAME: int
NEF_RELOAD: int
NEF_RSCS: int
NEF_SEGS: int
OFILE_ASM: int
OFILE_DIF: int
OFILE_EXE: int
OFILE_IDC: int
OFILE_LST: int
OFILE_MAP: int
PATH_TYPE_CMD: int
PATH_TYPE_ID0: int
PATH_TYPE_IDB: int
PLUGIN_DLL: str
SSF_AUTOMATIC: int
SSUF_DESC: int
SSUF_FLAGS: int
SSUF_PATH: int
SWIG_PYTHON_LEGACY_BOOL: int

def base2file(fp, pos, ea1, ea2) -> int: ...
def build_snapshot_tree(root) -> bool: ...
def clr_database_flag(dbfl) -> Any: ...
def delete_idp_desc_t(self) -> Any: ...
def delete_idp_name_t(self) -> Any: ...
def delete_loader_t(self) -> Any: ...
def delete_plugin_info_t(self) -> Any: ...
def delete_qvector_snapshotvec_t(self) -> Any: ...
def delete_snapshot_t(self) -> Any: ...
def extract_module_from_archive(*args, **kwargs): ...
def file2base(li, pos, ea1, ea2, patchable) -> int: ...
def find_plugin(*args, **kwargs): ...
def flush_buffers() -> int: ...
def gen_exe_file(fp) -> int: ...
def gen_file(otype, fp, ea1, ea2, flags) -> int: ...
def get_basic_file_type(li) -> filetype_t: ...
def get_elf_debug_file_directory(*args, **kwargs): ...
def get_file_type_name() -> size_t: ...
def get_fileregion_ea(offset) -> ea_t: ...
def get_fileregion_offset(ea) -> qoff64_t: ...
def get_path(*args, **kwargs): ...
def get_plugin_options(*args, **kwargs): ...
def idp_desc_t_checked_get(self) -> bool: ...
def idp_desc_t_checked_set(self, checked) -> Any: ...
def idp_desc_t_family_get(*args, **kwargs): ...
def idp_desc_t_family_set(self, family) -> Any: ...
def idp_desc_t_is_script_get(self) -> bool: ...
def idp_desc_t_is_script_set(self, is_script) -> Any: ...
def idp_desc_t_mtime_get(self) -> time_t: ...
def idp_desc_t_mtime_set(self, mtime) -> Any: ...
def idp_desc_t_names_get(*args, **kwargs): ...
def idp_desc_t_names_set(self, names) -> Any: ...
def idp_desc_t_path_get(*args, **kwargs): ...
def idp_desc_t_path_set(self, path) -> Any: ...
def idp_desc_t_swiginit(*args, **kwargs): ...
def idp_desc_t_swigregister(*args, **kwargs): ...
def idp_name_t_hidden_get(self) -> bool: ...
def idp_name_t_hidden_set(self, hidden) -> Any: ...
def idp_name_t_lname_get(*args, **kwargs): ...
def idp_name_t_lname_set(self, lname) -> Any: ...
def idp_name_t_sname_get(*args, **kwargs): ...
def idp_name_t_sname_set(self, sname) -> Any: ...
def idp_name_t_swiginit(*args, **kwargs): ...
def idp_name_t_swigregister(*args, **kwargs): ...
def is_database_flag(dbfl) -> bool: ...
def is_trusted_idb() -> bool: ...
def load_and_run_plugin(name, arg) -> bool: ...
def load_binary_file(filename, li, _neflags, fileoff, basepara, binoff, nbytes) -> bool: ...
def load_ids_module(fname) -> int: ...
def load_plugin(*args, **kwargs): ...
def loader_t_flags_get(self) -> uint32: ...
def loader_t_flags_set(self, flags) -> Any: ...
def loader_t_swiginit(*args, **kwargs): ...
def loader_t_swigregister(*args, **kwargs): ...
def loader_t_version_get(self) -> uint32: ...
def loader_t_version_set(self, version) -> Any: ...
def mem2base(py_mem, ea, fpos=...) -> int: ...
def new_idp_desc_t() -> idp_desc_t: ...
def new_idp_name_t() -> idp_name_t: ...
def new_loader_t() -> loader_t: ...
def new_plugin_info_t() -> plugin_info_t: ...
def new_qvector_snapshotvec_t(x) -> qvector_snapshotvec_t: ...
def new_snapshot_t() -> snapshot_t: ...
def plugin_info_t_arg_get(self) -> size_t: ...
def plugin_info_t_arg_set(self, arg) -> Any: ...
def plugin_info_t_comment_get(*args, **kwargs): ...
def plugin_info_t_comment_set(self, comment) -> Any: ...
def plugin_info_t_dllmem_get(*args, **kwargs): ...
def plugin_info_t_dllmem_set(self, dllmem) -> Any: ...
def plugin_info_t_entry_get(*args, **kwargs): ...
def plugin_info_t_entry_set(self, entry) -> Any: ...
def plugin_info_t_flags_get(self) -> int: ...
def plugin_info_t_flags_set(self, flags) -> Any: ...
def plugin_info_t_hotkey_get(self) -> ushort: ...
def plugin_info_t_hotkey_set(self, hotkey) -> Any: ...
def plugin_info_t_name_get(*args, **kwargs): ...
def plugin_info_t_name_set(self, name) -> Any: ...
def plugin_info_t_next_get(self) -> plugin_info_t: ...
def plugin_info_t_next_set(self, next) -> Any: ...
def plugin_info_t_org_hotkey_get(self) -> ushort: ...
def plugin_info_t_org_hotkey_set(self, org_hotkey) -> Any: ...
def plugin_info_t_org_name_get(*args, **kwargs): ...
def plugin_info_t_org_name_set(self, org_name) -> Any: ...
def plugin_info_t_path_get(*args, **kwargs): ...
def plugin_info_t_path_set(self, path) -> Any: ...
def plugin_info_t_swiginit(*args, **kwargs): ...
def plugin_info_t_swigregister(*args, **kwargs): ...
def process_archive(temp_file, li, module_name, neflags, defmember, loader) -> int: ...
def qvector_snapshotvec_t___eq__(self, r) -> bool: ...
def qvector_snapshotvec_t___getitem__(self, i) -> snapshot_t: ...
def qvector_snapshotvec_t___len__(self) -> size_t: ...
def qvector_snapshotvec_t___ne__(self, r) -> bool: ...
def qvector_snapshotvec_t___setitem__(self, i, v) -> Any: ...
def qvector_snapshotvec_t__del(self, x) -> bool: ...
def qvector_snapshotvec_t_add_unique(self, x) -> bool: ...
def qvector_snapshotvec_t_at(self, _idx) -> snapshot_t: ...
def qvector_snapshotvec_t_begin(*args, **kwargs): ...
def qvector_snapshotvec_t_capacity(self) -> size_t: ...
def qvector_snapshotvec_t_clear(self) -> Any: ...
def qvector_snapshotvec_t_empty(self) -> bool: ...
def qvector_snapshotvec_t_end(*args, **kwargs): ...
def qvector_snapshotvec_t_erase(*args, **kwargs): ...
def qvector_snapshotvec_t_extract(*args, **kwargs): ...
def qvector_snapshotvec_t_find(*args, **kwargs): ...
def qvector_snapshotvec_t_has(self, x) -> bool: ...
def qvector_snapshotvec_t_inject(self, s, len) -> Any: ...
def qvector_snapshotvec_t_insert(*args, **kwargs): ...
def qvector_snapshotvec_t_pop_back(self) -> Any: ...
def qvector_snapshotvec_t_push_back(self, x) -> Any: ...
def qvector_snapshotvec_t_qclear(self) -> Any: ...
def qvector_snapshotvec_t_reserve(self, cnt) -> Any: ...
@overload
def qvector_snapshotvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def qvector_snapshotvec_t_resize(self, _newsize) -> Any: ...
def qvector_snapshotvec_t_size(self) -> size_t: ...
def qvector_snapshotvec_t_swap(self, r) -> Any: ...
def qvector_snapshotvec_t_swiginit(*args, **kwargs): ...
def qvector_snapshotvec_t_swigregister(*args, **kwargs): ...
def qvector_snapshotvec_t_truncate(self) -> Any: ...
def reload_file(file, is_remote) -> bool: ...
def run_plugin(plg, arg) -> bool: ...
def save_database(outfile, flags, root=..., attr=...) -> bool: ...
def set_database_flag(dbfl, cnd=...) -> Any: ...
def set_import_name(modnode, ea, name) -> Any: ...
def set_import_ordinal(modnode, ea, ord) -> Any: ...
def set_path(pt, path) -> Any: ...
def snapshot_t___eq__(self, r) -> bool: ...
def snapshot_t___ge__(self, r) -> bool: ...
def snapshot_t___gt__(self, r) -> bool: ...
def snapshot_t___le__(self, r) -> bool: ...
def snapshot_t___lt__(self, r) -> bool: ...
def snapshot_t___ne__(self, r) -> bool: ...
def snapshot_t_children_get(self) -> qvector_snapshotvec_t: ...
def snapshot_t_children_set(self, children) -> Any: ...
def snapshot_t_clear(self) -> Any: ...
def snapshot_t_desc_get(self) -> char[128]: ...
def snapshot_t_desc_set(self, desc) -> Any: ...
def snapshot_t_filename_get(self) -> char[QMAXPATH]: ...
def snapshot_t_filename_set(self, filename) -> Any: ...
def snapshot_t_flags_get(self) -> uint16: ...
def snapshot_t_flags_set(self, flags) -> Any: ...
def snapshot_t_id_get(self) -> qtime64_t: ...
def snapshot_t_id_set(self, id) -> Any: ...
def snapshot_t_swiginit(*args, **kwargs): ...
def snapshot_t_swigregister(*args, **kwargs): ...
# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"