from typing import Any

BADADDR: int
BADADDR32: int
BADADDR64: int
BADSEL: int
HBF_CALL_WITH_NEW_EXEC: int
HBF_VOLATILE_METHOD_SET: int
SIZE_MAX: int
SWIG_PYTHON_LEGACY_BOOL: int

def delete_loader_input_t(self) -> Any: ...
def disable_script_timeout() -> Any: ...
def enable_extlang_python(enable) -> Any: ...
def enable_python_cli(enable) -> Any: ...
def format_basestring(*args, **kwargs): ...
def get_inf_structure() -> idainfo: ...
def loader_input_t___idc_cvt_id___get(self) -> int: ...
def loader_input_t___idc_cvt_id___set(self, __idc_cvt_id__) -> Any: ...
def loader_input_t_close(self) -> Any: ...
def loader_input_t_file2base(self, pos, ea1, ea2, patchable) -> int: ...
def loader_input_t_filename(*args, **kwargs): ...
def loader_input_t_from_capsule(pycapsule) -> loader_input_t: ...
def loader_input_t_from_fp(fp) -> loader_input_t: ...
def loader_input_t_from_linput(linput) -> loader_input_t: ...
def loader_input_t_get_byte(*args, **kwargs): ...
def loader_input_t_get_linput(*args, **kwargs): ...
def loader_input_t_gets(*args, **kwargs): ...
def loader_input_t_getz(*args, **kwargs): ...
def loader_input_t_open(self, filename, remote=...) -> bool: ...
def loader_input_t_open_memory(self, start, size=...) -> bool: ...
def loader_input_t_opened(self) -> bool: ...
def loader_input_t_read(*args, **kwargs): ...
def loader_input_t_readbytes(*args, **kwargs): ...
def loader_input_t_seek(self, pos, whence=...) -> int64: ...
def loader_input_t_set_linput(self, linput) -> Any: ...
def loader_input_t_size(self) -> int64: ...
def loader_input_t_swiginit(*args, **kwargs): ...
def loader_input_t_swigregister(*args, **kwargs): ...
def loader_input_t_tell(self) -> int64: ...
def new_loader_input_t(pycapsule=...) -> loader_input_t: ...
def parse_command_line3(*args, **kwargs): ...
def pycim_get_widget(*args, **kwargs): ...
def pycim_view_close(_self) -> Any: ...
def pygc_create_groups(*args, **kwargs): ...
def pygc_delete_groups(*args, **kwargs): ...
def pygc_refresh(_self) -> Any: ...
def pygc_set_groups_visibility(*args, **kwargs): ...
def set_script_timeout(timeout) -> int: ...
# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"