from typing import Any, overload

AS2_BRACE: int
AS2_BYTE1CHAR: int
AS2_COLONSUF: int
AS2_IDEALDSCR: int
AS2_STRINV: int
AS2_TERSESTR: int
AS2_YWORD: int
AS2_ZWORD: int
ASB_BINF0: int
ASB_BINF1: int
ASB_BINF2: int
ASB_BINF3: int
ASB_BINF4: int
ASB_BINF5: int
ASD_DECF0: int
ASD_DECF1: int
ASD_DECF2: int
ASD_DECF3: int
ASH_HEXF0: int
ASH_HEXF1: int
ASH_HEXF2: int
ASH_HEXF3: int
ASH_HEXF4: int
ASH_HEXF5: int
ASO_OCTF0: int
ASO_OCTF1: int
ASO_OCTF2: int
ASO_OCTF3: int
ASO_OCTF4: int
ASO_OCTF5: int
ASO_OCTF6: int
ASO_OCTF7: int
AS_1TEXT: int
AS_2CHRE: int
AS_ALIGN2: int
AS_ASCIIC: int
AS_ASCIIZ: int
AS_BINFM: int
AS_COLON: int
AS_DECFM: int
AS_HEXFM: int
AS_LALIGN: int
AS_N2CHR: int
AS_NCHRE: int
AS_NCMAS: int
AS_NHIAS: int
AS_NOCODECLN: int
AS_NOSPACE: int
AS_NOXRF: int
AS_OCTFM: int
AS_OFFST: int
AS_ONEDUP: int
AS_RELSUP: int
AS_UDATA: int
AS_UNEQU: int
AS_XTRNTYPE: int
CF_CALL: int
CF_CHG1: int
CF_CHG2: int
CF_CHG3: int
CF_CHG4: int
CF_CHG5: int
CF_CHG6: int
CF_CHG7: int
CF_CHG8: int
CF_HLL: int
CF_JUMP: int
CF_SHFT: int
CF_STOP: int
CF_USE1: int
CF_USE2: int
CF_USE3: int
CF_USE4: int
CF_USE5: int
CF_USE6: int
CF_USE7: int
CF_USE8: int
CUSTOM_INSN_ITYPE: int
HKCB_GLOBAL: int
IDPOPT_BIT_BOOL: int
IDPOPT_BIT_UCHAR: int
IDPOPT_BIT_UINT: int
IDPOPT_BIT_USHORT: int
IDPOPT_CST: int
IDPOPT_CST_PARAMS: int
IDPOPT_I64_RANGE: int
IDPOPT_I64_UNS: int
IDPOPT_JVL: int
IDPOPT_MBROFF: int
IDPOPT_NUM_CHAR: int
IDPOPT_NUM_INT: int
IDPOPT_NUM_RANGE: int
IDPOPT_NUM_SHORT: int
IDPOPT_NUM_UNS: int
IDPOPT_PRI_DEFAULT: int
IDPOPT_PRI_HIGH: int
IDPOPT_STR_LONG: int
IDPOPT_STR_QSTRING: int
IDP_INTERFACE_VERSION: int
LTC_ADDED: int
LTC_ALIASED: int
LTC_COMPILER: int
LTC_DELETED: int
LTC_EDITED: int
LTC_NONE: int
LTC_TIL_COMPACTED: int
LTC_TIL_LOADED: int
LTC_TIL_UNLOADED: int
NO_ACCESS: int
OP_FP_BASED: int
OP_SP_ADD: int
OP_SP_BASED: int
OP_SP_SUB: int
PLFM_386: int
PLFM_6502: int
PLFM_65C816: int
PLFM_6800: int
PLFM_68K: int
PLFM_80196: int
PLFM_8051: int
PLFM_AD2106X: int
PLFM_AD218X: int
PLFM_ALPHA: int
PLFM_ARC: int
PLFM_ARM: int
PLFM_AVR: int
PLFM_C166: int
PLFM_C39: int
PLFM_CR16: int
PLFM_DALVIK: int
PLFM_DSP56K: int
PLFM_DSP96K: int
PLFM_EBC: int
PLFM_F2MC: int
PLFM_FR: int
PLFM_H8: int
PLFM_H8500: int
PLFM_HPPA: int
PLFM_I860: int
PLFM_I960: int
PLFM_IA64: int
PLFM_JAVA: int
PLFM_KR1878: int
PLFM_M16C: int
PLFM_M32R: int
PLFM_M740: int
PLFM_M7700: int
PLFM_M7900: int
PLFM_MC6812: int
PLFM_MC6816: int
PLFM_MIPS: int
PLFM_MN102L00: int
PLFM_MSP430: int
PLFM_NEC_78K0: int
PLFM_NEC_78K0S: int
PLFM_NEC_V850X: int
PLFM_NET: int
PLFM_OAKDSP: int
PLFM_PDP: int
PLFM_PIC: int
PLFM_PIC16: int
PLFM_PPC: int
PLFM_RISCV: int
PLFM_RL78: int
PLFM_RX: int
PLFM_S390: int
PLFM_SCR_ADPT: int
PLFM_SH: int
PLFM_SPARC: int
PLFM_SPC700: int
PLFM_SPU: int
PLFM_ST20: int
PLFM_ST7: int
PLFM_ST9: int
PLFM_TLCS900: int
PLFM_TMS: int
PLFM_TMS320C1X: int
PLFM_TMS320C28: int
PLFM_TMS320C3: int
PLFM_TMS320C54: int
PLFM_TMS320C55: int
PLFM_TMSC6: int
PLFM_TRICORE: int
PLFM_TRIMEDIA: int
PLFM_UNSP: int
PLFM_XTENSA: int
PLFM_Z8: int
PLFM_Z80: int
PR2_CODE16_BIT: int
PR2_FORCE_16BIT: int
PR2_IDP_OPTS: int
PR2_MACRO: int
PR2_MAPPINGS: int
PR2_REALCVT: int
PR2_REL_BITS: int
PR2_USE_CALCREL: int
PRN_BIN: int
PRN_DEC: int
PRN_HEX: int
PRN_OCT: int
PR_ADJSEGS: int
PR_ALIGN: int
PR_ALIGN_INSN: int
PR_ASSEMBLE: int
PR_BINMEM: int
PR_CHK_XREF: int
PR_CNDINSNS: int
PR_DEFNUM: int
PR_DEFSEG32: int
PR_DEFSEG64: int
PR_DELAYED: int
PR_NOCHANGE: int
PR_NO_SEGMOVE: int
PR_OUTER: int
PR_PURGING: int
PR_RNAMESOK: int
PR_SCALE_STKVARS: int
PR_SEGS: int
PR_SEGTRANS: int
PR_SGROTHER: int
PR_STACK_UP: int
PR_TYPEINFO: int
PR_USE32: int
PR_USE64: int
PR_USE_ARG_TYPES: int
PR_USE_TBYTE: int
PR_WORD_INS: int
READ_ACCESS: int
REG_SPOIL: int
RW_ACCESS: int
SETPROC_IDB: int
SETPROC_LOADER: int
SETPROC_LOADER_NON_FATAL: int
SETPROC_USER: int
SWIG_PYTHON_LEGACY_BOOL: int
WRITE_ACCESS: int
_processor_t_ev_add_cref: int
_processor_t_ev_add_dref: int
_processor_t_ev_adjust_argloc: int
_processor_t_ev_adjust_libfunc_ea: int
_processor_t_ev_adjust_refinfo: int
_processor_t_ev_ana_insn: int
_processor_t_ev_analyze_prolog: int
_processor_t_ev_arch_changed: int
_processor_t_ev_arg_addrs_ready: int
_processor_t_ev_asm_installed: int
_processor_t_ev_assemble: int
_processor_t_ev_auto_queue_empty: int
_processor_t_ev_broadcast: int
_processor_t_ev_calc_arglocs: int
_processor_t_ev_calc_cdecl_purged_bytes: int
_processor_t_ev_calc_next_eas: int
_processor_t_ev_calc_purged_bytes: int
_processor_t_ev_calc_retloc: int
_processor_t_ev_calc_spdelta: int
_processor_t_ev_calc_step_over: int
_processor_t_ev_calc_switch_cases: int
_processor_t_ev_calc_varglocs: int
_processor_t_ev_calcrel: int
_processor_t_ev_can_have_type: int
_processor_t_ev_clean_tbit: int
_processor_t_ev_cmp_operands: int
_processor_t_ev_coagulate: int
_processor_t_ev_coagulate_dref: int
_processor_t_ev_create_flat_group: int
_processor_t_ev_create_func_frame: int
_processor_t_ev_create_merge_handlers: int
_processor_t_ev_create_switch_xrefs: int
_processor_t_ev_creating_segm: int
_processor_t_ev_cvt64_hashval: int
_processor_t_ev_cvt64_supval: int
_processor_t_ev_decorate_name: int
_processor_t_ev_del_cref: int
_processor_t_ev_del_dref: int
_processor_t_ev_delay_slot_insn: int
_processor_t_ev_demangle_name: int
_processor_t_ev_emu_insn: int
_processor_t_ev_endbinary: int
_processor_t_ev_ending_undo: int
_processor_t_ev_equal_reglocs: int
_processor_t_ev_extract_address: int
_processor_t_ev_find_op_value: int
_processor_t_ev_find_reg_value: int
_processor_t_ev_func_bounds: int
_processor_t_ev_gen_asm_or_lst: int
_processor_t_ev_gen_map_file: int
_processor_t_ev_gen_regvar_def: int
_processor_t_ev_gen_src_file_lnnum: int
_processor_t_ev_gen_stkvar_def: int
_processor_t_ev_get_abi_info: int
_processor_t_ev_get_autocmt: int
_processor_t_ev_get_bg_color: int
_processor_t_ev_get_cc_regs: int
_processor_t_ev_get_code16_mode: int
_processor_t_ev_get_dbr_opnum: int
_processor_t_ev_get_default_enum_size: int
_processor_t_ev_get_frame_retsize: int
_processor_t_ev_get_idd_opinfo: int
_processor_t_ev_get_macro_insn_head: int
_processor_t_ev_get_operand_string: int
_processor_t_ev_get_procmod: int
_processor_t_ev_get_reg_accesses: int
_processor_t_ev_get_reg_info: int
_processor_t_ev_get_reg_name: int
_processor_t_ev_get_regfinder: int
_processor_t_ev_get_simd_types: int
_processor_t_ev_get_stkarg_area_info: int
_processor_t_ev_get_stkvar_scale_factor: int
_processor_t_ev_getreg: int
_processor_t_ev_init: int
_processor_t_ev_insn_reads_tbit: int
_processor_t_ev_is_align_insn: int
_processor_t_ev_is_alloca_probe: int
_processor_t_ev_is_basic_block_end: int
_processor_t_ev_is_call_insn: int
_processor_t_ev_is_cond_insn: int
_processor_t_ev_is_control_flow_guard: int
_processor_t_ev_is_far_jump: int
_processor_t_ev_is_indirect_jump: int
_processor_t_ev_is_insn_table_jump: int
_processor_t_ev_is_jump_func: int
_processor_t_ev_is_ret_insn: int
_processor_t_ev_is_sane_insn: int
_processor_t_ev_is_sp_based: int
_processor_t_ev_is_switch: int
_processor_t_ev_last_cb_before_debugger: int
_processor_t_ev_last_cb_before_loader: int
_processor_t_ev_last_cb_before_type_callbacks: int
_processor_t_ev_loader: int
_processor_t_ev_loader_elf_machine: int
_processor_t_ev_lower_func_type: int
_processor_t_ev_max_ptr_size: int
_processor_t_ev_may_be_func: int
_processor_t_ev_may_show_sreg: int
_processor_t_ev_moving_segm: int
_processor_t_ev_newasm: int
_processor_t_ev_newbinary: int
_processor_t_ev_newfile: int
_processor_t_ev_newprc: int
_processor_t_ev_next_exec_insn: int
_processor_t_ev_obsolete1: int
_processor_t_ev_obsolete2: int
_processor_t_ev_oldfile: int
_processor_t_ev_out_assumes: int
_processor_t_ev_out_data: int
_processor_t_ev_out_footer: int
_processor_t_ev_out_header: int
_processor_t_ev_out_insn: int
_processor_t_ev_out_label: int
_processor_t_ev_out_mnem: int
_processor_t_ev_out_operand: int
_processor_t_ev_out_segend: int
_processor_t_ev_out_segstart: int
_processor_t_ev_out_special_item: int
_processor_t_ev_privrange_changed: int
_processor_t_ev_realcvt: int
_processor_t_ev_rename: int
_processor_t_ev_replaying_undo: int
_processor_t_ev_set_code16_mode: int
_processor_t_ev_set_idp_options: int
_processor_t_ev_set_proc_options: int
_processor_t_ev_setup_til: int
_processor_t_ev_str2reg: int
_processor_t_ev_term: int
_processor_t_ev_treat_hindering_item: int
_processor_t_ev_undefine: int
_processor_t_ev_update_call_stack: int
_processor_t_ev_use_arg_types: int
_processor_t_ev_use_regarg_type: int
_processor_t_ev_use_stkarg_type: int
_processor_t_ev_validate_flirt_func: int
_processor_t_ev_verify_noreturn: int
_processor_t_ev_verify_sp: int
adding_segm: int
allsegs_moved: int
auto_empty: int
auto_empty_finally: int
bookmark_changed: int
byte_patched: int
callee_addr_changed: int
changing_cmt: int
changing_enum_bf: int
changing_enum_cmt: int
changing_op_ti: int
changing_op_type: int
changing_range_cmt: int
changing_segm_class: int
changing_segm_end: int
changing_segm_name: int
changing_segm_start: int
changing_struc_align: int
changing_struc_cmt: int
changing_struc_member: int
changing_ti: int
cik_filename: int
cik_path: int
cik_string: int
closebase: int
cmt_changed: int
compiler_changed: int
deleting_enum: int
deleting_enum_member: int
deleting_func: int
deleting_func_tail: int
deleting_segm: int
deleting_struc: int
deleting_struc_member: int
deleting_tryblks: int
destroyed_items: int
determined_main: int
dirtree_link: int
dirtree_mkdir: int
dirtree_move: int
dirtree_rank: int
dirtree_rmdir: int
dirtree_rminode: int
dirtree_segm_moved: int
enum_bf_changed: int
enum_cmt_changed: int
enum_created: int
enum_deleted: int
enum_flag_changed: int
enum_member_created: int
enum_member_deleted: int
enum_ordinal_changed: int
enum_renamed: int
enum_width_changed: int
expanding_struc: int
extlang_changed: int
extra_cmt_changed: int
flow_chart_created: int
frame_deleted: int
func_added: int
func_deleted: int
func_noret_changed: int
func_tail_appended: int
func_tail_deleted: int
func_updated: int
idasgn_loaded: int
item_color_changed: int
kernel_config_loaded: int
loader_finished: int
local_types_changed: int
make_code: int
make_data: int
op_ti_changed: int
op_type_changed: int
range_cmt_changed: int
renamed: int
renaming_enum: int
renaming_struc: int
renaming_struc_member: int
savebase: int
segm_added: int
segm_attrs_updated: int
segm_class_changed: int
segm_deleted: int
segm_end_changed: int
segm_moved: int
segm_name_changed: int
segm_start_changed: int
set_func_end: int
set_func_start: int
sgr_changed: int
sgr_deleted: int
stkpnts_changed: int
struc_align_changed: int
struc_cmt_changed: int
struc_created: int
struc_deleted: int
struc_expanded: int
struc_member_changed: int
struc_member_created: int
struc_member_deleted: int
struc_member_renamed: int
struc_renamed: int
tail_owner_changed: int
thunk_func_created: int
ti_changed: int
tryblks_updated: int
updating_tryblks: int
upgraded: int

def AssembleLine(*args, **kwargs): ...
def IDB_Hooks_adding_segm(self, s) -> Any: ...
def IDB_Hooks_allsegs_moved(self, info) -> Any: ...
def IDB_Hooks_auto_empty(self) -> Any: ...
def IDB_Hooks_auto_empty_finally(self) -> Any: ...
def IDB_Hooks_bookmark_changed(self, index, pos, desc, operation) -> Any: ...
def IDB_Hooks_byte_patched(self, ea, old_value) -> Any: ...
def IDB_Hooks_callee_addr_changed(self, ea, callee) -> Any: ...
def IDB_Hooks_changing_cmt(self, ea, repeatable_cmt, newcmt) -> Any: ...
def IDB_Hooks_changing_enum_bf(self, id, new_bf) -> Any: ...
def IDB_Hooks_changing_enum_cmt(self, id, repeatable, newcmt) -> Any: ...
def IDB_Hooks_changing_op_ti(self, ea, n, new_type, new_fnames) -> Any: ...
def IDB_Hooks_changing_op_type(self, ea, n, opinfo) -> Any: ...
def IDB_Hooks_changing_range_cmt(self, kind, a, cmt, repeatable) -> Any: ...
def IDB_Hooks_changing_segm_class(self, s) -> Any: ...
def IDB_Hooks_changing_segm_end(self, s, new_end, segmod_flags) -> Any: ...
def IDB_Hooks_changing_segm_name(self, s, oldname) -> Any: ...
def IDB_Hooks_changing_segm_start(self, s, new_start, segmod_flags) -> Any: ...
def IDB_Hooks_changing_struc_align(self, sptr) -> Any: ...
def IDB_Hooks_changing_struc_cmt(self, struc_id, repeatable, newcmt) -> Any: ...
def IDB_Hooks_changing_struc_member(self, sptr, mptr, flag, ti, nbytes) -> Any: ...
def IDB_Hooks_changing_ti(self, ea, new_type, new_fnames) -> Any: ...
def IDB_Hooks_closebase(self) -> Any: ...
def IDB_Hooks_cmt_changed(self, ea, repeatable_cmt) -> Any: ...
def IDB_Hooks_compiler_changed(self, adjust_inf_fields) -> Any: ...
def IDB_Hooks_deleting_enum(self, id) -> Any: ...
def IDB_Hooks_deleting_enum_member(self, id, cid) -> Any: ...
def IDB_Hooks_deleting_func(self, pfn) -> Any: ...
def IDB_Hooks_deleting_func_tail(self, pfn, tail) -> Any: ...
def IDB_Hooks_deleting_segm(self, start_ea) -> Any: ...
def IDB_Hooks_deleting_struc(self, sptr) -> Any: ...
def IDB_Hooks_deleting_struc_member(self, sptr, mptr) -> Any: ...
def IDB_Hooks_deleting_tryblks(self, range) -> Any: ...
def IDB_Hooks_destroyed_items(self, ea1, ea2, will_disable_range) -> Any: ...
def IDB_Hooks_determined_main(self, main) -> Any: ...
def IDB_Hooks_dirtree_link(self, dt, path, link) -> Any: ...
def IDB_Hooks_dirtree_mkdir(self, dt, path) -> Any: ...
def IDB_Hooks_dirtree_move(self, dt, _from, to) -> Any: ...
def IDB_Hooks_dirtree_rank(self, dt, path, rank) -> Any: ...
def IDB_Hooks_dirtree_rmdir(self, dt, path) -> Any: ...
def IDB_Hooks_dirtree_rminode(self, dt, inode) -> Any: ...
def IDB_Hooks_dirtree_segm_moved(self, dt) -> Any: ...
def IDB_Hooks_enum_bf_changed(self, id) -> Any: ...
def IDB_Hooks_enum_cmt_changed(self, id, repeatable) -> Any: ...
def IDB_Hooks_enum_created(self, id) -> Any: ...
def IDB_Hooks_enum_deleted(self, id) -> Any: ...
def IDB_Hooks_enum_flag_changed(self, id, F) -> Any: ...
def IDB_Hooks_enum_member_created(self, id, cid) -> Any: ...
def IDB_Hooks_enum_member_deleted(self, id, cid) -> Any: ...
def IDB_Hooks_enum_ordinal_changed(self, id, ord) -> Any: ...
def IDB_Hooks_enum_renamed(self, id) -> Any: ...
def IDB_Hooks_enum_width_changed(self, id, width) -> Any: ...
def IDB_Hooks_expanding_struc(self, sptr, offset, delta) -> Any: ...
def IDB_Hooks_extlang_changed(self, kind, el, idx) -> Any: ...
def IDB_Hooks_extra_cmt_changed(self, ea, line_idx, cmt) -> Any: ...
def IDB_Hooks_flow_chart_created(self, fc) -> Any: ...
def IDB_Hooks_frame_deleted(self, pfn) -> Any: ...
def IDB_Hooks_func_added(self, pfn) -> Any: ...
def IDB_Hooks_func_deleted(self, func_ea) -> Any: ...
def IDB_Hooks_func_noret_changed(self, pfn) -> Any: ...
def IDB_Hooks_func_tail_appended(self, pfn, tail) -> Any: ...
def IDB_Hooks_func_tail_deleted(self, pfn, tail_ea) -> Any: ...
def IDB_Hooks_func_updated(self, pfn) -> Any: ...
def IDB_Hooks_hook(self) -> bool: ...
def IDB_Hooks_idasgn_loaded(self, short_sig_name) -> Any: ...
def IDB_Hooks_item_color_changed(self, ea, color) -> Any: ...
def IDB_Hooks_kernel_config_loaded(self, pass_number) -> Any: ...
def IDB_Hooks_loader_finished(self, li, neflags, filetypename) -> Any: ...
def IDB_Hooks_local_types_changed(self, ltc, ordinal, name) -> Any: ...
def IDB_Hooks_make_code(self, insn) -> Any: ...
def IDB_Hooks_make_data(self, ea, flags, tid, len) -> Any: ...
def IDB_Hooks_op_ti_changed(self, ea, n, type, fnames) -> Any: ...
def IDB_Hooks_op_type_changed(self, ea, n) -> Any: ...
def IDB_Hooks_range_cmt_changed(self, kind, a, cmt, repeatable) -> Any: ...
def IDB_Hooks_renamed(self, ea, new_name, local_name, old_name) -> Any: ...
def IDB_Hooks_renaming_enum(self, id, is_enum, newname) -> Any: ...
def IDB_Hooks_renaming_struc(self, id, oldname, newname) -> Any: ...
def IDB_Hooks_renaming_struc_member(self, sptr, mptr, newname) -> Any: ...
def IDB_Hooks_savebase(self) -> Any: ...
def IDB_Hooks_segm_added(self, s) -> Any: ...
def IDB_Hooks_segm_attrs_updated(self, s) -> Any: ...
def IDB_Hooks_segm_class_changed(self, s, sclass) -> Any: ...
def IDB_Hooks_segm_deleted(self, start_ea, end_ea, flags) -> Any: ...
def IDB_Hooks_segm_end_changed(self, s, oldend) -> Any: ...
def IDB_Hooks_segm_moved(self, _from, to, size, changed_netmap) -> Any: ...
def IDB_Hooks_segm_name_changed(self, s, name) -> Any: ...
def IDB_Hooks_segm_start_changed(self, s, oldstart) -> Any: ...
def IDB_Hooks_set_func_end(self, pfn, new_end) -> Any: ...
def IDB_Hooks_set_func_start(self, pfn, new_start) -> Any: ...
def IDB_Hooks_sgr_changed(self, start_ea, end_ea, regnum, value, old_value, tag) -> Any: ...
def IDB_Hooks_sgr_deleted(self, start_ea, end_ea, regnum) -> Any: ...
def IDB_Hooks_stkpnts_changed(self, pfn) -> Any: ...
def IDB_Hooks_struc_align_changed(self, sptr) -> Any: ...
def IDB_Hooks_struc_cmt_changed(self, struc_id, repeatable_cmt) -> Any: ...
def IDB_Hooks_struc_created(self, struc_id) -> Any: ...
def IDB_Hooks_struc_deleted(self, struc_id) -> Any: ...
def IDB_Hooks_struc_expanded(self, sptr) -> Any: ...
def IDB_Hooks_struc_member_changed(self, sptr, mptr) -> Any: ...
def IDB_Hooks_struc_member_created(self, sptr, mptr) -> Any: ...
def IDB_Hooks_struc_member_deleted(self, sptr, member_id, offset) -> Any: ...
def IDB_Hooks_struc_member_renamed(self, sptr, mptr) -> Any: ...
def IDB_Hooks_struc_renamed(self, sptr, success) -> Any: ...
def IDB_Hooks_swiginit(*args, **kwargs): ...
def IDB_Hooks_swigregister(*args, **kwargs): ...
def IDB_Hooks_tail_owner_changed(self, tail, owner_func, old_owner) -> Any: ...
def IDB_Hooks_thunk_func_created(self, pfn) -> Any: ...
def IDB_Hooks_ti_changed(self, ea, type, fnames) -> Any: ...
def IDB_Hooks_tryblks_updated(self, tbv) -> Any: ...
def IDB_Hooks_unhook(self) -> bool: ...
def IDB_Hooks_updating_tryblks(self, tbv) -> Any: ...
def IDB_Hooks_upgraded(self, _from) -> Any: ...
def IDP_Hooks_ev_add_cref(self, _from, to, type) -> int: ...
def IDP_Hooks_ev_add_dref(self, _from, to, type) -> int: ...
def IDP_Hooks_ev_adjust_argloc(self, argloc, optional_type, size) -> int: ...
def IDP_Hooks_ev_adjust_libfunc_ea(self, sig, libfun, ea) -> int: ...
def IDP_Hooks_ev_adjust_refinfo(self, ri, ea, n, fd) -> int: ...
def IDP_Hooks_ev_ana_insn(self, out) -> bool: ...
def IDP_Hooks_ev_analyze_prolog(self, ea) -> int: ...
def IDP_Hooks_ev_arch_changed(self) -> int: ...
def IDP_Hooks_ev_arg_addrs_ready(self, caller, n, tif, addrs) -> int: ...
def IDP_Hooks_ev_asm_installed(self, asmnum) -> int: ...
def IDP_Hooks_ev_assemble(*args, **kwargs): ...
def IDP_Hooks_ev_auto_queue_empty(self, type) -> int: ...
def IDP_Hooks_ev_calc_arglocs(self, fti) -> int: ...
def IDP_Hooks_ev_calc_cdecl_purged_bytes(self, ea) -> int: ...
def IDP_Hooks_ev_calc_next_eas(self, res, insn, over) -> int: ...
def IDP_Hooks_ev_calc_purged_bytes(self, p_purged_bytes, fti) -> int: ...
def IDP_Hooks_ev_calc_retloc(self, retloc, rettype, cc) -> int: ...
def IDP_Hooks_ev_calc_spdelta(self, spdelta, insn) -> int: ...
def IDP_Hooks_ev_calc_step_over(self, target, ip) -> int: ...
def IDP_Hooks_ev_calc_switch_cases(self, casevec, targets, insn_ea, si) -> int: ...
def IDP_Hooks_ev_calc_varglocs(self, ftd, aux_regs, aux_stkargs, nfixed) -> int: ...
def IDP_Hooks_ev_calcrel(self) -> int: ...
def IDP_Hooks_ev_can_have_type(self, op) -> int: ...
def IDP_Hooks_ev_clean_tbit(self, ea, getreg, regvalues) -> int: ...
def IDP_Hooks_ev_cmp_operands(self, op1, op2) -> int: ...
def IDP_Hooks_ev_coagulate(self, start_ea) -> int: ...
def IDP_Hooks_ev_coagulate_dref(self, _from, to, may_define, code_ea) -> int: ...
def IDP_Hooks_ev_create_flat_group(self, image_base, bitness, dataseg_sel) -> int: ...
def IDP_Hooks_ev_create_func_frame(self, pfn) -> int: ...
def IDP_Hooks_ev_create_merge_handlers(self, md) -> int: ...
def IDP_Hooks_ev_create_switch_xrefs(self, jumpea, si) -> int: ...
def IDP_Hooks_ev_creating_segm(self, seg) -> int: ...
def IDP_Hooks_ev_cvt64_hashval(self, node, tag, name, data) -> int: ...
def IDP_Hooks_ev_cvt64_supval(self, node, tag, idx, data) -> int: ...
def IDP_Hooks_ev_decorate_name(*args, **kwargs): ...
def IDP_Hooks_ev_del_cref(self, _from, to, expand) -> int: ...
def IDP_Hooks_ev_del_dref(self, _from, to) -> int: ...
def IDP_Hooks_ev_delay_slot_insn(*args, **kwargs): ...
def IDP_Hooks_ev_demangle_name(*args, **kwargs): ...
def IDP_Hooks_ev_emu_insn(self, insn) -> bool: ...
def IDP_Hooks_ev_endbinary(self, ok) -> int: ...
def IDP_Hooks_ev_ending_undo(self, action_name, is_undo) -> int: ...
def IDP_Hooks_ev_equal_reglocs(self, a1, a2) -> int: ...
def IDP_Hooks_ev_extract_address(self, out_ea, screen_ea, string, position) -> int: ...
def IDP_Hooks_ev_find_op_value(*args, **kwargs): ...
def IDP_Hooks_ev_find_reg_value(*args, **kwargs): ...
def IDP_Hooks_ev_func_bounds(self, possible_return_code, pfn, max_func_end_ea) -> int: ...
def IDP_Hooks_ev_gen_asm_or_lst(self, starting, fp, is_asm, flags, outline) -> int: ...
def IDP_Hooks_ev_gen_map_file(self, nlines, fp) -> int: ...
def IDP_Hooks_ev_gen_regvar_def(self, outctx, v) -> int: ...
def IDP_Hooks_ev_gen_src_file_lnnum(self, outctx, file, lnnum) -> int: ...
def IDP_Hooks_ev_gen_stkvar_def(self, outctx, mptr, v) -> int: ...
def IDP_Hooks_ev_get_abi_info(self, abi_names, abi_opts, comp) -> int: ...
def IDP_Hooks_ev_get_autocmt(*args, **kwargs): ...
def IDP_Hooks_ev_get_bg_color(self, color, ea) -> int: ...
def IDP_Hooks_ev_get_cc_regs(self, regs, cc) -> int: ...
def IDP_Hooks_ev_get_code16_mode(self, ea) -> int: ...
def IDP_Hooks_ev_get_dbr_opnum(self, opnum, insn) -> int: ...
def IDP_Hooks_ev_get_default_enum_size(self) -> int: ...
def IDP_Hooks_ev_get_frame_retsize(self, frsize, pfn) -> int: ...
def IDP_Hooks_ev_get_macro_insn_head(self, head, ip) -> int: ...
def IDP_Hooks_ev_get_operand_string(*args, **kwargs): ...
def IDP_Hooks_ev_get_procmod(self) -> int: ...
def IDP_Hooks_ev_get_reg_accesses(self, accvec, insn, flags) -> int: ...
def IDP_Hooks_ev_get_reg_info(self, main_regname, bitrange, regname) -> int: ...
def IDP_Hooks_ev_get_reg_name(*args, **kwargs): ...
def IDP_Hooks_ev_get_simd_types(self, out, simd_attrs, argloc, create_tifs) -> int: ...
def IDP_Hooks_ev_get_stkarg_area_info(self, out, cc) -> int: ...
def IDP_Hooks_ev_get_stkvar_scale_factor(self) -> int: ...
def IDP_Hooks_ev_getreg(self, regval, regnum) -> int: ...
def IDP_Hooks_ev_init(self, idp_modname) -> int: ...
def IDP_Hooks_ev_insn_reads_tbit(self, insn, getreg, regvalues) -> int: ...
def IDP_Hooks_ev_is_align_insn(self, ea) -> int: ...
def IDP_Hooks_ev_is_alloca_probe(self, ea) -> int: ...
def IDP_Hooks_ev_is_basic_block_end(self, insn, call_insn_stops_block) -> int: ...
def IDP_Hooks_ev_is_call_insn(self, insn) -> int: ...
def IDP_Hooks_ev_is_cond_insn(self, insn) -> int: ...
def IDP_Hooks_ev_is_control_flow_guard(self, p_reg, insn) -> int: ...
def IDP_Hooks_ev_is_far_jump(self, icode) -> int: ...
def IDP_Hooks_ev_is_indirect_jump(self, insn) -> int: ...
def IDP_Hooks_ev_is_insn_table_jump(self) -> int: ...
def IDP_Hooks_ev_is_jump_func(self, pfn, jump_target, func_pointer) -> int: ...
def IDP_Hooks_ev_is_ret_insn(self, insn, strict) -> int: ...
def IDP_Hooks_ev_is_sane_insn(self, insn, no_crefs) -> int: ...
def IDP_Hooks_ev_is_sp_based(self, mode, insn, op) -> int: ...
def IDP_Hooks_ev_is_switch(self, si, insn) -> int: ...
def IDP_Hooks_ev_last_cb_before_loader(self) -> int: ...
def IDP_Hooks_ev_loader(self) -> int: ...
def IDP_Hooks_ev_lower_func_type(self, argnums, fti) -> int: ...
def IDP_Hooks_ev_max_ptr_size(self) -> int: ...
def IDP_Hooks_ev_may_be_func(self, insn, state) -> int: ...
def IDP_Hooks_ev_may_show_sreg(self, current_ea) -> int: ...
def IDP_Hooks_ev_moving_segm(self, seg, to, flags) -> int: ...
def IDP_Hooks_ev_newasm(self, asmnum) -> int: ...
def IDP_Hooks_ev_newbinary(self, filename, fileoff, basepara, binoff, nbytes) -> int: ...
def IDP_Hooks_ev_newfile(self, fname) -> int: ...
def IDP_Hooks_ev_newprc(self, pnum, keep_cfg) -> int: ...
def IDP_Hooks_ev_next_exec_insn(self, target, ea, tid, getreg, regvalues) -> int: ...
def IDP_Hooks_ev_oldfile(self, fname) -> int: ...
def IDP_Hooks_ev_out_assumes(self, outctx) -> int: ...
def IDP_Hooks_ev_out_data(self, outctx, analyze_only) -> int: ...
def IDP_Hooks_ev_out_footer(self, outctx) -> int: ...
def IDP_Hooks_ev_out_header(self, outctx) -> int: ...
def IDP_Hooks_ev_out_insn(self, outctx) -> bool: ...
def IDP_Hooks_ev_out_label(self, outctx, colored_name) -> int: ...
def IDP_Hooks_ev_out_mnem(self, outctx) -> int: ...
def IDP_Hooks_ev_out_operand(self, outctx, op) -> bool: ...
def IDP_Hooks_ev_out_segend(self, outctx, seg) -> int: ...
def IDP_Hooks_ev_out_segstart(self, outctx, seg) -> int: ...
def IDP_Hooks_ev_out_special_item(self, outctx, segtype) -> int: ...
def IDP_Hooks_ev_privrange_changed(self, old_privrange, delta) -> int: ...
def IDP_Hooks_ev_realcvt(self, m, e, swt) -> int: ...
def IDP_Hooks_ev_rename(self, ea, new_name) -> int: ...
def IDP_Hooks_ev_replaying_undo(self, action_name, vec, is_undo) -> int: ...
def IDP_Hooks_ev_set_code16_mode(self, ea, code16) -> int: ...
def IDP_Hooks_ev_set_idp_options(self, keyword, value_type, value, idb_loaded) -> int: ...
def IDP_Hooks_ev_set_proc_options(self, options, confidence) -> int: ...
def IDP_Hooks_ev_setup_til(self) -> int: ...
def IDP_Hooks_ev_str2reg(self, regname) -> int: ...
def IDP_Hooks_ev_term(self) -> int: ...
def IDP_Hooks_ev_treat_hindering_item(self, hindering_item_ea, new_item_flags, new_item_ea, new_item_length) -> int: ...
def IDP_Hooks_ev_undefine(self, ea) -> int: ...
def IDP_Hooks_ev_update_call_stack(self, stack, tid, getreg, regvalues) -> int: ...
def IDP_Hooks_ev_use_arg_types(self, ea, fti, rargs) -> int: ...
def IDP_Hooks_ev_use_regarg_type(*args, **kwargs): ...
def IDP_Hooks_ev_use_stkarg_type(self, ea, arg) -> int: ...
def IDP_Hooks_ev_validate_flirt_func(self, start_ea, funcname) -> int: ...
def IDP_Hooks_ev_verify_noreturn(self, pfn) -> int: ...
def IDP_Hooks_ev_verify_sp(self, pfn) -> int: ...
def IDP_Hooks_hook(self) -> bool: ...
def IDP_Hooks_swiginit(*args, **kwargs): ...
def IDP_Hooks_swigregister(*args, **kwargs): ...
def IDP_Hooks_unhook(self) -> bool: ...
def _processor_t_add_cref(_from, to, type) -> ssize_t: ...
def _processor_t_add_dref(_from, to, type) -> ssize_t: ...
def _processor_t_adjust_argloc(argloc, type, size) -> ssize_t: ...
def _processor_t_adjust_libfunc_ea(sig, libfun, ea) -> ssize_t: ...
def _processor_t_adjust_refinfo(ri, ea, n, fd) -> ssize_t: ...
def _processor_t_ana_insn(out) -> ssize_t: ...
def _processor_t_analyze_prolog(fct_ea) -> ssize_t: ...
def _processor_t_arch_changed() -> ssize_t: ...
def _processor_t_arg_addrs_ready(caller, n, tif, addrs) -> ssize_t: ...
def _processor_t_asm_installed(asmnum) -> ssize_t: ...
def _processor_t_assemble(_bin, ea, cs, ip, _use32, line) -> ssize_t: ...
def _processor_t_auto_queue_empty(type) -> Any: ...
def _processor_t_calc_arglocs(fti) -> ssize_t: ...
def _processor_t_calc_cdecl_purged_bytes(ea) -> ssize_t: ...
def _processor_t_calc_next_eas(res, insn, over) -> ssize_t: ...
def _processor_t_calc_purged_bytes(p_purged_bytes, fti) -> ssize_t: ...
def _processor_t_calc_retloc(retloc, rettype, cc) -> ssize_t: ...
def _processor_t_calc_spdelta(spdelta, ins) -> ssize_t: ...
def _processor_t_calc_step_over(target, ip) -> ssize_t: ...
def _processor_t_calc_switch_cases(casevec, targets, insn_ea, si) -> ssize_t: ...
def _processor_t_calc_varglocs(ftd, regs, stkargs, nfixed) -> ssize_t: ...
def _processor_t_calcrel(ea) -> ssize_t: ...
def _processor_t_calcrel_in_bits(self) -> bool: ...
def _processor_t_can_have_type(op) -> ssize_t: ...
def _processor_t_cbsize(self) -> int: ...
def _processor_t_clean_tbit(ea, _getreg, regvalues) -> ssize_t: ...
def _processor_t_cmp_operands(op1, op2) -> ssize_t: ...
def _processor_t_coagulate(start_ea) -> ssize_t: ...
def _processor_t_coagulate_dref(_from, to, may_define, code_ea) -> ssize_t: ...
def _processor_t_create_flat_group(image_base, bitness, dataseg_sel) -> ssize_t: ...
def _processor_t_create_func_frame(pfn) -> ssize_t: ...
def _processor_t_create_merge_handlers(md) -> ssize_t: ...
def _processor_t_create_switch_xrefs(jumpea, si) -> ssize_t: ...
def _processor_t_creating_segm(seg) -> ssize_t: ...
def _processor_t_cvt64_hashval(self, node, tag, name, data) -> ssize_t: ...
def _processor_t_cvt64_supval(self, node, tag, idx, data) -> ssize_t: ...
def _processor_t_dbsize(self) -> int: ...
def _processor_t_decorate_name(outbuf, name, mangle, cc, type) -> ssize_t: ...
def _processor_t_del_cref(_from, to, expand) -> ssize_t: ...
def _processor_t_del_dref(_from, to) -> ssize_t: ...
def _processor_t_delay_slot_insn(self, ea, bexec, fexec) -> bool: ...
def _processor_t_demangle_name(res, name, disable_mask, demreq) -> ssize_t: ...
def _processor_t_emu_insn(insn) -> ssize_t: ...
def _processor_t_endbinary(ok) -> ssize_t: ...
def _processor_t_equal_reglocs(a1, a2) -> ssize_t: ...
def _processor_t_extract_address(out_ea, screen_ea, string, x) -> ssize_t: ...
def _processor_t_find_op_value(insn, op) -> ssize_t: ...
def _processor_t_find_reg_value(insn, reg) -> ssize_t: ...
def _processor_t_func_bounds(possible_return_code, pfn, max_func_end_ea) -> ssize_t: ...
def _processor_t_gen_asm_or_lst(starting, fp, is_asm, flags, outline) -> ssize_t: ...
def _processor_t_gen_map_file(nlines, fp) -> ssize_t: ...
def _processor_t_gen_regvar_def(ctx, v) -> ssize_t: ...
def _processor_t_gen_src_file_lnnum(ctx, file, lnnum) -> ssize_t: ...
def _processor_t_gen_stkvar_def(ctx, mptr, v) -> ssize_t: ...
def _processor_t_get_abi_info(abi_names, abi_opts, comp) -> ssize_t: ...
def _processor_t_get_autocmt(insn) -> ssize_t: ...
def _processor_t_get_bg_color(color, ea) -> ssize_t: ...
def _processor_t_get_canon_feature(self, itype) -> uint32: ...
def _processor_t_get_canon_mnem(*args, **kwargs): ...
def _processor_t_get_cc_regs(regs, cc) -> ssize_t: ...
def _processor_t_get_code16_mode(ea) -> bool: ...
def _processor_t_get_dbr_opnum(opnum, insn) -> ssize_t: ...
def _processor_t_get_default_segm_bitness(self, is_64bit_app) -> int: ...
def _processor_t_get_frame_retsize(retsize, pfn) -> ssize_t: ...
def _processor_t_get_idd_opinfo(opinf, ea, n, thread_id, _getreg, regvalues) -> ssize_t: ...
def _processor_t_get_macro_insn_head(head, ip) -> ssize_t: ...
def _processor_t_get_operand_string(insn, opnum) -> ssize_t: ...
def _processor_t_get_proc_index(self) -> int: ...
def _processor_t_get_reg_accesses(accvec, insn, flags) -> ssize_t: ...
def _processor_t_get_reg_info(*args, **kwargs): ...
def _processor_t_get_reg_name(reg, width, reghi) -> ssize_t: ...
def _processor_t_get_simd_types(out, simd_attrs, argloc, create_tifs) -> ssize_t: ...
def _processor_t_get_stkarg_area_info(out, cc) -> ssize_t: ...
def _processor_t_get_stkvar_scale(self) -> int: ...
def _processor_t_get_stkvar_scale_factor() -> ssize_t: ...
def _processor_t_getreg(rv, regnum) -> ssize_t: ...
def _processor_t_has_code16_bit(self) -> bool: ...
def _processor_t_has_idp_opts(self) -> bool: ...
def _processor_t_has_realcvt(self) -> bool: ...
def _processor_t_has_segregs(self) -> bool: ...
def _processor_t_init(idp_modname) -> ssize_t: ...
def _processor_t_insn_reads_tbit(insn, _getreg, regvalues) -> ssize_t: ...
def _processor_t_is_align_insn(ea) -> ssize_t: ...
def _processor_t_is_alloca_probe(ea) -> ssize_t: ...
def _processor_t_is_basic_block_end(insn, call_insn_stops_block) -> ssize_t: ...
def _processor_t_is_call_insn(insn) -> ssize_t: ...
def _processor_t_is_cond_insn(insn) -> ssize_t: ...
def _processor_t_is_control_flow_guard(p_reg, insn) -> ssize_t: ...
def _processor_t_is_far_jump(icode) -> ssize_t: ...
def _processor_t_is_indirect_jump(insn) -> ssize_t: ...
def _processor_t_is_jump_func(pfn, jump_target, func_pointer) -> ssize_t: ...
def _processor_t_is_ret_insn(insn, strict) -> ssize_t: ...
def _processor_t_is_sane_insn(insn, no_crefs) -> ssize_t: ...
def _processor_t_is_sp_based(insn, x) -> ssize_t: ...
def _processor_t_is_switch(si, insn) -> ssize_t: ...
def _processor_t_loader_elf_machine(li, machine_type, p_procname, p_pd, ldr, reader) -> ssize_t: ...
def _processor_t_lower_func_type(argnums, fti) -> ssize_t: ...
def _processor_t_max_ptr_size() -> ssize_t: ...
def _processor_t_may_be_func(insn, state) -> ssize_t: ...
def _processor_t_may_show_sreg(current_ea) -> ssize_t: ...
def _processor_t_moving_segm(seg, to, flags) -> ssize_t: ...
def _processor_t_newasm(asmnum) -> ssize_t: ...
def _processor_t_newbinary(filename, fileoff, basepara, binoff, nbytes) -> ssize_t: ...
def _processor_t_newfile(fname) -> ssize_t: ...
def _processor_t_newprc(pnum, keep_cfg) -> ssize_t: ...
def _processor_t_next_exec_insn(target, ea, tid, _getreg, regvalues) -> ssize_t: ...
def _processor_t_notify(event_code) -> ssize_t: ...
def _processor_t_oldfile(fname) -> ssize_t: ...
def _processor_t_out_assumes(ctx) -> ssize_t: ...
def _processor_t_out_data(ctx, analyze_only) -> ssize_t: ...
def _processor_t_out_footer(ctx) -> ssize_t: ...
def _processor_t_out_header(ctx) -> ssize_t: ...
def _processor_t_out_insn(ctx) -> ssize_t: ...
def _processor_t_out_label(ctx, colored_name) -> ssize_t: ...
def _processor_t_out_mnem(ctx) -> ssize_t: ...
def _processor_t_out_operand(ctx, op) -> ssize_t: ...
def _processor_t_out_segend(ctx, seg) -> ssize_t: ...
def _processor_t_out_segstart(ctx, seg) -> ssize_t: ...
def _processor_t_out_special_item(ctx, segtype) -> ssize_t: ...
def _processor_t_privrange_changed(self, old_privrange, delta) -> ssize_t: ...
def _processor_t_realcvt(m, e, swt) -> fpvalue_error_t: ...
def _processor_t_rename(ea, new_name, flags) -> ssize_t: ...
def _processor_t_set_code16_mode(ea, code16=...) -> ssize_t: ...
def _processor_t_set_idp_options(*args, **kwargs): ...
def _processor_t_set_proc_options(options, confidence) -> ssize_t: ...
def _processor_t_setup_til() -> ssize_t: ...
def _processor_t_sizeof_ldbl(self) -> size_t: ...
def _processor_t_stkup(self) -> bool: ...
def _processor_t_str2reg(regname) -> ssize_t: ...
def _processor_t_supports_calcrel(self) -> bool: ...
def _processor_t_supports_macros(self) -> bool: ...
def _processor_t_swiginit(*args, **kwargs): ...
def _processor_t_swigregister(*args, **kwargs): ...
def _processor_t_term() -> ssize_t: ...
def _processor_t_ti(self) -> bool: ...
def _processor_t_treat_hindering_item(hindering_item_ea, new_item_flags, new_item_ea, new_item_length) -> ssize_t: ...
def _processor_t_undefine(ea) -> ssize_t: ...
def _processor_t_update_call_stack(stack, tid, _getreg, regvalues) -> ssize_t: ...
def _processor_t_use32(self) -> bool: ...
def _processor_t_use64(self) -> bool: ...
def _processor_t_use_arg_types(ea, fti, rargs) -> ssize_t: ...
def _processor_t_use_mappings(self) -> bool: ...
def _processor_t_use_regarg_type(idx, ea, rargs) -> ssize_t: ...
def _processor_t_use_stkarg_type(ea, arg) -> ssize_t: ...
def _processor_t_use_tbyte(self) -> bool: ...
def _processor_t_validate_flirt_func(start_ea, funcname) -> ssize_t: ...
def _processor_t_verify_noreturn(pfn) -> ssize_t: ...
def _processor_t_verify_sp(pfn) -> ssize_t: ...
def _processor_t_version_get(self) -> int32: ...
def _processor_t_version_set(self, version) -> Any: ...
def asm_t_a_align_get(*args, **kwargs): ...
def asm_t_a_align_set(self, a_align) -> Any: ...
def asm_t_a_ascii_get(*args, **kwargs): ...
def asm_t_a_ascii_set(self, a_ascii) -> Any: ...
def asm_t_a_band_get(*args, **kwargs): ...
def asm_t_a_band_set(self, a_band) -> Any: ...
def asm_t_a_bnot_get(*args, **kwargs): ...
def asm_t_a_bnot_set(self, a_bnot) -> Any: ...
def asm_t_a_bor_get(*args, **kwargs): ...
def asm_t_a_bor_set(self, a_bor) -> Any: ...
def asm_t_a_bss_get(*args, **kwargs): ...
def asm_t_a_bss_set(self, a_bss) -> Any: ...
def asm_t_a_byte_get(*args, **kwargs): ...
def asm_t_a_byte_set(self, a_byte) -> Any: ...
def asm_t_a_comdef_get(*args, **kwargs): ...
def asm_t_a_comdef_set(self, a_comdef) -> Any: ...
def asm_t_a_curip_get(*args, **kwargs): ...
def asm_t_a_curip_set(self, a_curip) -> Any: ...
def asm_t_a_double_get(*args, **kwargs): ...
def asm_t_a_double_set(self, a_double) -> Any: ...
def asm_t_a_dups_get(*args, **kwargs): ...
def asm_t_a_dups_set(self, a_dups) -> Any: ...
def asm_t_a_dword_get(*args, **kwargs): ...
def asm_t_a_dword_set(self, a_dword) -> Any: ...
def asm_t_a_equ_get(*args, **kwargs): ...
def asm_t_a_equ_set(self, a_equ) -> Any: ...
def asm_t_a_extrn_get(*args, **kwargs): ...
def asm_t_a_extrn_set(self, a_extrn) -> Any: ...
def asm_t_a_float_get(*args, **kwargs): ...
def asm_t_a_float_set(self, a_float) -> Any: ...
def asm_t_a_include_fmt_get(*args, **kwargs): ...
def asm_t_a_include_fmt_set(self, a_include_fmt) -> Any: ...
def asm_t_a_mod_get(*args, **kwargs): ...
def asm_t_a_mod_set(self, a_mod) -> Any: ...
def asm_t_a_oword_get(*args, **kwargs): ...
def asm_t_a_oword_set(self, a_oword) -> Any: ...
def asm_t_a_packreal_get(*args, **kwargs): ...
def asm_t_a_packreal_set(self, a_packreal) -> Any: ...
def asm_t_a_public_get(*args, **kwargs): ...
def asm_t_a_public_set(self, a_public) -> Any: ...
def asm_t_a_qword_get(*args, **kwargs): ...
def asm_t_a_qword_set(self, a_qword) -> Any: ...
def asm_t_a_rva_get(*args, **kwargs): ...
def asm_t_a_rva_set(self, a_rva) -> Any: ...
def asm_t_a_seg_get(*args, **kwargs): ...
def asm_t_a_seg_set(self, a_seg) -> Any: ...
def asm_t_a_shl_get(*args, **kwargs): ...
def asm_t_a_shl_set(self, a_shl) -> Any: ...
def asm_t_a_shr_get(*args, **kwargs): ...
def asm_t_a_shr_set(self, a_shr) -> Any: ...
def asm_t_a_sizeof_fmt_get(*args, **kwargs): ...
def asm_t_a_sizeof_fmt_set(self, a_sizeof_fmt) -> Any: ...
def asm_t_a_tbyte_get(*args, **kwargs): ...
def asm_t_a_tbyte_set(self, a_tbyte) -> Any: ...
def asm_t_a_vstruc_fmt_get(*args, **kwargs): ...
def asm_t_a_vstruc_fmt_set(self, a_vstruc_fmt) -> Any: ...
def asm_t_a_weak_get(*args, **kwargs): ...
def asm_t_a_weak_set(self, a_weak) -> Any: ...
def asm_t_a_word_get(*args, **kwargs): ...
def asm_t_a_word_set(self, a_word) -> Any: ...
def asm_t_a_xor_get(*args, **kwargs): ...
def asm_t_a_xor_set(self, a_xor) -> Any: ...
def asm_t_a_yword_get(*args, **kwargs): ...
def asm_t_a_yword_set(self, a_yword) -> Any: ...
def asm_t_a_zword_get(*args, **kwargs): ...
def asm_t_a_zword_set(self, a_zword) -> Any: ...
def asm_t_accsep_get(self) -> char: ...
def asm_t_accsep_set(self, accsep) -> Any: ...
def asm_t_ascsep_get(self) -> char: ...
def asm_t_ascsep_set(self, ascsep) -> Any: ...
def asm_t_cmnt2_get(*args, **kwargs): ...
def asm_t_cmnt2_set(self, cmnt2) -> Any: ...
def asm_t_cmnt_get(*args, **kwargs): ...
def asm_t_cmnt_set(self, cmnt) -> Any: ...
def asm_t_end_get(*args, **kwargs): ...
def asm_t_end_set(self, end) -> Any: ...
def asm_t_esccodes_get(*args, **kwargs): ...
def asm_t_esccodes_set(self, esccodes) -> Any: ...
def asm_t_flag2_get(self) -> uint32: ...
def asm_t_flag2_set(self, flag2) -> Any: ...
def asm_t_flag_get(self) -> uint32: ...
def asm_t_flag_set(self, flag) -> Any: ...
def asm_t_header_get(*args, **kwargs): ...
def asm_t_header_set(self, header) -> Any: ...
def asm_t_help_get(self) -> help_t: ...
def asm_t_help_set(self, help) -> Any: ...
def asm_t_high16_get(*args, **kwargs): ...
def asm_t_high16_set(self, high16) -> Any: ...
def asm_t_high8_get(*args, **kwargs): ...
def asm_t_high8_set(self, high8) -> Any: ...
def asm_t_lbrace_get(self) -> char: ...
def asm_t_lbrace_set(self, lbrace) -> Any: ...
def asm_t_low16_get(*args, **kwargs): ...
def asm_t_low16_set(self, low16) -> Any: ...
def asm_t_low8_get(*args, **kwargs): ...
def asm_t_low8_set(self, low8) -> Any: ...
def asm_t_name_get(*args, **kwargs): ...
def asm_t_name_set(self, name) -> Any: ...
def asm_t_origin_get(*args, **kwargs): ...
def asm_t_origin_set(self, origin) -> Any: ...
def asm_t_rbrace_get(self) -> char: ...
def asm_t_rbrace_set(self, rbrace) -> Any: ...
def asm_t_swiginit(*args, **kwargs): ...
def asm_t_swigregister(*args, **kwargs): ...
def asm_t_uflag_get(self) -> uint16: ...
def asm_t_uflag_set(self, uflag) -> Any: ...
def assemble(ea, cs, ip, use32, line) -> bool: ...
def cfg_get_cc_header_path(*args, **kwargs): ...
def cfg_get_cc_parm(*args, **kwargs): ...
def cfg_get_cc_predefined_macros(*args, **kwargs): ...
def delay_slot_insn(ea, bexec, fexec) -> bool: ...
def delete_IDB_Hooks(self) -> Any: ...
def delete_IDP_Hooks(self) -> Any: ...
def delete__processor_t(self) -> Any: ...
def delete_asm_t(self) -> Any: ...
def delete_num_range_t(self) -> Any: ...
def delete_params_t(self) -> Any: ...
def delete_reg_access_t(self) -> Any: ...
def delete_reg_access_vec_t(self) -> Any: ...
def delete_reg_accesses_t(self) -> Any: ...
def delete_reg_info_t(self) -> Any: ...
def disown_IDB_Hooks(*args, **kwargs): ...
def disown_IDP_Hooks(*args, **kwargs): ...
def gen_idb_event(code) -> Any: ...
def get_ash() -> asm_t: ...
def get_config_value(key) -> bool: ...
def get_idb_notifier_addr(*args, **kwargs): ...
def get_idb_notifier_ud_addr(*args, **kwargs): ...
def get_idp_name(*args, **kwargs): ...
def get_idp_notifier_addr(*args, **kwargs): ...
def get_idp_notifier_ud_addr(*args, **kwargs): ...
def get_ph() -> _processor_t: ...
def get_reg_info(*args, **kwargs): ...
def get_reg_name(reg, width, reghi=...) -> ssize_t: ...
def has_cf_chg(feature, opnum) -> bool: ...
def has_cf_use(feature, opnum) -> bool: ...
def has_insn_feature(icode, bit) -> bool: ...
def is_align_insn(ea) -> int: ...
def is_basic_block_end(insn, call_insn_stops_block) -> bool: ...
def is_call_insn(insn) -> bool: ...
def is_indirect_jump_insn(insn) -> bool: ...
def is_ret_insn(insn, strict=...) -> bool: ...
def new_IDB_Hooks(_self, _flags=..., _hkcb_flags=...) -> IDB_Hooks: ...
def new_IDP_Hooks(_self, _flags=..., _hkcb_flags=...) -> IDP_Hooks: ...
def new__processor_t() -> _processor_t: ...
def new_asm_t() -> asm_t: ...
def new_num_range_t(_min, _max) -> num_range_t: ...
def new_params_t(_p1, _p2) -> params_t: ...
def new_reg_access_t() -> reg_access_t: ...
def new_reg_access_vec_t(x) -> reg_access_vec_t: ...
def new_reg_accesses_t() -> reg_accesses_t: ...
def new_reg_info_t() -> reg_info_t: ...
def num_range_t_maxval_get(self) -> int64: ...
def num_range_t_maxval_set(self, maxval) -> Any: ...
def num_range_t_minval_get(self) -> int64: ...
def num_range_t_minval_set(self, minval) -> Any: ...
def num_range_t_swiginit(*args, **kwargs): ...
def num_range_t_swigregister(*args, **kwargs): ...
def params_t_p1_get(self) -> int64: ...
def params_t_p1_set(self, p1) -> Any: ...
def params_t_p2_get(self) -> int64: ...
def params_t_p2_set(self, p2) -> Any: ...
def params_t_swiginit(*args, **kwargs): ...
def params_t_swigregister(*args, **kwargs): ...
def parse_reg_name(ri, regname) -> bool: ...
def ph_calcrel(ea) -> Any: ...
def ph_find_op_value(insn, op) -> ssize_t: ...
def ph_find_reg_value(insn, reg) -> ssize_t: ...
def ph_get_cnbits() -> size_t: ...
def ph_get_dnbits() -> size_t: ...
def ph_get_flag() -> size_t: ...
def ph_get_icode_return() -> size_t: ...
def ph_get_id() -> size_t: ...
def ph_get_instruc(*args, **kwargs): ...
def ph_get_instruc_end() -> size_t: ...
def ph_get_instruc_start() -> size_t: ...
def ph_get_operand_info(*args, **kwargs): ...
def ph_get_reg_accesses(accvec, insn, flags) -> ssize_t: ...
def ph_get_reg_code_sreg() -> size_t: ...
def ph_get_reg_data_sreg() -> size_t: ...
def ph_get_reg_first_sreg() -> size_t: ...
def ph_get_reg_last_sreg() -> size_t: ...
def ph_get_regnames(*args, **kwargs): ...
def ph_get_segreg_size() -> size_t: ...
def ph_get_tbyte_size() -> size_t: ...
def ph_get_version() -> size_t: ...
def process_config_directive(directive, priority=...) -> Any: ...
def reg_access_t___eq__(self, r) -> bool: ...
def reg_access_t___ne__(self, r) -> bool: ...
def reg_access_t_access_type_get(self) -> access_type_t: ...
def reg_access_t_access_type_set(self, access_type) -> Any: ...
def reg_access_t_have_common_bits(self, r) -> bool: ...
def reg_access_t_opnum_get(self) -> uchar: ...
def reg_access_t_opnum_set(self, opnum) -> Any: ...
def reg_access_t_range_get(self) -> bitrange_t: ...
def reg_access_t_range_set(self, range) -> Any: ...
def reg_access_t_regnum_get(self) -> int: ...
def reg_access_t_regnum_set(self, regnum) -> Any: ...
def reg_access_t_swiginit(*args, **kwargs): ...
def reg_access_t_swigregister(*args, **kwargs): ...
def reg_access_vec_t___eq__(self, r) -> bool: ...
def reg_access_vec_t___getitem__(self, i) -> reg_access_t: ...
def reg_access_vec_t___len__(self) -> size_t: ...
def reg_access_vec_t___ne__(self, r) -> bool: ...
def reg_access_vec_t___setitem__(self, i, v) -> Any: ...
def reg_access_vec_t__del(self, x) -> bool: ...
def reg_access_vec_t_add_unique(self, x) -> bool: ...
def reg_access_vec_t_at(self, _idx) -> reg_access_t: ...
@overload
def reg_access_vec_t_begin(self) -> reg_access_t: ...
@overload
def reg_access_vec_t_begin(self) -> reg_access_t: ...
def reg_access_vec_t_capacity(self) -> size_t: ...
def reg_access_vec_t_clear(self) -> Any: ...
def reg_access_vec_t_empty(self) -> bool: ...
@overload
def reg_access_vec_t_end(self) -> reg_access_t: ...
@overload
def reg_access_vec_t_end(self) -> reg_access_t: ...
@overload
def reg_access_vec_t_erase(self, it) -> reg_access_t: ...
@overload
def reg_access_vec_t_erase(self, first, last) -> reg_access_t: ...
def reg_access_vec_t_extract(self) -> reg_access_t: ...
@overload
def reg_access_vec_t_find(self, x) -> reg_access_t: ...
@overload
def reg_access_vec_t_find(self, x) -> reg_access_t: ...
def reg_access_vec_t_grow(self, x=...) -> Any: ...
def reg_access_vec_t_has(self, x) -> bool: ...
def reg_access_vec_t_inject(self, s, len) -> Any: ...
def reg_access_vec_t_insert(self, it, x) -> reg_access_t: ...
def reg_access_vec_t_pop_back(self) -> Any: ...
@overload
def reg_access_vec_t_push_back(self, x) -> Any: ...
@overload
def reg_access_vec_t_push_back(self) -> reg_access_t: ...
def reg_access_vec_t_qclear(self) -> Any: ...
def reg_access_vec_t_reserve(self, cnt) -> Any: ...
@overload
def reg_access_vec_t_resize(self, _newsize, x) -> Any: ...
@overload
def reg_access_vec_t_resize(self, _newsize) -> Any: ...
def reg_access_vec_t_size(self) -> size_t: ...
def reg_access_vec_t_swap(self, r) -> Any: ...
def reg_access_vec_t_swiginit(*args, **kwargs): ...
def reg_access_vec_t_swigregister(*args, **kwargs): ...
def reg_access_vec_t_truncate(self) -> Any: ...
def reg_accesses_t_swiginit(*args, **kwargs): ...
def reg_accesses_t_swigregister(*args, **kwargs): ...
def reg_info_t___eq__(self, r) -> bool: ...
def reg_info_t___ge__(self, r) -> bool: ...
def reg_info_t___gt__(self, r) -> bool: ...
def reg_info_t___le__(self, r) -> bool: ...
def reg_info_t___lt__(self, r) -> bool: ...
def reg_info_t___ne__(self, r) -> bool: ...
def reg_info_t_compare(self, r) -> int: ...
def reg_info_t_reg_get(self) -> int: ...
def reg_info_t_reg_set(self, reg) -> Any: ...
def reg_info_t_size_get(self) -> int: ...
def reg_info_t_size_set(self, size) -> Any: ...
def reg_info_t_swiginit(*args, **kwargs): ...
def reg_info_t_swigregister(*args, **kwargs): ...
def register_cfgopts(opts, nopts, cb=..., obj=...) -> bool: ...
def set_processor_type(procname, level) -> bool: ...
def set_target_assembler(asmnum) -> bool: ...
def sizeof_ldbl() -> size_t: ...
def str2reg(p) -> int: ...
# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"