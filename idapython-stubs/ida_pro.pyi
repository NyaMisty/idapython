# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete
BADDIFF: Incomplete
IDA_SDK_VERSION: Incomplete
BADMEMSIZE: Incomplete
_CRT_DECLARE_NONSTDC_NAMES: Incomplete
MAXSTR: Incomplete
__MF__: Incomplete

def qatoll(*args) -> int64: ...

FMT_64: Incomplete
FMT_Z: Incomplete
FMT_ZX: Incomplete
FMT_ZS: Incomplete
FMT_EA: Incomplete

def qexit(*args) -> None: ...
def log2ceil(*args) -> int: ...
def log2floor(*args) -> int: ...
def extend_sign(*args) -> uint64: ...
def readbytes(*args) -> int: ...
def writebytes(*args) -> int: ...
def reloc_value(*args) -> None: ...
def qvector_reserve(*args) -> 'void *': ...

class qrefcnt_obj_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    refcnt: Incomplete
    def release(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def relocate_relobj(*args) -> bool: ...

IDBDEC_ESCAPE: Incomplete
CP_BOM: Incomplete
UTF8_BOM: Incomplete
UTF16LE_BOM: Incomplete
UTF16BE_BOM: Incomplete
UTF32LE_BOM: Incomplete
UTF32BE_BOM: Incomplete
CP_ELLIPSIS: Incomplete
UTF8_ELLIPSIS: Incomplete
CP_REPLCHAR: Incomplete
UTF8_REPLCHAR: Incomplete
MAX_UTF8_SEQ_LEN: Incomplete

def is_cvt64(*args) -> bool: ...

CEF_RETERR: Incomplete
ENC_WIN1252: Incomplete
ENC_UTF8: Incomplete
ENC_MUTF8: Incomplete
ENC_UTF16: Incomplete
ENC_UTF16LE: Incomplete
ENC_UTF16BE: Incomplete
ENC_UTF32: Incomplete
ENC_UTF32LE: Incomplete
ENC_UTF32BE: Incomplete
CP_UTF8: Incomplete
CP_UTF16: Incomplete
SUBSTCHAR: Incomplete

class channel_redir_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    fd: Incomplete
    file: Incomplete
    flags: Incomplete
    def is_input(self, *args) -> bool: ...
    def is_output(self, *args) -> bool: ...
    def is_append(self, *args) -> bool: ...
    def is_quoted(self, *args) -> bool: ...
    start: Incomplete
    length: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

IOREDIR_INPUT: Incomplete
IOREDIR_OUTPUT: Incomplete
IOREDIR_APPEND: Incomplete
IOREDIR_QUOTED: Incomplete

def quote_cmdline_arg(*args) -> bool: ...

class instant_dbgopts_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    debmod: Incomplete
    env: Incomplete
    host: Incomplete
    _pass: Incomplete
    port: Incomplete
    pid: Incomplete
    event_id: Incomplete
    attach: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def parse_dbgopts(*args) -> bool: ...

QWCONTINUED: Incomplete
QWNOHANG: Incomplete

def check_process_exit(*args) -> int: ...

TCT_UNKNOWN: Incomplete
TCT_OWNER: Incomplete
TCT_NOT_OWNER: Incomplete

def is_control_tty(*args) -> 'enum tty_control_t': ...
def qdetach_tty(*args) -> None: ...
def qcontrol_tty(*args) -> None: ...

class __qthread_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def qthread_equal(*args) -> bool: ...
def is_main_thread(*args) -> bool: ...

class __qsemaphore_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class __qmutex_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class qmutex_locker_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class intvec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'int &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'int const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'int *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< int >::const_iterator': ...
    def end(self, *args) -> 'qvector< int >::const_iterator': ...
    def insert(self, *args) -> 'qvector< int >::iterator': ...
    def erase(self, *args) -> 'qvector< int >::iterator': ...
    def find(self, *args) -> 'qvector< int >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'int const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

cvar: Incomplete
NULL_PIPE_HANDLE: Incomplete

class uintvec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'unsigned int &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'unsigned int const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'unsigned int *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< unsigned int >::const_iterator': ...
    def end(self, *args) -> 'qvector< unsigned int >::const_iterator': ...
    def insert(self, *args) -> 'qvector< unsigned int >::iterator': ...
    def erase(self, *args) -> 'qvector< unsigned int >::iterator': ...
    def find(self, *args) -> 'qvector< unsigned int >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'unsigned int const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class int64vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'long long &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'long long const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'long long *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< long long >::const_iterator': ...
    def end(self, *args) -> 'qvector< long long >::const_iterator': ...
    def insert(self, *args) -> 'qvector< long long >::iterator': ...
    def erase(self, *args) -> 'qvector< long long >::iterator': ...
    def find(self, *args) -> 'qvector< long long >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'long long const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class uint64vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'unsigned long long &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'unsigned long long const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'unsigned long long *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< unsigned long long >::const_iterator': ...
    def end(self, *args) -> 'qvector< unsigned long long >::const_iterator': ...
    def insert(self, *args) -> 'qvector< unsigned long long >::iterator': ...
    def erase(self, *args) -> 'qvector< unsigned long long >::iterator': ...
    def find(self, *args) -> 'qvector< unsigned long long >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'unsigned long long const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class boolvec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'bool &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'bool const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'bool *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< bool >::const_iterator': ...
    def end(self, *args) -> 'qvector< bool >::const_iterator': ...
    def insert(self, *args) -> 'qvector< bool >::iterator': ...
    def erase(self, *args) -> 'qvector< bool >::iterator': ...
    def find(self, *args) -> 'qvector< bool >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'bool const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class strvec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'simpleline_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'simpleline_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'simpleline_t *': ...
    def inject(self, *args) -> None: ...
    def begin(self, *args) -> 'qvector< simpleline_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< simpleline_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< simpleline_t >::iterator': ...
    def erase(self, *args) -> 'qvector< simpleline_t >::iterator': ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'simpleline_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class sizevec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'size_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'size_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'size_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< size_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< size_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< size_t >::iterator': ...
    def erase(self, *args) -> 'qvector< size_t >::iterator': ...
    def find(self, *args) -> 'qvector< size_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'size_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

def qstrvec_t_create(*args) -> 'PyObject *': ...
def qstrvec_t_destroy(*args) -> bool: ...
def qstrvec_t_get_clink(*args) -> 'qstrvec_t *': ...
def qstrvec_t_get_clink_ptr(*args) -> 'PyObject *': ...
def qstrvec_t_assign(*args) -> bool: ...
def qstrvec_t_addressof(*args) -> 'PyObject *': ...
def qstrvec_t_set(*args) -> bool: ...
def qstrvec_t_from_list(*args) -> bool: ...
def qstrvec_t_size(*args) -> size_t: ...
def qstrvec_t_get(*args) -> 'PyObject *': ...
def qstrvec_t_add(*args) -> bool: ...
def qstrvec_t_clear(*args) -> bool: ...
def qstrvec_t_insert(*args) -> bool: ...
def qstrvec_t_remove(*args) -> bool: ...
def str2user(*args) -> 'PyObject *': ...

class uchar_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __getitem__(self, *args) -> uchar: ...
    def __setitem__(self, *args) -> None: ...
    def cast(self, *args) -> 'uchar *': ...
    @staticmethod
    def frompointer(*args) -> 'uchar_array *': ...

def uchar_array_frompointer(*args) -> 'uchar_array *': ...

class tid_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __getitem__(self, *args) -> tid_t: ...
    def __setitem__(self, *args) -> None: ...
    def cast(self, *args) -> 'tid_t *': ...
    @staticmethod
    def frompointer(*args) -> 'tid_array *': ...

def tid_array_frompointer(*args) -> 'tid_array *': ...

class ea_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __getitem__(self, *args) -> ea_t: ...
    def __setitem__(self, *args) -> None: ...
    def cast(self, *args) -> 'ea_t *': ...
    @staticmethod
    def frompointer(*args) -> 'ea_array *': ...

def ea_array_frompointer(*args) -> 'ea_array *': ...

class sel_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __getitem__(self, *args) -> sel_t: ...
    def __setitem__(self, *args) -> None: ...
    def cast(self, *args) -> 'sel_t *': ...
    @staticmethod
    def frompointer(*args) -> 'sel_array *': ...

def sel_array_frompointer(*args) -> 'sel_array *': ...

class uval_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __getitem__(self, *args) -> uval_t: ...
    def __setitem__(self, *args) -> None: ...
    def cast(self, *args) -> 'uval_t *': ...
    @staticmethod
    def frompointer(*args) -> 'uval_array *': ...

def uval_array_frompointer(*args) -> 'uval_array *': ...

class int_pointer:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def assign(self, *args) -> None: ...
    def value(self, *args) -> int: ...
    def cast(self, *args) -> 'int *': ...
    @staticmethod
    def frompointer(*args) -> 'int_pointer *': ...

def int_pointer_frompointer(*args) -> 'int_pointer *': ...

class ea_pointer:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def assign(self, *args) -> None: ...
    def value(self, *args) -> ea_t: ...
    def cast(self, *args) -> 'ea_t *': ...
    @staticmethod
    def frompointer(*args) -> 'ea_pointer *': ...

def ea_pointer_frompointer(*args) -> 'ea_pointer *': ...

class sval_pointer:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def assign(self, *args) -> None: ...
    def value(self, *args) -> sval_t: ...
    def cast(self, *args) -> 'sval_t *': ...
    @staticmethod
    def frompointer(*args) -> 'sval_pointer *': ...

def sval_pointer_frompointer(*args) -> 'sval_pointer *': ...

class sel_pointer:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def assign(self, *args) -> None: ...
    def value(self, *args) -> sel_t: ...
    def cast(self, *args) -> 'sel_t *': ...
    @staticmethod
    def frompointer(*args) -> 'sel_pointer *': ...

def sel_pointer_frompointer(*args) -> 'sel_pointer *': ...
longlongvec_t = int64vec_t
ulonglongvec_t = uint64vec_t
svalvec_t = int64vec_t
uvalvec_t = uint64vec_t
svalvec_t = intvec_t
uvalvec_t = uintvec_t
eavec_t = uvalvec_t

class _qstrvec_t(ida_idaapi.py_clinked_object_t):
    def __init__(self, items: Incomplete | None = None) -> None: ...
    def _create_clink(self): ...
    def _del_clink(self, lnk): ...
    def _get_clink_ptr(self): ...
    def assign(self, other): ...
    def __setitem__(self, idx, s) -> None: ...
    def __getitem__(self, idx): ...
    def __get_size(self): ...
    size: Incomplete
    def addressof(self, idx): ...
    def add(self, s): ...
    def from_list(self, lst): ...
    def clear(self, qclear: bool = False): ...
    def insert(self, idx, s): ...
    def remove(self, idx): ...
