# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
import ida_pro
from _typeshed import Incomplete
from ida_pro import str2user as str2user

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

def _kludge_force_declare_dirspec_t(*args) -> None: ...
def _kludge_force_declare_dirtree_t(*args) -> None: ...

class chooser_row_info_vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'chooser_row_info_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'chooser_row_info_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'chooser_row_info_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< chooser_row_info_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< chooser_row_info_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< chooser_row_info_t >::iterator': ...
    def erase(self, *args) -> 'qvector< chooser_row_info_t >::iterator': ...
    def find(self, *args) -> 'qvector< chooser_row_info_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'chooser_row_info_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

def refresh_choosers(*args) -> None: ...
def textctrl_info_t_create(*args) -> 'PyObject *': ...
def textctrl_info_t_destroy(*args) -> bool: ...
def textctrl_info_t_get_clink(*args) -> 'textctrl_info_t *': ...
def textctrl_info_t_get_clink_ptr(*args) -> 'PyObject *': ...
def register_timer(*args) -> 'PyObject *': ...
def unregister_timer(*args) -> bool: ...
def choose_idasgn(*args) -> 'PyObject *': ...
def get_highlight(*args) -> 'PyObject *': ...
def py_load_custom_icon_fn(*args) -> int: ...
def py_load_custom_icon_data(*args) -> int: ...
def msg(*args) -> 'PyObject *': ...
def ask_text(*args) -> 'PyObject *': ...
def ask_str(*args) -> 'PyObject *': ...
def process_ui_action(*args) -> bool: ...
def del_hotkey(*args) -> bool: ...
def add_hotkey(*args) -> 'PyObject *': ...
def take_database_snapshot(*args) -> 'PyObject *': ...
def restore_database_snapshot(*args) -> 'PyObject *': ...
def execute_sync(*args) -> int: ...
def execute_ui_requests(*args) -> bool: ...

class jobj_wrapper_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    def get_dict(self, *args) -> 'PyObject *': ...

class UI_Hooks:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def hook(self, *args) -> bool: ...
    def unhook(self, *args) -> bool: ...
    def range(self, *args) -> None: ...
    def idcstart(self, *args) -> None: ...
    def idcstop(self, *args) -> None: ...
    def suspend(self, *args) -> None: ...
    def resume(self, *args) -> None: ...
    def saving(self, *args) -> None: ...
    def saved(self, *args) -> None: ...
    def database_closed(self, *args) -> None: ...
    def debugger_menu_change(self, *args) -> None: ...
    def widget_visible(self, *args) -> None: ...
    def widget_closing(self, *args) -> None: ...
    def widget_invisible(self, *args) -> None: ...
    def get_ea_hint(self, *args) -> 'PyObject *': ...
    def get_item_hint(self, *args) -> 'PyObject *': ...
    def get_custom_viewer_hint(self, *args) -> 'PyObject *': ...
    def database_inited(self, *args) -> None: ...
    def ready_to_run(self, *args) -> None: ...
    def preprocess_action(self, *args) -> int: ...
    def postprocess_action(self, *args) -> None: ...
    def get_chooser_item_attrs(self, *args) -> None: ...
    def updating_actions(self, *args) -> None: ...
    def updated_actions(self, *args) -> None: ...
    def populating_widget_popup(self, *args) -> None: ...
    def finish_populating_widget_popup(self, *args) -> None: ...
    def plugin_loaded(self, *args) -> None: ...
    def plugin_unloading(self, *args) -> None: ...
    def current_widget_changed(self, *args) -> None: ...
    def screen_ea_changed(self, *args) -> None: ...
    def create_desktop_widget(self, *args) -> 'PyObject *': ...
    def get_lines_rendering_info(self, *args) -> None: ...
    def get_widget_config(self, *args) -> 'PyObject *': ...
    def set_widget_config(self, *args) -> None: ...
    def initing_database(self, *args) -> None: ...
    def destroying_procmod(self, *args) -> None: ...
    def destroying_plugmod(self, *args) -> None: ...
    def desktop_applied(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __disown__(self): ...

def register_action(*args) -> bool: ...
def get_registered_actions(*args) -> 'PyObject *': ...
def attach_dynamic_action_to_popup(*args) -> bool: ...

class disasm_line_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    __swig_destroy__: Incomplete
    def __init__(self, *args) -> None: ...
    at: Incomplete
    line: Incomplete
    prefix_color: Incomplete
    bg_color: Incomplete
    is_default: Incomplete

def py_chooser_base_t_get_row(*args) -> 'PyObject *': ...
def gen_disasm_text(*args) -> None: ...
def set_nav_colorizer(*args) -> 'PyObject *': ...
def call_nav_colorizer(*args) -> uint32: ...
def msg_get_lines(*args) -> 'PyObject *': ...
def TWidget__from_ptrval__(*args) -> 'TWidget *': ...

MAX_SPACES_ADDED: Incomplete

def add_spaces(*args) -> 'PyObject *': ...
def show_wait_box(*args) -> None: ...
def hide_wait_box(*args) -> None: ...

class line_rendering_output_entries_refs_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'line_rendering_output_entry_t *&': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'line_rendering_output_entry_t *const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'line_rendering_output_entry_t **': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< line_rendering_output_entry_t * >::const_iterator': ...
    def end(self, *args) -> 'qvector< line_rendering_output_entry_t * >::const_iterator': ...
    def insert(self, *args) -> 'qvector< line_rendering_output_entry_t * >::iterator': ...
    def erase(self, *args) -> 'qvector< line_rendering_output_entry_t * >::iterator': ...
    def find(self, *args) -> 'qvector< line_rendering_output_entry_t * >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'line_rendering_output_entry_t *const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator
    def _internal_push_back(self, *args) -> None: ...
    def push_back(self, e) -> None: ...

class section_lines_refs_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'twinline_t const *&': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'twinline_t const *const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'twinline_t const **': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< twinline_t const * >::const_iterator': ...
    def end(self, *args) -> 'qvector< twinline_t const * >::const_iterator': ...
    def insert(self, *args) -> 'qvector< twinline_t const * >::iterator': ...
    def erase(self, *args) -> 'qvector< twinline_t const * >::iterator': ...
    def find(self, *args) -> 'qvector< twinline_t const * >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'twinline_t const *const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class sections_lines_refs_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'section_lines_refs_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'section_lines_refs_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'section_lines_refs_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< section_lines_refs_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< section_lines_refs_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< section_lines_refs_t >::iterator': ...
    def erase(self, *args) -> 'qvector< section_lines_refs_t >::iterator': ...
    def find(self, *args) -> 'qvector< section_lines_refs_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'section_lines_refs_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class text_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'twinline_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'twinline_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'twinline_t *': ...
    def inject(self, *args) -> None: ...
    def begin(self, *args) -> 'qvector< twinline_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< twinline_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< twinline_t >::iterator': ...
    def erase(self, *args) -> 'qvector< twinline_t >::iterator': ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'twinline_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class sync_source_vec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> None: ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'sync_source_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'sync_source_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< sync_source_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< sync_source_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< sync_source_t >::iterator': ...
    def erase(self, *args) -> 'qvector< sync_source_t >::iterator': ...
    def find(self, *args) -> 'qvector< sync_source_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'sync_source_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

mbox_internal: Incomplete
mbox_info: Incomplete
mbox_warning: Incomplete
mbox_error: Incomplete
mbox_nomem: Incomplete
mbox_feedback: Incomplete
mbox_readerror: Incomplete
mbox_writeerror: Incomplete
mbox_filestruct: Incomplete
mbox_wait: Incomplete
mbox_hide: Incomplete
mbox_replace: Incomplete
chtype_generic: Incomplete
chtype_idasgn: Incomplete
chtype_entry: Incomplete
chtype_name: Incomplete
chtype_stkvar_xref: Incomplete
chtype_xref: Incomplete
chtype_obsolete_enum: Incomplete
chtype_enum_by_value: Incomplete
chtype_func: Incomplete
chtype_segm: Incomplete
chtype_obsolete_struc: Incomplete
chtype_strpath: Incomplete
chtype_idatil: Incomplete
chtype_obsolete_enum_by_value_and_size: Incomplete
chtype_srcp: Incomplete
chtype_struct: Incomplete
chtype_enum: Incomplete
chtype_enum_by_value_and_size: Incomplete
beep_default: Incomplete
TCCRT_INVALID: Incomplete
TCCRT_FLAT: Incomplete
TCCRT_GRAPH: Incomplete
TCCRT_PROXIMITY: Incomplete
TCCPT_INVALID: Incomplete
TCCPT_PLACE: Incomplete
TCCPT_SIMPLELINE_PLACE: Incomplete
TCCPT_IDAPLACE: Incomplete
TCCPT_ENUMPLACE: Incomplete
TCCPT_STRUCTPLACE: Incomplete
TCCPT_TIPLACE: Incomplete
VME_UNKNOWN: Incomplete
VME_LEFT_BUTTON: Incomplete
VME_RIGHT_BUTTON: Incomplete
VME_MID_BUTTON: Incomplete
SETMENU_POSMASK: Incomplete
SETMENU_INS: Incomplete
SETMENU_APP: Incomplete
SETMENU_FIRST: Incomplete
SETMENU_ENSURE_SEP: Incomplete
CREATETB_ADV: Incomplete
HIF_IDENTIFIER: Incomplete
HIF_REGISTER: Incomplete
HIF_LOCKED: Incomplete
HIF_NOCASE: Incomplete
HIF_USE_SLOT: Incomplete
HIF_SLOT_SHIFT: Incomplete
HIF_SLOT_0: Incomplete
HIF_SLOT_1: Incomplete
HIF_SLOT_2: Incomplete
HIF_SLOT_3: Incomplete
HIF_SLOT_4: Incomplete
HIF_SLOT_5: Incomplete
HIF_SLOT_6: Incomplete
HIF_SLOT_7: Incomplete
REG_HINTS_MARKER: Incomplete
REG_HINTS_MARKER_LEN: Incomplete
SRCDBG_HINTS_MARKER: Incomplete
SRCDBG_HINTS_MARKER_LEN: Incomplete
CDVF_NOLINES: Incomplete
CDVF_LINEICONS: Incomplete
CDVF_STATUSBAR: Incomplete
IDCHK_OK: Incomplete
IDCHK_ARG: Incomplete
IDCHK_KEY: Incomplete
IDCHK_MAX: Incomplete
WCLS_SAVE: Incomplete
WCLS_NO_CONTEXT: Incomplete
WCLS_DONT_SAVE_SIZE: Incomplete
WCLS_DELETE_LATER: Incomplete
WCLS_CLOSE_LATER: Incomplete
DP_LEFT: Incomplete
DP_TOP: Incomplete
DP_RIGHT: Incomplete
DP_BOTTOM: Incomplete
DP_INSIDE: Incomplete
DP_TAB: Incomplete
DP_BEFORE: Incomplete
DP_FLOATING: Incomplete
DP_SZHINT: Incomplete
SVF_COPY_LINES: Incomplete
SVF_LINES_BYPTR: Incomplete
CVNF_LAZY: Incomplete
CVNF_JUMP: Incomplete
CVNF_ACT: Incomplete
WOPN_RESTORE: Incomplete
WOPN_PERSIST: Incomplete
WOPN_CLOSED_BY_ESC: Incomplete
WOPN_NOT_CLOSED_BY_ESC: Incomplete
WOPN_DP_MASK: Incomplete
WOPN_DP_SHIFT: Incomplete
WOPN_DP_LEFT: Incomplete
WOPN_DP_TOP: Incomplete
WOPN_DP_RIGHT: Incomplete
WOPN_DP_BOTTOM: Incomplete
WOPN_DP_INSIDE: Incomplete
WOPN_DP_TAB: Incomplete
WOPN_DP_BEFORE: Incomplete
WOPN_DP_FLOATING: Incomplete
WOPN_DP_SZHINT: Incomplete
WOPN_DP_INSIDE_BEFORE: Incomplete
WOPN_DP_TAB_BEFORE: Incomplete
RENADDR_IDA: Incomplete
RENADDR_HR: Incomplete
CVLF_USE_MOUSE: Incomplete

def get_kernel_version(*args) -> size_t: ...

class place_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    lnnum: Incomplete
    def _print(self, *args) -> None: ...
    def touval(self, *args) -> uval_t: ...
    def clone(self, *args) -> 'place_t *': ...
    def copyfrom(self, *args) -> None: ...
    def makeplace(self, *args) -> 'place_t *': ...
    def compare(self, *args) -> int: ...
    def adjust(self, *args) -> None: ...
    def prev(self, *args) -> bool: ...
    def next(self, *args) -> bool: ...
    def beginning(self, *args) -> bool: ...
    def ending(self, *args) -> bool: ...
    def serialize(self, *args) -> None: ...
    def id(self, *args) -> int: ...
    def name(self, *args) -> 'char const *': ...
    def toea(self, *args) -> ea_t: ...
    def rebase(self, *args) -> bool: ...
    def enter(self, *args) -> 'place_t *': ...
    def leave(self, *args) -> None: ...
    def compare2(self, *args) -> int: ...
    def deserialize(self, *args) -> bool: ...
    @staticmethod
    def as_idaplace_t(*args) -> 'idaplace_t *': ...
    @staticmethod
    def as_enumplace_t(*args) -> 'enumplace_t *': ...
    @staticmethod
    def as_structplace_t(*args) -> 'structplace_t *': ...
    @staticmethod
    def as_simpleline_place_t(*args) -> 'simpleline_place_t *': ...
    @staticmethod
    def as_tiplace_t(*args) -> 'tiplace_t *': ...
    def generate(self, *args) -> 'PyObject *': ...
    __swig_destroy__: Incomplete

def place_t_as_idaplace_t(*args) -> 'idaplace_t *': ...
def place_t_as_enumplace_t(*args) -> 'enumplace_t *': ...
def place_t_as_structplace_t(*args) -> 'structplace_t *': ...
def place_t_as_simpleline_place_t(*args) -> 'simpleline_place_t *': ...
def place_t_as_tiplace_t(*args) -> 'tiplace_t *': ...

DEFAULT_PLACE_LNNUM: Incomplete

def l_compare2(*args) -> int: ...

class simpleline_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    line: Incomplete
    color: Incomplete
    bgcolor: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class simpleline_place_t(place_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    n: Incomplete
    __swig_destroy__: Incomplete

class idaplace_t(place_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    ea: Incomplete
    __swig_destroy__: Incomplete

class enumplace_t(place_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    idx: Incomplete
    bmask: Incomplete
    value: Incomplete
    serial: Incomplete
    __swig_destroy__: Incomplete

class structplace_t(place_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    idx: Incomplete
    offset: Incomplete
    __swig_destroy__: Incomplete

def is_tif_cursor_header(*args) -> bool: ...
def is_tif_cursor_footer(*args) -> bool: ...
def is_tif_cursor_index(*args) -> bool: ...

class tiplace_t(place_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    ordinal: Incomplete
    cursor: Incomplete
    def valid_ord(self, *args) -> bool: ...
    def reset(self, *args) -> None: ...
    def is_header(self, *args) -> bool: ...
    def is_footer(self, *args) -> bool: ...
    def is_index(self, *args) -> bool: ...
    def set_header(self, *args) -> None: ...
    def set_footer(self, *args) -> None: ...
    def calc_udm_offset(self, *args) -> uint64: ...
    def set_index_by_offset(self, *args) -> None: ...
    def get_kind(self, *args) -> type_t: ...
    def fill_type_ref(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

PCF_EA_CAPABLE: Incomplete
PCF_MAKEPLACE_ALLOCATES: Incomplete

def internal_register_place_class(*args) -> int: ...
def get_place_class(*args) -> 'place_t const *': ...
def get_place_class_template(*args) -> 'place_t const *': ...
def is_place_class_ea_capable(*args) -> bool: ...
def get_place_class_id(*args) -> int: ...

class sync_source_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def is_register(self, *args) -> bool: ...
    def is_widget(self, *args) -> bool: ...
    def get_widget(self, *args) -> 'TWidget const *': ...
    def get_register(self, *args) -> 'char const *': ...
    __swig_destroy__: Incomplete

class synced_group_t(sync_source_vec_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def has_widget(self, *args) -> bool: ...
    def has_register(self, *args) -> bool: ...
    def has(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

LECVT_CANCELED: Incomplete
LECVT_ERROR: Incomplete
LECVT_OK: Incomplete
LECVT_WITHIN_LISTING: Incomplete

class twinpos_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    at: Incomplete
    x: Incomplete
    def __init__(self, *args) -> None: ...
    def place_as_idaplace_t(self): ...
    def place_as_enumplace_t(self): ...
    def place_as_structplace_t(self): ...
    def place_as_simpleline_place_t(self): ...
    def place_as_tiplace_t(self): ...
    def place(self, view): ...
    __swig_destroy__: Incomplete

class twinline_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    at: Incomplete
    line: Incomplete
    prefix_color: Incomplete
    bg_color: Incomplete
    is_default: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class linearray_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def set_place(self, *args) -> int: ...
    def get_place(self, *args) -> 'place_t *': ...
    def get_bg_color(self, *args) -> bgcolor_t: ...
    def get_pfx_color(self, *args) -> bgcolor_t: ...
    def get_dlnnum(self, *args) -> int: ...
    def get_linecnt(self, *args) -> int: ...
    def userdata(self, *args) -> 'void *': ...
    def set_userdata(self, *args) -> None: ...
    def beginning(self, *args) -> bool: ...
    def ending(self, *args) -> bool: ...
    def down(self, *args) -> 'qstring const *': ...
    def up(self, *args) -> 'qstring const *': ...

class lines_rendering_input_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    cb: Incomplete
    sections_lines: Incomplete
    sync_group: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

CK_TRACE: Incomplete
CK_TRACE_OVL: Incomplete
CK_EXTRA1: Incomplete
CK_EXTRA2: Incomplete
CK_EXTRA3: Incomplete
CK_EXTRA4: Incomplete
CK_EXTRA5: Incomplete
CK_EXTRA6: Incomplete
CK_EXTRA7: Incomplete
CK_EXTRA8: Incomplete
CK_EXTRA9: Incomplete
CK_EXTRA10: Incomplete
CK_EXTRA11: Incomplete
CK_EXTRA12: Incomplete
CK_EXTRA13: Incomplete
CK_EXTRA14: Incomplete
CK_EXTRA15: Incomplete
CK_EXTRA16: Incomplete
LROEF_MASK: Incomplete
LROEF_FULL_LINE: Incomplete
LROEF_CPS_RANGE: Incomplete

class line_rendering_output_entry_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    line: Incomplete
    flags: Incomplete
    bg_color: Incomplete
    cpx: Incomplete
    nchars: Incomplete
    def __init__(self, *args) -> None: ...
    def is_bg_color_empty(self, *args) -> bool: ...
    def is_bg_color_key(self, *args) -> bool: ...
    def is_bg_color_direct(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class lines_rendering_output_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    entries: Incomplete
    flags: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def clear(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def swap(self, *args) -> None: ...

class line_section_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    start: Incomplete
    length: Incomplete
    def contains(self, *args) -> bool: ...
    def is_open(self, *args) -> bool: ...
    def is_closed(self, *args) -> bool: ...
    def valid(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class tagged_line_section_t(line_section_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    tag: Incomplete
    def valid(self, *args) -> bool: ...
    def valid_in(self, *args) -> bool: ...
    def substr(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class tagged_line_sections_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def sections_at(self, *args) -> None: ...
    def nearest_at(self, *args) -> tagged_line_section_t: ...
    def find_in(self, *args) -> tagged_line_section_t: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class listing_location_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    cb: Incomplete
    loc: Incomplete
    text: Incomplete
    tagged_sections: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def request_refresh(*args) -> None: ...
def clear_refresh_request(*args) -> None: ...
def is_refresh_requested(*args) -> bool: ...

BWN_UNKNOWN: Incomplete
BWN_EXPORTS: Incomplete
BWN_IMPORTS: Incomplete
BWN_NAMES: Incomplete
BWN_FUNCS: Incomplete
BWN_STRINGS: Incomplete
BWN_SEGS: Incomplete
BWN_SEGREGS: Incomplete
BWN_SELS: Incomplete
BWN_SIGNS: Incomplete
BWN_TILS: Incomplete
BWN_LOCTYPS: Incomplete
BWN_CALLS: Incomplete
BWN_PROBS: Incomplete
BWN_BPTS: Incomplete
BWN_THREADS: Incomplete
BWN_MODULES: Incomplete
BWN_TRACE: Incomplete
BWN_CALL_STACK: Incomplete
BWN_XREFS: Incomplete
BWN_SEARCH: Incomplete
BWN_FRAME: Incomplete
BWN_NAVBAND: Incomplete
BWN_ENUMS: Incomplete
BWN_STRUCTS: Incomplete
BWN_DISASM: Incomplete
BWN_DUMP: Incomplete
BWN_NOTEPAD: Incomplete
BWN_OUTPUT: Incomplete
BWN_CLI: Incomplete
BWN_WATCH: Incomplete
BWN_LOCALS: Incomplete
BWN_STKVIEW: Incomplete
BWN_CHOOSER: Incomplete
BWN_SHORTCUTCSR: Incomplete
BWN_SHORTCUTWIN: Incomplete
BWN_CPUREGS: Incomplete
BWN_SO_STRUCTS: Incomplete
BWN_SO_OFFSETS: Incomplete
BWN_CMDPALCSR: Incomplete
BWN_CMDPALWIN: Incomplete
BWN_SNIPPETS: Incomplete
BWN_CUSTVIEW: Incomplete
BWN_ADDRWATCH: Incomplete
BWN_PSEUDOCODE: Incomplete
BWN_CALLS_CALLERS: Incomplete
BWN_CALLS_CALLEES: Incomplete
BWN_MDVIEWCSR: Incomplete
BWN_DISASM_ARROWS: Incomplete
BWN_CV_LINE_INFOS: Incomplete
BWN_SRCPTHMAP_CSR: Incomplete
BWN_SRCPTHUND_CSR: Incomplete
BWN_UNDOHIST: Incomplete
BWN_SNIPPETS_CSR: Incomplete
BWN_SCRIPTS_CSR: Incomplete
BWN_BOOKMARKS: Incomplete
BWN_TILIST: Incomplete
BWN_STACK: Incomplete
BWN_DISASMS: Incomplete
BWN_DUMPS: Incomplete
BWN_SEARCHS: Incomplete
IWID_EXPORTS: Incomplete
IWID_IMPORTS: Incomplete
IWID_NAMES: Incomplete
IWID_FUNCS: Incomplete
IWID_STRINGS: Incomplete
IWID_SEGS: Incomplete
IWID_SEGREGS: Incomplete
IWID_SELS: Incomplete
IWID_SIGNS: Incomplete
IWID_TILS: Incomplete
IWID_LOCTYPS: Incomplete
IWID_CALLS: Incomplete
IWID_PROBS: Incomplete
IWID_BPTS: Incomplete
IWID_THREADS: Incomplete
IWID_MODULES: Incomplete
IWID_TRACE: Incomplete
IWID_CALL_STACK: Incomplete
IWID_XREFS: Incomplete
IWID_SEARCH: Incomplete
IWID_FRAME: Incomplete
IWID_NAVBAND: Incomplete
IWID_ENUMS: Incomplete
IWID_STRUCTS: Incomplete
IWID_DISASM: Incomplete
IWID_DUMP: Incomplete
IWID_NOTEPAD: Incomplete
IWID_OUTPUT: Incomplete
IWID_CLI: Incomplete
IWID_WATCH: Incomplete
IWID_LOCALS: Incomplete
IWID_STKVIEW: Incomplete
IWID_CHOOSER: Incomplete
IWID_SHORTCUTCSR: Incomplete
IWID_SHORTCUTWIN: Incomplete
IWID_CPUREGS: Incomplete
IWID_SO_STRUCTS: Incomplete
IWID_SO_OFFSETS: Incomplete
IWID_CMDPALCSR: Incomplete
IWID_CMDPALWIN: Incomplete
IWID_SNIPPETS: Incomplete
IWID_CUSTVIEW: Incomplete
IWID_ADDRWATCH: Incomplete
IWID_PSEUDOCODE: Incomplete
IWID_CALLS_CALLERS: Incomplete
IWID_CALLS_CALLEES: Incomplete
IWID_MDVIEWCSR: Incomplete
IWID_DISASM_ARROWS: Incomplete
IWID_CV_LINE_INFOS: Incomplete
IWID_SRCPTHMAP_CSR: Incomplete
IWID_SRCPTHUND_CSR: Incomplete
IWID_UNDOHIST: Incomplete
IWID_SNIPPETS_CSR: Incomplete
IWID_SCRIPTS_CSR: Incomplete
IWID_BOOKMARKS: Incomplete
IWID_TILIST: Incomplete
IWID_ALL: Incomplete
IWID_STACK: Incomplete
IWID_DISASMS: Incomplete
IWID_DUMPS: Incomplete
IWID_SEARCHS: Incomplete

def is_chooser_widget(*args) -> bool: ...

IDA_DEBUG_DREFS: Incomplete
IDA_DEBUG_OFFSET: Incomplete
IDA_DEBUG_FLIRT: Incomplete
IDA_DEBUG_IDP: Incomplete
IDA_DEBUG_LDR: Incomplete
IDA_DEBUG_PLUGIN: Incomplete
IDA_DEBUG_IDS: Incomplete
IDA_DEBUG_CONFIG: Incomplete
IDA_DEBUG_CHECKMEM: Incomplete
IDA_DEBUG_LICENSE: Incomplete
IDA_DEBUG_DEMANGLE: Incomplete
IDA_DEBUG_QUEUE: Incomplete
IDA_DEBUG_ROLLBACK: Incomplete
IDA_DEBUG_ALREADY: Incomplete
IDA_DEBUG_TIL: Incomplete
IDA_DEBUG_NOTIFY: Incomplete
IDA_DEBUG_DEBUGGER: Incomplete
IDA_DEBUG_APPCALL: Incomplete
IDA_DEBUG_SRCDBG: Incomplete
IDA_DEBUG_ACCESSIBILITY: Incomplete
IDA_DEBUG_NETWORK: Incomplete
IDA_DEBUG_INTERNET: Incomplete
IDA_DEBUG_SIMPLEX: Incomplete
IDA_DEBUG_DBGINFO: Incomplete
IDA_DEBUG_LUMINA: Incomplete
IDA_DEBUG_THEMES: Incomplete
IDA_DEBUG_REGEX: Incomplete
IDA_DEBUG_SUBPROC: Incomplete
IDA_DEBUG_ALWAYS: Incomplete
AST_ENABLE_ALWAYS: Incomplete
AST_ENABLE_FOR_IDB: Incomplete
AST_ENABLE_FOR_WIDGET: Incomplete
AST_ENABLE: Incomplete
AST_DISABLE_ALWAYS: Incomplete
AST_DISABLE_FOR_IDB: Incomplete
AST_DISABLE_FOR_WIDGET: Incomplete
AST_DISABLE: Incomplete

def is_action_enabled(*args) -> bool: ...

CH_MODAL: Incomplete
CH_KEEP: Incomplete
CH_MULTI: Incomplete
CH_MULTI_EDIT: Incomplete
CH_NOBTNS: Incomplete
CH_ATTRS: Incomplete
CH_UNUSED: Incomplete
CH_FORCE_DEFAULT: Incomplete
CH_CAN_INS: Incomplete
CH_CAN_DEL: Incomplete
CH_CAN_EDIT: Incomplete
CH_CAN_REFRESH: Incomplete
CH_QFLT: Incomplete
CH_QFTYP_SHIFT: Incomplete
CH_QFTYP_DEFAULT: Incomplete
CH_QFTYP_NORMAL: Incomplete
CH_QFTYP_WHOLE_WORDS: Incomplete
CH_QFTYP_REGEX: Incomplete
CH_QFTYP_FUZZY: Incomplete
CH_QFTYP_MASK: Incomplete
CH_NO_STATUS_BAR: Incomplete
CH_RESTORE: Incomplete
CH_RENAME_IS_EDIT: Incomplete
CH_BUILTIN_SHIFT: Incomplete
CH_BUILTIN_MASK: Incomplete
CH_HAS_DIRTREE: Incomplete
CH_TM_NO_TREE: Incomplete
CH_TM_FOLDERS_ONLY: Incomplete
CH_TM_FULL_TREE: Incomplete
CH_TM_SHIFT: Incomplete
CH_TM_MASK: Incomplete
CH_HAS_DIFF: Incomplete
CH_NO_SORT: Incomplete
CH_NO_FILTER: Incomplete
CH_NON_PERSISTED_TREE: Incomplete
CH2_LAZY_LOADED: Incomplete
CH2_HAS_INODE2INDEX: Incomplete
CHCOL_PLAIN: Incomplete
CHCOL_PATH: Incomplete
CHCOL_HEX: Incomplete
CHCOL_DEC: Incomplete
CHCOL_EA: Incomplete
CHCOL_FNAME: Incomplete
CHCOL_FORMAT: Incomplete
CHCOL_DEFHIDDEN: Incomplete
CHCOL_DRAGHINT: Incomplete
CHCOL_INODENAME: Incomplete
CHITEM_BOLD: Incomplete
CHITEM_ITALIC: Incomplete
CHITEM_UNDER: Incomplete
CHITEM_STRIKE: Incomplete
CHITEM_GRAY: Incomplete
CHOOSER_NOMAINMENU: Incomplete
CHOOSER_NOSTATUSBAR: Incomplete

class chooser_item_attrs_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    flags: Incomplete
    color: Incomplete
    def __init__(self, *args) -> None: ...
    def reset(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

cvar: Incomplete

class chooser_row_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    texts: Incomplete
    attrs: Incomplete
    icon: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

GCRF_HIGH_BIT: Incomplete
GCRF_HEADER: Incomplete
GCRF_SELECTION: Incomplete
GCRF_CURRENT: Incomplete
GCRF_ALL: Incomplete

class chooser_stdact_desc_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    version: Incomplete
    label: Incomplete
    tooltip: Incomplete
    icon: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def ucb(self, *args) -> action_state_t: ...
    def __disown__(self): ...

class chooser_base_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    x0: Incomplete
    y0: Incomplete
    x1: Incomplete
    y1: Incomplete
    width: Incomplete
    height: Incomplete
    title: Incomplete
    columns: Incomplete
    widths: Incomplete
    header: Incomplete
    icon: Incomplete
    POPUP_INS: Incomplete
    POPUP_DEL: Incomplete
    POPUP_EDIT: Incomplete
    POPUP_REFRESH: Incomplete
    NSTDPOPUPS: Incomplete
    popup_names: Incomplete
    deflt_col: Incomplete
    def is_same(self, *args) -> bool: ...
    def can_ins(self, *args) -> bool: ...
    def can_del(self, *args) -> bool: ...
    def can_edit(self, *args) -> bool: ...
    def can_refresh(self, *args) -> bool: ...
    def popup_allowed(self, *args) -> bool: ...
    def is_status_bar_hidden(self, *args) -> bool: ...
    def should_restore_geometry(self, *args) -> bool: ...
    def is_modal(self, *args) -> bool: ...
    def is_multi(self, *args) -> bool: ...
    def ask_item_attrs(self, *args) -> bool: ...
    def is_force_default(self, *args) -> bool: ...
    def get_builtin_number(self, *args) -> uint: ...
    def is_quick_filter_visible_initially(self, *args) -> bool: ...
    def get_quick_filter_initial_mode(self, *args) -> int: ...
    def has_dirtree(self, *args) -> bool: ...
    def has_diff_capability(self, *args) -> bool: ...
    def can_sort(self, *args) -> bool: ...
    def can_filter(self, *args) -> bool: ...
    def should_rename_trigger_edit(self, *args) -> bool: ...
    def is_dirtree_persisted(self, *args) -> bool: ...
    def is_lazy_loaded(self, *args) -> bool: ...
    def has_inode_to_index(self, *args) -> bool: ...
    def get_count(self, *args) -> size_t: ...
    def get_ea(self, *args) -> ea_t: ...
    def get_row(self, *args) -> 'PyObject *': ...

nat_lib: Incomplete
nat_fun: Incomplete
nat_cod: Incomplete
nat_dat: Incomplete
nat_und: Incomplete
nat_ext: Incomplete
nat_err: Incomplete
nat_gap: Incomplete
nat_cur: Incomplete
nat_auto: Incomplete
nat_lum: Incomplete
nat_hlo: Incomplete
nat_last: Incomplete
CVH_USERDATA: Incomplete
CVH_KEYDOWN: Incomplete
CVH_POPUP: Incomplete
CVH_DBLCLICK: Incomplete
CVH_CURPOS: Incomplete
CVH_CLOSE: Incomplete
CVH_CLICK: Incomplete
CVH_QT_AWARE: Incomplete
CVH_HELP: Incomplete
CVH_MOUSEMOVE: Incomplete
CDVH_USERDATA: Incomplete
CDVH_SRCVIEW: Incomplete
CDVH_LINES_CLICK: Incomplete
CDVH_LINES_DBLCLICK: Incomplete
CDVH_LINES_POPUP: Incomplete
CDVH_LINES_DRAWICON: Incomplete
CDVH_LINES_LINENUM: Incomplete
CDVH_LINES_ICONMARGIN: Incomplete
CDVH_LINES_RADIX: Incomplete
CDVH_LINES_ALIGNMENT: Incomplete
VES_SHIFT: Incomplete
VES_ALT: Incomplete
VES_CTRL: Incomplete
VES_MOUSE_LEFT: Incomplete
VES_MOUSE_RIGHT: Incomplete
VES_MOUSE_MIDDLE: Incomplete
VES_META: Incomplete
msg_activated: Incomplete
msg_deactivated: Incomplete
msg_click: Incomplete
msg_dblclick: Incomplete
msg_closed: Incomplete
msg_keydown: Incomplete

class renderer_pos_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    node: Incomplete
    cx: Incomplete
    cy: Incomplete
    sx: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class view_mouse_event_location_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    ea: Incomplete
    item: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class view_mouse_event_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    rtype: Incomplete
    x: Incomplete
    y: Incomplete
    location: Incomplete
    state: Incomplete
    button: Incomplete
    renderer_pos: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

view_activated: Incomplete
view_deactivated: Incomplete
view_keydown: Incomplete
view_click: Incomplete
view_dblclick: Incomplete
view_curpos: Incomplete
view_created: Incomplete
view_close: Incomplete
view_switched: Incomplete
view_mouse_over: Incomplete
view_loc_changed: Incomplete
view_mouse_moved: Incomplete
iek_unknown: Incomplete
iek_shortcut: Incomplete
iek_key_press: Incomplete
iek_key_release: Incomplete
iek_mouse_button_press: Incomplete
iek_mouse_button_release: Incomplete
iek_mouse_wheel: Incomplete

class input_event_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    cb: Incomplete
    kind: Incomplete
    modifiers: Incomplete
    target: Incomplete
    source: Incomplete
    shortcut: Incomplete
    keyboard: Incomplete
    mouse: Incomplete
    def __init__(self, *args) -> None: ...
    def _source_as_size(self, *args) -> size_t: ...
    def _target_as_size(self, *args) -> size_t: ...
    def get_source_QEvent(self): ...
    def get_target_QWidget(self): ...
    __swig_destroy__: Incomplete

class input_event_shortcut_data_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    action_name: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class input_event_keyboard_data_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    key: Incomplete
    text: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class input_event_mouse_data_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    x: Incomplete
    y: Incomplete
    button: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

MFF_FAST: Incomplete
MFF_READ: Incomplete
MFF_WRITE: Incomplete
MFF_NOWAIT: Incomplete

class ui_requests_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

UIJMP_ACTIVATE: Incomplete
UIJMP_DONTPUSH: Incomplete
UIJMP_VIEWMASK: Incomplete
UIJMP_ANYVIEW: Incomplete
UIJMP_IDAVIEW: Incomplete
UIJMP_IDAVIEW_NEW: Incomplete

class action_ctx_base_cur_sel_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    _from: Incomplete
    to: Incomplete
    def __init__(self, *args) -> None: ...
    def reset(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class action_ctx_base_source_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    chooser: Incomplete
    def __init__(self, *args) -> None: ...
    def reset(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class action_ctx_base_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def reset(self, *args) -> None: ...
    widget: Incomplete
    widget_type: Incomplete
    widget_title: Incomplete
    chooser_selection: Incomplete
    action: Incomplete
    cur_flags: Incomplete
    def has_flag(self, *args) -> bool: ...
    cur_ea: Incomplete
    cur_value: Incomplete
    cur_func: Incomplete
    cur_fchunk: Incomplete
    cur_struc: Incomplete
    cur_strmem: Incomplete
    cur_enum: Incomplete
    cur_seg: Incomplete
    cur_sel: Incomplete
    regname: Incomplete
    focus: Incomplete
    graph_selection: Incomplete
    cur_enum_member: Incomplete
    dirtree_selection: Incomplete
    source: Incomplete
    type_ref: Incomplete
    cur_extracted_ea = cur_value
    form: Incomplete
    form_type: Incomplete
    form_title: Incomplete
    __swig_destroy__: Incomplete

ACF_HAS_SELECTION: Incomplete
ACF_XTRN_EA: Incomplete
ACF_HAS_FIELD_DIRTREE_SELECTION: Incomplete
ACF_HAS_SOURCE: Incomplete
ACF_HAS_TYPE_REF: Incomplete
AHF_VERSION: Incomplete
AHF_VERSION_MASK: Incomplete

class action_desc_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    cb: Incomplete
    name: Incomplete
    label: Incomplete
    owner: Incomplete
    shortcut: Incomplete
    tooltip: Incomplete
    icon: Incomplete
    flags: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

ADF_OWN_HANDLER: Incomplete
ADF_NO_UNDO: Incomplete
ADF_OT_MASK: Incomplete
ADF_OT_PLUGIN: Incomplete
ADF_OT_PLUGMOD: Incomplete
ADF_OT_PROCMOD: Incomplete
ADF_GLOBAL: Incomplete
ADF_NO_HIGHLIGHT: Incomplete
ADF_CHECKABLE: Incomplete
ADF_CHECKED: Incomplete
AA_NONE: Incomplete
AA_LABEL: Incomplete
AA_SHORTCUT: Incomplete
AA_TOOLTIP: Incomplete
AA_ICON: Incomplete
AA_STATE: Incomplete
AA_CHECKABLE: Incomplete
AA_CHECKED: Incomplete
AA_VISIBILITY: Incomplete

def cancel_exec_request(*args) -> bool: ...
def cancel_thread_exec_requests(*args) -> int: ...
def get_synced_group(*args) -> 'synced_group_t const *': ...
def banner(*args) -> bool: ...
def is_msg_inited(*args) -> bool: ...
def refresh_idaview(*args) -> None: ...
def refresh_idaview_anyway(*args) -> None: ...
def analyzer_options(*args) -> None: ...
def get_screen_ea(*args) -> ea_t: ...
def get_opnum(*args) -> int: ...
def get_cursor(*args) -> 'int *, int *': ...
def get_output_cursor(*args) -> 'int *, int *': ...
def get_curline(*args) -> 'char const *': ...
def open_url(*args) -> None: ...
def get_hexdump_ea(*args) -> ea_t: ...
def get_key_code(*args) -> ushort: ...
def lookup_key_code(*args) -> ushort: ...
def refresh_navband(*args) -> None: ...
def refresh_chooser(*args) -> bool: ...
def close_chooser(*args) -> bool: ...
def set_dock_pos(*args) -> bool: ...
def get_icon_id_by_name(*args) -> int: ...
def free_custom_icon(*args) -> None: ...

class __qtimer_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def unregister_action(*args) -> bool: ...
def create_toolbar(*args) -> bool: ...
def delete_toolbar(*args) -> bool: ...
def create_menu(*args) -> bool: ...
def delete_menu(*args) -> bool: ...
def attach_action_to_menu(*args) -> bool: ...
def detach_action_from_menu(*args) -> bool: ...
def attach_action_to_toolbar(*args) -> bool: ...
def detach_action_from_toolbar(*args) -> bool: ...
def register_and_attach_to_menu(*args) -> bool: ...
def display_widget(*args) -> None: ...
def close_widget(*args) -> None: ...
def activate_widget(*args) -> None: ...
def find_widget(*args) -> 'TWidget *': ...
def get_current_widget(*args) -> 'TWidget *': ...
def get_widget_type(*args) -> twidget_type_t: ...
def get_widget_title(*args) -> 'qstring *': ...
def custom_viewer_jump(*args) -> bool: ...
def ea_viewer_history_push_and_jump(*args) -> bool: ...
def get_ea_viewer_history_info(*args) -> bool: ...
def refresh_custom_viewer(*args) -> None: ...
def repaint_custom_viewer(*args) -> None: ...
def jumpto(*args) -> bool: ...
def get_custom_viewer_place(*args) -> 'int *, int *': ...
def get_custom_viewer_location(*args) -> bool: ...
def is_idaq(*args) -> bool: ...
def attach_action_to_popup(*args) -> bool: ...
def detach_action_from_popup(*args) -> bool: ...
def update_action_label(*args) -> bool: ...
def update_action_shortcut(*args) -> bool: ...
def update_action_tooltip(*args) -> bool: ...
def update_action_icon(*args) -> bool: ...
def update_action_state(*args) -> bool: ...
def update_action_checkable(*args) -> bool: ...
def update_action_checked(*args) -> bool: ...
def update_action_visibility(*args) -> bool: ...
def get_action_label(*args) -> 'qstring *': ...
def get_action_shortcut(*args) -> 'qstring *': ...
def get_action_tooltip(*args) -> 'qstring *': ...
def get_action_icon(*args) -> 'int *': ...
def get_action_state(*args) -> 'action_state_t *': ...
def get_action_checkable(*args) -> 'bool *': ...
def get_action_checked(*args) -> 'bool *': ...
def get_action_visibility(*args) -> 'bool *': ...
def set_custom_viewer_qt_aware(*args) -> bool: ...
def get_custom_viewer_curline(*args) -> 'char const *': ...
def get_custom_viewer_place_xcoord(*args) -> int: ...
def get_user_input_event(*args) -> bool: ...
def get_output_curline(*args) -> 'qstring *': ...
def get_output_selected_text(*args) -> 'qstring *': ...
def get_current_viewer(*args) -> 'TWidget *': ...
def get_view_renderer_type(*args) -> tcc_renderer_type_t: ...
def set_view_renderer_type(*args) -> None: ...
def create_empty_widget(*args) -> 'TWidget *': ...
def msg_clear(*args) -> None: ...
def msg_save(*args) -> bool: ...
def get_active_modal_widget(*args) -> 'TWidget *': ...
def get_navband_pixel(*args) -> 'bool *': ...
def get_navband_ea(*args) -> ea_t: ...
def get_window_id(*args) -> 'void *': ...
def is_idaview(*args) -> bool: ...
def read_selection(*args) -> bool: ...
def read_range_selection(*args) -> 'ea_t *, ea_t *': ...
def unmark_selection(*args) -> None: ...
def create_code_viewer(*args) -> 'TWidget *': ...
def set_code_viewer_handler(*args) -> 'void *': ...
def set_code_viewer_user_data(*args) -> bool: ...
def get_viewer_user_data(*args) -> 'void *': ...
def get_viewer_place_type(*args) -> tcc_place_type_t: ...
def set_code_viewer_line_handlers(*args) -> None: ...
def set_code_viewer_lines_icon_margin(*args) -> bool: ...
def set_code_viewer_lines_alignment(*args) -> bool: ...
def set_code_viewer_lines_radix(*args) -> bool: ...
def set_code_viewer_is_source(*args) -> bool: ...
def get_tab_size(*args) -> int: ...
def clr_cancelled(*args) -> None: ...
def set_cancelled(*args) -> None: ...
def user_cancelled(*args) -> bool: ...
def ui_load_new_file(*args) -> bool: ...
def ui_run_debugger(*args) -> bool: ...
def load_dbg_dbginfo(*args) -> bool: ...
def add_idc_hotkey(*args) -> int: ...
def set_highlight(*args) -> bool: ...
def open_exports_window(*args) -> 'TWidget *': ...
def open_imports_window(*args) -> 'TWidget *': ...
def open_names_window(*args) -> 'TWidget *': ...
def open_funcs_window(*args) -> 'TWidget *': ...
def open_strings_window(*args) -> 'TWidget *': ...
def open_segments_window(*args) -> 'TWidget *': ...
def open_segregs_window(*args) -> 'TWidget *': ...
def open_selectors_window(*args) -> 'TWidget *': ...
def open_signatures_window(*args) -> 'TWidget *': ...
def open_tils_window(*args) -> 'TWidget *': ...
def open_loctypes_window(*args) -> 'TWidget *': ...
def open_calls_window(*args) -> 'TWidget *': ...
def open_problems_window(*args) -> 'TWidget *': ...
def open_bpts_window(*args) -> 'TWidget *': ...
def open_threads_window(*args) -> 'TWidget *': ...
def open_modules_window(*args) -> 'TWidget *': ...
def open_trace_window(*args) -> 'TWidget *': ...
def open_stack_window(*args) -> 'TWidget *': ...
def open_xrefs_window(*args) -> 'TWidget *': ...
def open_frame_window(*args) -> 'TWidget *': ...
def open_navband_window(*args) -> 'TWidget *': ...
def open_enums_window(*args) -> 'TWidget *': ...
def open_structs_window(*args) -> 'TWidget *': ...
def open_disasm_window(*args) -> 'TWidget *': ...
def open_hexdump_window(*args) -> 'TWidget *': ...
def open_notepad_window(*args) -> 'TWidget *': ...
def open_bookmarks_window(*args) -> 'TWidget *': ...
def sync_sources(*args) -> bool: ...
def choose_til(*args) -> 'qstring *': ...
def choose_entry(*args) -> ea_t: ...
def choose_name(*args) -> ea_t: ...
def choose_stkvar_xref(*args) -> ea_t: ...
def choose_xref(*args) -> ea_t: ...
def choose_func(*args) -> 'func_t *': ...
def choose_segm(*args) -> 'segment_t *': ...
def choose_struct(*args) -> bool: ...
def choose_srcp(*args) -> 'sreg_range_t *': ...
def get_chooser_obj(*args) -> 'void *': ...
def get_chooser_rows(*args) -> bool: ...
def enable_chooser_item_attrs(*args) -> bool: ...
def replace_wait_box(*args) -> None: ...
def beep(*args) -> None: ...
def display_copyright_warning(*args) -> bool: ...
def ask_for_feedback(*args) -> None: ...
def _ask_addr(*args) -> 'ea_t *': ...
def _ask_seg(*args) -> 'sel_t *': ...
def _ask_long(*args) -> 'sval_t *': ...
def error(*args) -> None: ...
def warning(*args) -> None: ...
def info(*args) -> None: ...
def nomem(*args) -> None: ...

ASKBTN_YES: Incomplete
ASKBTN_NO: Incomplete
ASKBTN_CANCEL: Incomplete
ASKBTN_BTN1: Incomplete
ASKBTN_BTN2: Incomplete
ASKBTN_BTN3: Incomplete

def ask_yn(*args) -> int: ...
def ask_buttons(*args) -> int: ...

HIST_SEG: Incomplete
HIST_CMT: Incomplete
HIST_SRCH: Incomplete
HIST_IDENT: Incomplete
HIST_FILE: Incomplete
HIST_TYPE: Incomplete
HIST_CMD: Incomplete
HIST_DIR: Incomplete
HIST_IDENT2: Incomplete

def ask_ident2(*args) -> bool: ...
def ask_file(*args) -> 'char *': ...

class addon_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    cb: Incomplete
    id: Incomplete
    name: Incomplete
    producer: Incomplete
    version: Incomplete
    url: Incomplete
    freeform: Incomplete
    custom_data: Incomplete
    custom_size: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def register_addon(*args) -> int: ...
def addon_count(*args) -> int: ...
def get_addon_info(*args) -> bool: ...
def get_addon_info_idx(*args) -> bool: ...

class strarray_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    code: Incomplete
    text: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

CLNL_RTRIM: Incomplete
CLNL_LTRIM: Incomplete
CLNL_FINDCMT: Incomplete
CLNL_TRIM: Incomplete

def qcleanline(*args) -> 'qstring *': ...
def strarray(*args) -> 'char const *': ...
def ea2str(*args) -> 'qstring *': ...
def str2ea(*args) -> 'uint64 *': ...
def str2ea_ex(*args) -> 'uint64 *': ...

S2EAOPT_NOCALC: Incomplete

def atoea(*args) -> 'uint64 *': ...

IK_CANCEL: Incomplete
IK_BACK: Incomplete
IK_TAB: Incomplete
IK_CLEAR: Incomplete
IK_RETURN: Incomplete
IK_SHIFT: Incomplete
IK_CONTROL: Incomplete
IK_MENU: Incomplete
IK_PAUSE: Incomplete
IK_CAPITAL: Incomplete
IK_KANA: Incomplete
IK_ESCAPE: Incomplete
IK_MODECHANGE: Incomplete
IK_SPACE: Incomplete
IK_PRIOR: Incomplete
IK_NEXT: Incomplete
IK_END: Incomplete
IK_HOME: Incomplete
IK_LEFT: Incomplete
IK_UP: Incomplete
IK_RIGHT: Incomplete
IK_DOWN: Incomplete
IK_SELECT: Incomplete
IK_PRINT: Incomplete
IK_EXECUTE: Incomplete
IK_SNAPSHOT: Incomplete
IK_INSERT: Incomplete
IK_DELETE: Incomplete
IK_HELP: Incomplete
IK_LWIN: Incomplete
IK_RWIN: Incomplete
IK_APPS: Incomplete
IK_SLEEP: Incomplete
IK_NUMPAD0: Incomplete
IK_NUMPAD1: Incomplete
IK_NUMPAD2: Incomplete
IK_NUMPAD3: Incomplete
IK_NUMPAD4: Incomplete
IK_NUMPAD5: Incomplete
IK_NUMPAD6: Incomplete
IK_NUMPAD7: Incomplete
IK_NUMPAD8: Incomplete
IK_NUMPAD9: Incomplete
IK_MULTIPLY: Incomplete
IK_ADD: Incomplete
IK_SEPARATOR: Incomplete
IK_SUBTRACT: Incomplete
IK_DECIMAL: Incomplete
IK_DIVIDE: Incomplete
IK_F1: Incomplete
IK_F2: Incomplete
IK_F3: Incomplete
IK_F4: Incomplete
IK_F5: Incomplete
IK_F6: Incomplete
IK_F7: Incomplete
IK_F8: Incomplete
IK_F9: Incomplete
IK_F10: Incomplete
IK_F11: Incomplete
IK_F12: Incomplete
IK_F13: Incomplete
IK_F14: Incomplete
IK_F15: Incomplete
IK_F16: Incomplete
IK_F17: Incomplete
IK_F18: Incomplete
IK_F19: Incomplete
IK_F20: Incomplete
IK_F21: Incomplete
IK_F22: Incomplete
IK_F23: Incomplete
IK_F24: Incomplete
IK_NUMLOCK: Incomplete
IK_SCROLL: Incomplete
IK_OEM_FJ_MASSHOU: Incomplete
IK_OEM_FJ_TOUROKU: Incomplete
IK_LSHIFT: Incomplete
IK_RSHIFT: Incomplete
IK_LCONTROL: Incomplete
IK_RCONTROL: Incomplete
IK_LMENU: Incomplete
IK_RMENU: Incomplete
IK_BROWSER_BACK: Incomplete
IK_BROWSER_FORWARD: Incomplete
IK_BROWSER_REFRESH: Incomplete
IK_BROWSER_STOP: Incomplete
IK_BROWSER_SEARCH: Incomplete
IK_BROWSER_FAVORITES: Incomplete
IK_BROWSER_HOME: Incomplete
IK_VOLUME_MUTE: Incomplete
IK_VOLUME_DOWN: Incomplete
IK_VOLUME_UP: Incomplete
IK_MEDIA_NEXT_TRACK: Incomplete
IK_MEDIA_PREV_TRACK: Incomplete
IK_MEDIA_STOP: Incomplete
IK_MEDIA_PLAY_PAUSE: Incomplete
IK_LAUNCH_MAIL: Incomplete
IK_LAUNCH_MEDIA_SELECT: Incomplete
IK_LAUNCH_APP1: Incomplete
IK_LAUNCH_APP2: Incomplete
IK_OEM_1: Incomplete
IK_OEM_PLUS: Incomplete
IK_OEM_COMMA: Incomplete
IK_OEM_MINUS: Incomplete
IK_OEM_PERIOD: Incomplete
IK_OEM_2: Incomplete
IK_OEM_3: Incomplete
IK_OEM_4: Incomplete
IK_OEM_5: Incomplete
IK_OEM_6: Incomplete
IK_OEM_7: Incomplete
IK_OEM_102: Incomplete
IK_PLAY: Incomplete
IK_ZOOM: Incomplete
IK_OEM_CLEAR: Incomplete
CB_INIT: Incomplete
CB_YES: Incomplete
CB_CLOSE: Incomplete
CB_INVISIBLE: Incomplete
CB_DESTROYING: Incomplete
CB_NO: Incomplete
CB_CANCEL: Incomplete

def get_user_strlist_options(*args) -> None: ...
def del_idc_hotkey(*args) -> bool: ...
def choose_struc(*args) -> 'struc_t *': ...
def choose_enum(*args) -> enum_t: ...
def choose_enum_by_value(*args) -> 'uchar *': ...

class disasm_text_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'disasm_line_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'disasm_line_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'disasm_line_t *': ...
    def inject(self, *args) -> None: ...
    def begin(self, *args) -> 'qvector< disasm_line_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< disasm_line_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< disasm_line_t >::iterator': ...
    def erase(self, *args) -> 'qvector< disasm_line_t >::iterator': ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'disasm_line_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

def load_custom_icon(file_name: Incomplete | None = None, data: Incomplete | None = None, format: Incomplete | None = None): ...
def ask_long(defval, format): ...
def ask_addr(defval, format): ...
def ask_seg(defval, format): ...
def ask_ident(defval, format): ...

class action_handler_t:
    def __init__(self) -> None: ...
    def activate(self, ctx): ...
    def update(self, ctx) -> None: ...

class quick_widget_commands_t:
    class _cmd_t:
        caption: Incomplete
        flags: Incomplete
        menu_index: Incomplete
        icon: Incomplete
        emb: Incomplete
        shortcut: Incomplete
        def __init__(self, caption, flags, menu_index, icon, emb, shortcut) -> None: ...
    class _ah_t(action_handler_t):
        parent: Incomplete
        cmd_id: Incomplete
        def __init__(self, parent, cmd_id) -> None: ...
        def activate(self, ctx) -> None: ...
        def update(self, ctx): ...
    callback: Incomplete
    cmds: Incomplete
    def __init__(self, callback) -> None: ...
    def add(self, caption, flags, menu_index, icon, emb, shortcut): ...
    def populate_popup(self, widget, popup) -> None: ...

class disabled_script_timeout_t:
    was_timeout: Incomplete
    def __enter__(self) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, tb: types.TracebackType | None) -> None: ...

SETMENU_IF_ENABLED: int
CHOOSER_NO_SELECTION: Incomplete
CHOOSER_MULTI_SELECTION: Incomplete
CHOOSER_POPUP_MENU: Incomplete
CHOOSER_MENU_EDIT: Incomplete
CHOOSER_MENU_JUMP: Incomplete
CHOOSER_MENU_SEARCH: Incomplete

def choose_find(*args) -> 'PyObject *': ...
def choose_refresh(*args) -> None: ...
def choose_close(*args) -> None: ...
def choose_get_widget(*args) -> 'TWidget *': ...
def choose_choose(*args) -> 'PyObject *': ...
def choose_activate(*args) -> None: ...
def choose_create_embedded_chobj(*args) -> 'PyObject *': ...
def get_chooser_data(*args) -> 'PyObject *': ...

CH_NOIDB: Incomplete

class Choose:
    CH_MODAL: Incomplete
    CH_MULTI: Incomplete
    CH_NOBTNS: Incomplete
    CH_ATTRS: Incomplete
    CH_NOIDB: Incomplete
    CH_FORCE_DEFAULT: Incomplete
    CH_CAN_INS: Incomplete
    CH_CAN_DEL: Incomplete
    CH_CAN_EDIT: Incomplete
    CH_CAN_REFRESH: Incomplete
    CH_QFLT: Incomplete
    CH_QFTYP_SHIFT: Incomplete
    CH_QFTYP_DEFAULT: Incomplete
    CH_QFTYP_NORMAL: Incomplete
    CH_QFTYP_WHOLE_WORDS: Incomplete
    CH_QFTYP_REGEX: Incomplete
    CH_QFTYP_FUZZY: Incomplete
    CH_QFTYP_MASK: Incomplete
    CH_NO_STATUS_BAR: Incomplete
    CH_RESTORE: Incomplete
    CH_RENAME_IS_EDIT: Incomplete
    CH_BUILTIN_SHIFT: Incomplete
    CH_BUILTIN_MASK: Incomplete
    CH_HAS_DIRTREE: Incomplete
    CH_HAS_DIFF: Incomplete
    CHCOL_PLAIN: Incomplete
    CHCOL_PATH: Incomplete
    CHCOL_HEX: Incomplete
    CHCOL_DEC: Incomplete
    CHCOL_EA: Incomplete
    CHCOL_FNAME: Incomplete
    CHCOL_FORMAT: Incomplete
    CHCOL_DEFHIDDEN: Incomplete
    CHCOL_DRAGHINT: Incomplete
    CHCOL_INODENAME: Incomplete
    NO_SELECTION: int
    EMPTY_CHOOSER: int
    ALREADY_EXISTS: int
    NO_ATTR: int
    NOTHING_CHANGED: int
    ALL_CHANGED: int
    SELECTION_CHANGED: int
    class UI_Hooks_Trampoline(UI_Hooks):
        v: Incomplete
        def __init__(self, v) -> None: ...
        def populating_widget_popup(self, widget, popup_handle) -> None: ...
    title: Incomplete
    flags: Incomplete
    flags2: Incomplete
    cols: Incomplete
    deflt: Incomplete
    popup_names: Incomplete
    icon: Incomplete
    x1: Incomplete
    y1: Incomplete
    x2: Incomplete
    y2: Incomplete
    embedded: Incomplete
    width: Incomplete
    height: Incomplete
    forbidden_cb: Incomplete
    ui_hooks_trampoline: Incomplete
    _quick_commands: Incomplete
    def __init__(self, title, cols, flags: int = 0, popup_names: Incomplete | None = None, icon: int = -1, x1: int = -1, y1: int = -1, x2: int = -1, y2: int = -1, deflt: Incomplete | None = None, embedded: bool = False, width: Incomplete | None = None, height: Incomplete | None = None, forbidden_cb: int = 0, flags2: int = 0) -> None: ...
    def Embedded(self, create_chobj: bool = False): ...
    def GetEmbSelection(self) -> None: ...
    def Show(self, modal: bool = False): ...
    def Activate(self): ...
    def Refresh(self): ...
    def Close(self) -> None: ...
    def GetWidget(self): ...
    def adjust_last_item(self, n): ...
    def AddCommand(self, caption, flags=..., menu_index: int = -1, icon: int = -1, emb: Incomplete | None = None, shortcut: Incomplete | None = None): ...
    def OnPopup(self, widget, popup_handle) -> None: ...
    def OnInit(self) -> None: ...
    def OnGetSize(self) -> None: ...
    def OnGetLine(self, n) -> None: ...
    def OnGetIcon(self, n) -> None: ...
    def OnGetLineAttr(self, n) -> None: ...
    def OnInsertLine(self, sel) -> None: ...
    def OnDeleteLine(self, sel) -> None: ...
    def OnEditLine(self, sel) -> None: ...
    def OnSelectLine(self, sel) -> None: ...
    def OnSelectionChange(self, sel) -> None: ...
    def OnRefresh(self, sel) -> None: ...
    def OnClose(self) -> None: ...
    def OnGetEA(self, n) -> None: ...
    def OnGetDirTree(self) -> None: ...
    def OnIndexToInode(self, n) -> None: ...
    def OnIndexToDiffpos(self, n) -> None: ...
    def OnLazyLoadDir(self, path) -> None: ...

def textctrl_info_t_assign(*args) -> bool: ...
def textctrl_info_t_set_text(*args) -> bool: ...
def textctrl_info_t_get_text(*args) -> 'char const *': ...
def textctrl_info_t_set_flags(*args) -> bool: ...
def textctrl_info_t_get_flags(*args) -> 'unsigned int': ...
def textctrl_info_t_set_tabsize(*args) -> bool: ...
def textctrl_info_t_get_tabsize(*args) -> 'unsigned int': ...
def formchgcbfa_enable_field(*args) -> bool: ...
def formchgcbfa_show_field(*args) -> bool: ...
def formchgcbfa_move_field(*args) -> bool: ...
def formchgcbfa_get_focused_field(*args) -> int: ...
def formchgcbfa_set_focused_field(*args) -> bool: ...
def formchgcbfa_refresh_field(*args) -> None: ...
def formchgcbfa_close(*args) -> None: ...
def formchgcbfa_get_field_value(*args) -> 'PyObject *': ...
def formchgcbfa_set_field_value(*args) -> bool: ...
def py_get_ask_form(*args) -> size_t: ...
def py_get_open_form(*args) -> size_t: ...
def py_register_compiled_form(*args) -> None: ...
def py_unregister_compiled_form(*args) -> None: ...

_BUTTONCB_T: Incomplete
_FORMCHGCB_T: Incomplete

class textctrl_info_t(ida_idaapi.py_clinked_object_t):
    TXTF_AUTOINDENT: int
    TXTF_ACCEPTTABS: int
    TXTF_READONLY: int
    TXTF_SELECTED: int
    TXTF_MODIFIED: int
    TXTF_FIXEDFONT: int
    text: Incomplete
    flags: Incomplete
    tabsize: Incomplete
    def __init__(self, text: str = '', flags: int = 0, tabsize: int = 0) -> None: ...
    def _create_clink(self): ...
    def _del_clink(self, lnk): ...
    def _get_clink_ptr(self): ...
    def assign(self, other): ...
    def __set_text(self, s): ...
    def __get_text(self): ...
    def __set_flags__(self, flags): ...
    def __get_flags__(self): ...
    def __set_tabsize__(self, tabsize): ...
    def __get_tabsize__(self): ...
    value: Incomplete

class Form:
    FT_ASCII: str
    FT_SEG: str
    FT_HEX: str
    FT_SHEX: str
    FT_COLOR: str
    FT_ADDR: str
    FT_UINT64: str
    FT_INT64: str
    FT_RAWHEX: str
    FT_FILE: str
    FT_DEC: str
    FT_OCT: str
    FT_BIN: str
    FT_CHAR: str
    FT_IDENT: str
    FT_BUTTON: str
    FT_DIR: str
    FT_TYPE: str
    _FT_USHORT: str
    FT_FORMCHG: str
    FT_ECHOOSER: str
    FT_MULTI_LINE_TEXT: str
    FT_DROPDOWN_LIST: str
    FT_HTML_LABEL: str
    FT_CHKGRP: str
    FT_CHKGRP2: str
    FT_RADGRP: str
    FT_RADGRP2: str
    @staticmethod
    def create_string_buffer(value, size: Incomplete | None = None): ...
    @staticmethod
    def fieldtype_to_ctype(tp, i64: bool = False): ...
    class NumericArgument:
        DefI64: bool
        arg: Incomplete
        def __init__(self, tp, value) -> None: ...
        def __set_value(self, v) -> None: ...
        value: Incomplete
    class StringArgument:
        size: Incomplete
        arg: Incomplete
        def __init__(self, size: Incomplete | None = None, value: Incomplete | None = None) -> None: ...
        def __get_value(self): ...
        def __set_value(self, v) -> None: ...
        value: Incomplete
    class Control:
        id: int
        input_field_index: Incomplete
        arg: Incomplete
        form: Incomplete
        form_hasattr: bool
        def __init__(self) -> None: ...
        def get_tag(self) -> None: ...
        def get_arg(self): ...
        def free(self) -> None: ...
        def is_input_field(self): ...
    class LabelControl(Control):
        tp: Incomplete
        def __init__(self, tp) -> None: ...
        def get_tag(self): ...
    class StringLabel(LabelControl):
        size: Incomplete
        arg: Incomplete
        def __init__(self, value, tp: Incomplete | None = None, size=...) -> None: ...
    class NumericLabel(LabelControl, NumericArgument):
        def __init__(self, value, tp: Incomplete | None = None) -> None: ...
    class GroupItemControl(Control):
        tag: Incomplete
        parent: Incomplete
        pos: int
        def __init__(self, tag, parent) -> None: ...
        def assign_pos(self) -> None: ...
        def get_tag(self): ...
        def is_input_field(self): ...
    class ChkGroupItemControl(GroupItemControl):
        def __init__(self, tag, parent) -> None: ...
        def __get_value(self): ...
        def __set_value(self, v) -> None: ...
        checked: Incomplete
    class RadGroupItemControl(GroupItemControl):
        def __init__(self, tag, parent) -> None: ...
        def __get_value(self): ...
        def __set_value(self, v) -> None: ...
        selected: Incomplete
    class GroupControl(Control, NumericArgument):
        children_names: Incomplete
        tag: Incomplete
        def __init__(self, children_names, tag, value: int = 0) -> None: ...
        childpos: int
        def _reset(self) -> None: ...
        def next_child_pos(self): ...
        def get_tag(self): ...
    class ChkGroupControl(GroupControl):
        ItemClass: Incomplete
        def __init__(self, children_names, value: int = 0, secondary: bool = False) -> None: ...
    class RadGroupControl(GroupControl):
        ItemClass: Incomplete
        def __init__(self, children_names, value: int = 0, secondary: bool = False) -> None: ...
    class InputControl(Control):
        tp: Incomplete
        width: Incomplete
        swidth: Incomplete
        hlp: Incomplete
        is_relative_offset: Incomplete
        def __init__(self, tp, width, swidth, hlp: Incomplete | None = None, is_relative_offset: bool = False) -> None: ...
        def get_tag(self): ...
        def is_input_field(self): ...
    class NumericInput(InputControl, NumericArgument):
        def __init__(self, tp: Incomplete | None = None, value: int = 0, width: int = 50, swidth: int = 10, hlp: Incomplete | None = None, is_relative_offset: bool = False) -> None: ...
    class ColorInput(NumericInput):
        def __init__(self, value: int = 0) -> None: ...
    class StringInput(InputControl, StringArgument):
        def __init__(self, tp: Incomplete | None = None, width=..., swidth: int = 40, hlp: Incomplete | None = None, value: Incomplete | None = None, size: Incomplete | None = None) -> None: ...
    class FileInput(StringInput):
        def __init__(self, width: int = 512, swidth: int = 80, save: bool = False, open: bool = False, hlp: Incomplete | None = None, value: Incomplete | None = None) -> None: ...
    class DirInput(StringInput):
        def __init__(self, width: int = 512, swidth: int = 80, hlp: Incomplete | None = None, value: Incomplete | None = None) -> None: ...
    class ButtonInput(InputControl):
        handler: Incomplete
        arg: Incomplete
        def __init__(self, handler, code: str = '', swidth: str = '', hlp: Incomplete | None = None) -> None: ...
        def helper_cb(self, button_code, p_fa): ...
        def is_input_field(self): ...
    class FormChangeCb(Control):
        handler: Incomplete
        arg: Incomplete
        def __init__(self, handler) -> None: ...
        def helper_cb(self, fid, p_fa): ...
        def get_tag(self): ...
        def free(self) -> None: ...
    class EmbeddedChooserControl(InputControl):
        selobj: Incomplete
        arg: Incomplete
        chooser: Incomplete
        size: int
        def __init__(self, chooser: Incomplete | None = None, swidth: int = 40, hlp: Incomplete | None = None) -> None: ...
        value: Incomplete
        def __get_selection__(self): ...
        selection: Incomplete
        def free(self) -> None: ...
    class DropdownListControl(InputControl, ida_pro._qstrvec_t):
        readonly: Incomplete
        __selval: Incomplete
        arg: Incomplete
        def __init__(self, items=[], readonly: bool = True, selval: int = 0, width: int = 50, swidth: int = 50, hlp: Incomplete | None = None) -> None: ...
        def __set_selval(self, val) -> None: ...
        def __get_selval(self): ...
        value: Incomplete
        selval: Incomplete
        def free(self) -> None: ...
        def set_items(self, items) -> None: ...
    class MultiLineTextControl(InputControl, textctrl_info_t):
        arg: Incomplete
        def __init__(self, text: str = '', flags: int = 0, tabsize: int = 0, width: int = 50, swidth: int = 50, hlp: Incomplete | None = None) -> None: ...
        def free(self) -> None: ...
    form: Incomplete
    controls: Incomplete
    __args: Incomplete
    title: Incomplete
    modal: bool
    openform_flags: int
    def __init__(self, form, controls) -> None: ...
    def Free(self) -> None: ...
    __controls: Incomplete
    __ctrl_id: int
    def _reset(self) -> None: ...
    def __getitem__(self, name): ...
    def Add(self, name, ctrl, mkattr: bool = True) -> None: ...
    def FindControlById(self, id): ...
    @staticmethod
    def _ParseFormTitle(form): ...
    def _AddGroup(self, Group, mkattr: bool = True) -> None: ...
    def AddControls(self, controls, mkattr: bool = True) -> None: ...
    def CompileEx(self, form): ...
    def Compile(self): ...
    def Compiled(self): ...
    def _ChkCompiled(self) -> None: ...
    def Execute(self): ...
    def Open(self) -> None: ...
    def EnableField(self, ctrl, enable): ...
    def ShowField(self, ctrl, show): ...
    def MoveField(self, ctrl, x, y, w, h): ...
    def GetFocusedField(self): ...
    def SetFocusedField(self, ctrl): ...
    def RefreshField(self, ctrl): ...
    def Close(self, close_normally): ...
    def GetControlValue(self, ctrl): ...
    def SetControlValue(self, ctrl, value): ...
    @staticmethod
    def ControlToFieldTypeIdAndSize(ctrl): ...

__ask_form_callable: Incomplete
__open_form_callable: Incomplete

def __call_form_callable(call, *args): ...
def ask_form(*args): ...
def open_form(*args): ...
def install_command_interpreter(*args) -> int: ...
def remove_command_interpreter(*args) -> None: ...

class cli_t(ida_idaapi.pyidc_opaque_object_t):
    __cli_idx: int
    __clink__: Incomplete
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    sname: Incomplete
    lname: Incomplete
    hint: Incomplete
    def register(self, flags: int = 0, sname: Incomplete | None = None, lname: Incomplete | None = None, hint: Incomplete | None = None): ...
    def unregister(self): ...
    def OnExecuteLine(self, line): ...
    def OnKeydown(self, line, x, sellen, vkey, shift) -> None: ...
    def OnCompleteLine(self, prefix, n, line, prefix_start) -> None: ...

class View_Hooks:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def hook(self, *args) -> bool: ...
    def unhook(self, *args) -> bool: ...
    def view_activated(self, *args) -> None: ...
    def view_deactivated(self, *args) -> None: ...
    def view_keydown(self, *args) -> None: ...
    def view_click(self, *args) -> None: ...
    def view_dblclick(self, *args) -> None: ...
    def view_curpos(self, *args) -> None: ...
    def view_created(self, *args) -> None: ...
    def view_close(self, *args) -> None: ...
    def view_switched(self, *args) -> None: ...
    def view_mouse_over(self, *args) -> None: ...
    def view_loc_changed(self, *args) -> None: ...
    def view_mouse_moved(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __disown__(self): ...

class CustomIDAMemo(View_Hooks):
    def __init__(self) -> None: ...
    def _graph_item_tuple(self, ve): ...
    @staticmethod
    def _dummy_cb(*args) -> None: ...
    def _get_cb(self, view, cb_name): ...
    def _get_cb_arity(self, cb): ...
    def view_activated(self, view): ...
    def view_deactivated(self, view): ...
    def view_keydown(self, view, key, state): ...
    def view_click(self, view, ve): ...
    def view_dblclick(self, view, ve): ...
    def view_curpos(self, view, *args): ...
    def view_close(self, view, *args): ...
    def view_switched(self, view, rt): ...
    def view_mouse_over(self, view, ve): ...
    def view_loc_changed(self, view, now, was): ...
    def view_mouse_moved(self, view, ve): ...
    def _OnBind(self, hook) -> None: ...
    def Refresh(self) -> None: ...
    def GetCurrentRendererType(self): ...
    def SetCurrentRendererType(self, rtype): ...
    def SetNodeInfo(self, node_index, node_info, flags): ...
    def SetNodesInfos(self, values) -> None: ...
    def GetNodeInfo(self, *args): ...
    def DelNodesInfos(self, *nodes) -> None: ...
    def CreateGroups(self, groups_infos): ...
    def DeleteGroups(self, groups, new_current: int = -1): ...
    def SetGroupsVisibility(self, groups, expand, new_current: int = -1): ...
    def GetWidget(self): ...
    def GetWidgetAsGraphViewer(self): ...

def pyidag_bind(*args) -> bool: ...
def pyidag_unbind(*args) -> bool: ...

class IDAViewWrapper(CustomIDAMemo):
    _title: Incomplete
    def __init__(self, title) -> None: ...
    def Bind(self): ...
    def Unbind(self): ...

def pyscv_init(*args) -> 'PyObject *': ...
def pyscv_refresh(*args) -> bool: ...
def pyscv_get_current_line(*args) -> 'PyObject *': ...
def pyscv_is_focused(*args) -> bool: ...
def pyscv_count(*args) -> size_t: ...
def pyscv_show(*args) -> bool: ...
def pyscv_close(*args) -> None: ...
def pyscv_jumpto(*args) -> bool: ...
def pyscv_get_line(*args) -> 'PyObject *': ...
def pyscv_get_pos(*args) -> 'PyObject *': ...
def pyscv_clear_lines(*args) -> 'PyObject *': ...
def pyscv_add_line(*args) -> bool: ...
def pyscv_insert_line(*args) -> bool: ...
def pyscv_patch_line(*args) -> bool: ...
def pyscv_del_line(*args) -> bool: ...
def pyscv_get_selection(*args) -> 'PyObject *': ...
def pyscv_get_current_word(*args) -> 'PyObject *': ...
def pyscv_edit_line(*args) -> bool: ...
def pyscv_get_widget(*args) -> 'TWidget *': ...

class simplecustviewer_t:
    class UI_Hooks_Trampoline(UI_Hooks):
        v: Incomplete
        def __init__(self, v) -> None: ...
        def populating_widget_popup(self, form, popup_handle) -> None: ...
    __this: Incomplete
    ui_hooks_trampoline: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def __make_sl_arg(line, fgcolor: Incomplete | None = None, bgcolor: Incomplete | None = None): ...
    def OnPopup(self, form, popup_handle) -> None: ...
    title: Incomplete
    def Create(self, title): ...
    def Close(self): ...
    def Show(self): ...
    def Refresh(self): ...
    def RefreshCurrent(self): ...
    def Count(self): ...
    def GetSelection(self): ...
    def ClearLines(self) -> None: ...
    def AddLine(self, line, fgcolor: Incomplete | None = None, bgcolor: Incomplete | None = None): ...
    def InsertLine(self, lineno, line, fgcolor: Incomplete | None = None, bgcolor: Incomplete | None = None): ...
    def EditLine(self, lineno, line, fgcolor: Incomplete | None = None, bgcolor: Incomplete | None = None): ...
    def PatchLine(self, lineno, offs, value): ...
    def DelLine(self, lineno): ...
    def GetLine(self, lineno): ...
    def GetCurrentWord(self, mouse: int = 0): ...
    def GetCurrentLine(self, mouse: int = 0, notags: int = 0): ...
    def GetPos(self, mouse: int = 0): ...
    def GetLineNo(self, mouse: int = 0): ...
    def Jump(self, lineno, x: int = 0, y: int = 0): ...
    def IsFocused(self): ...
    def GetWidget(self): ...

def plgform_new(*args) -> 'PyObject *': ...
def plgform_show(*args) -> bool: ...
def plgform_close(*args) -> None: ...
def plgform_get_widget(*args) -> 'TWidget *': ...

class PluginForm:
    WOPN_MDI: int
    WOPN_TAB: int
    WOPN_RESTORE: Incomplete
    WOPN_ONTOP: int
    WOPN_MENU: int
    WOPN_CENTERED: int
    WOPN_PERSIST: Incomplete
    WOPN_DP_LEFT: Incomplete
    WOPN_DP_TOP: Incomplete
    WOPN_DP_RIGHT: Incomplete
    WOPN_DP_BOTTOM: Incomplete
    WOPN_DP_INSIDE: Incomplete
    WOPN_DP_TAB: Incomplete
    WOPN_DP_BEFORE: Incomplete
    WOPN_DP_FLOATING: Incomplete
    WOPN_DP_SZHINT: Incomplete
    WOPN_DP_INSIDE_BEFORE: Incomplete
    WOPN_DP_TAB_BEFORE: Incomplete
    WOPN_CREATE_ONLY: Incomplete
    __clink__: Incomplete
    def __init__(self) -> None: ...
    def Show(self, caption, options: int = 0): ...
    @staticmethod
    def _ensure_widget_deps(ctx) -> None: ...
    VALID_CAPSULE_NAME: bytes
    @staticmethod
    def TWidgetToPyQtWidget(tw, ctx=...): ...
    FormToPyQtWidget = TWidgetToPyQtWidget
    @staticmethod
    def QtWidgetToTWidget(w, ctx=...): ...
    @staticmethod
    def TWidgetToPySideWidget(tw, ctx=...): ...
    FormToPySideWidget = TWidgetToPySideWidget
    def OnCreate(self, form) -> None: ...
    def OnClose(self, form) -> None: ...
    def Close(self, options): ...
    def GetWidget(self): ...
    WCLS_SAVE: Incomplete
    WCLS_NO_CONTEXT: Incomplete
    WCLS_DONT_SAVE_SIZE: Incomplete
    WCLS_DELETE_LATER: Incomplete
    WCLS_CLOSE_LATER = WCLS_DELETE_LATER
