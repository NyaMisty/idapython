# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from _typeshed import Incomplete
from collections.abc import Generator

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete
BADADDR: Incomplete
BADADDR32: Incomplete
BADADDR64: Incomplete
BADSEL: Incomplete
SIZE_MAX: Incomplete
__EA64__: Incomplete
integer_types: Incomplete
string_types: Incomplete
long_type = long
long_type = int

def require(modulename, package: Incomplete | None = None) -> None: ...
def _replace_module_function(replacement) -> None: ...
def replfun(func): ...

SEEK_SET: int
SEEK_CUR: int
SEEK_END: int
PLUGIN_MOD: int
PLUGIN_DRAW: int
PLUGIN_SEG: int
PLUGIN_UNL: int
PLUGIN_HIDE: int
PLUGIN_DBG: int
PLUGIN_PROC: int
PLUGIN_FIX: int
PLUGIN_MULTI: int
PLUGIN_SKIP: int
PLUGIN_OK: int
PLUGIN_KEEP: int
PY_ICID_INT64: int
PY_ICID_BYREF: int
PY_ICID_OPAQUE: int
ST_OVER_DEBUG_SEG: int
ST_OVER_LIB_FUNC: int

class pyidc_opaque_object_t:
    __idc_cvt_id__ = PY_ICID_OPAQUE

class py_clinked_object_t(pyidc_opaque_object_t):
    __static_clink__: Incomplete
    __clink__: Incomplete
    def __init__(self, lnk: Incomplete | None = None) -> None: ...
    def __del__(self) -> None: ...
    def _free(self) -> None: ...
    def copy(self): ...
    def _create_clink(self) -> None: ...
    def _del_clink(self, lnk) -> None: ...
    def _get_clink_ptr(self) -> None: ...
    def assign(self, other) -> None: ...
    clink: Incomplete
    clink_ptr: Incomplete

class object_t:
    __dict__: Incomplete
    def __init__(self, **kwds) -> None: ...
    def __getitem__(self, idx): ...

def _qvector_front(self): ...
def _qvector_back(self): ...
def _bounded_getitem_iterator(self) -> Generator[Incomplete, None, None]: ...

class plugin_t(pyidc_opaque_object_t):
    def run(self, arg) -> None: ...
    def term(self) -> None: ...

class plugmod_t(pyidc_opaque_object_t): ...

class pyidc_cvt_helper__:
    __idc_cvt_id__: Incomplete
    value: Incomplete
    def __init__(self, cvt_id, value) -> None: ...
    __idc_cvt_value__: Incomplete
    def __set_value(self, v) -> None: ...
    def __get_value(self): ...

class PyIdc_cvt_int64__(pyidc_cvt_helper__):
    def __init__(self, v) -> None: ...
    __op_table: Incomplete
    def __op(self, op_n, other, rev: bool = False): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __div__(self, other): ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...
    def __rmul__(self, other): ...
    def __rdiv__(self, other): ...

class PyIdc_cvt_refclass__(pyidc_cvt_helper__):
    def __init__(self, v) -> None: ...
    def cstr(self): ...

def as_cstr(val): ...
def as_UTF16(s): ...
as_unicode = as_UTF16

def as_uint32(v): ...
def as_int32(v): ...
def as_signed(v, nbits: int = 32): ...
def TRUNC(ea): ...
def copy_bits(v, s, e: int = -1): ...

__struct_unpack_table: Incomplete

def struct_unpack(buffer, signed: bool = False, offs: int = 0): ...
def IDAPython_ExecSystem(cmd): ...
def IDAPython_FormatExc(etype, value: Incomplete | None = None, tb: Incomplete | None = None, limit: Incomplete | None = None): ...
def IDAPython_ExecScript(path, g, print_error: bool = True): ...
def IDAPython_LoadProcMod(path, g, print_error: bool = True): ...
def IDAPython_UnLoadProcMod(script, g, print_error: bool = True): ...

class __IDAPython_Completion_Util:
    def __init__(self) -> None: ...
    def debug(self, *args) -> None: ...
    def dir_namespace(self, m, prefix): ...
    def maybe_extend_syntactically(self, ns, name, line, syntax_char): ...
    def get_candidates(self, qname, line, match_syntax_char): ...
    QNAME_PAT: Incomplete
    def __call__(self, line, x): ...

IDAPython_Completion: Incomplete

def _listify_types(*classes) -> None: ...

NW_OPENIDB: int
NW_CLOSEIDB: int
NW_INITIDA: int
NW_TERMIDA: int
NW_REMOVE: int
_notify_when_dispatcher: Incomplete

def notify_when(when, callback): ...
def __install_excepthook(): ...

class IDAPython_displayhook:
    orig_displayhook: Incomplete
    def __init__(self) -> None: ...
    def format_seq(self, num_printer, storage, item, opn, cls) -> None: ...
    def format_item(self, num_printer, storage, item) -> None: ...
    def _print_hex(self, x): ...
    def displayhook(self, item) -> None: ...

_IDAPython_displayhook: Incomplete

def _make_one_time_warning_message(bad_attr, new_attr): ...
def _make_missed_695bwcompat_property(bad_attr, new_attr, has_setter): ...

HBF_CALL_WITH_NEW_EXEC: Incomplete
HBF_VOLATILE_METHOD_SET: Incomplete

def parse_command_line3(*args) -> 'PyObject *': ...
def get_inf_structure(*args) -> 'idainfo *': ...
def set_script_timeout(*args) -> int: ...
def disable_script_timeout(*args) -> None: ...
def enable_extlang_python(*args) -> None: ...
def enable_python_cli(*args) -> None: ...
def format_basestring(*args) -> 'PyObject *': ...
def pygc_refresh(*args) -> None: ...
def pygc_create_groups(*args) -> 'PyObject *': ...
def pygc_delete_groups(*args) -> 'PyObject *': ...
def pygc_set_groups_visibility(*args) -> 'PyObject *': ...
def pycim_get_widget(*args) -> 'TWidget *': ...
def pycim_view_close(*args) -> None: ...

uses_swig_builtins: Incomplete

class loader_input_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    __idc_cvt_id__: Incomplete
    def __init__(self, *args) -> None: ...
    def close(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def open(self, *args) -> bool: ...
    def set_linput(self, *args) -> None: ...
    @staticmethod
    def from_linput(*args) -> 'loader_input_t *': ...
    @staticmethod
    def from_capsule(*args) -> 'loader_input_t *': ...
    @staticmethod
    def from_fp(*args) -> 'loader_input_t *': ...
    def get_linput(self, *args) -> 'linput_t *': ...
    def open_memory(self, *args) -> bool: ...
    def seek(self, *args) -> int64: ...
    def tell(self, *args) -> int64: ...
    def getz(self, *args) -> 'PyObject *': ...
    def gets(self, *args) -> 'PyObject *': ...
    def read(self, *args) -> 'PyObject *': ...
    def opened(self, *args) -> bool: ...
    def readbytes(self, *args) -> 'PyObject *': ...
    def file2base(self, *args) -> int: ...
    def size(self, *args) -> int64: ...
    def filename(self, *args) -> 'PyObject *': ...
    def get_byte(self, *args) -> 'PyObject *': ...

def loader_input_t_from_linput(*args) -> 'loader_input_t *': ...
def loader_input_t_from_capsule(*args) -> 'loader_input_t *': ...
def loader_input_t_from_fp(*args) -> 'loader_input_t *': ...
