# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any, overload

BADDIFF: int
BADMEMSIZE: int
CEF_RETERR: int
CP_BOM: int
CP_ELLIPSIS: int
CP_REPLCHAR: int
CP_UTF16: int
CP_UTF8: int
ENC_MUTF8: str
ENC_UTF16: str
ENC_UTF16BE: str
ENC_UTF16LE: str
ENC_UTF32: str
ENC_UTF32BE: str
ENC_UTF32LE: str
ENC_UTF8: str
ENC_WIN1252: str
FMT_64: str
FMT_EA: str
FMT_Z: str
FMT_ZS: str
FMT_ZX: str
IDA_SDK_VERSION: int
IDBDEC_ESCAPE: int
IOREDIR_APPEND: int
IOREDIR_INPUT: int
IOREDIR_OUTPUT: int
IOREDIR_QUOTED: int
MAXSTR: int
MAX_UTF8_SEQ_LEN: int
QWCONTINUED: int
QWNOHANG: int
SUBSTCHAR: str
SWIG_PYTHON_LEGACY_BOOL: int
TCT_NOT_OWNER: int
TCT_OWNER: int
TCT_UNKNOWN: int
UTF16BE_BOM: str
UTF16LE_BOM: str
UTF32BE_BOM: str
UTF32LE_BOM: str
UTF8_BOM: str
UTF8_ELLIPSIS: str
UTF8_REPLCHAR: str
_CRT_DECLARE_NONSTDC_NAMES: int
__MF__: int
cvar: Any

def __qmutex_t_swiginit(*args, **kwargs): ...
def __qmutex_t_swigregister(*args, **kwargs): ...
def __qsemaphore_t_swiginit(*args, **kwargs): ...
def __qsemaphore_t_swigregister(*args, **kwargs): ...
def __qthread_t_swiginit(*args, **kwargs): ...
def __qthread_t_swigregister(*args, **kwargs): ...
def boolvec_t___eq__(self, r) -> bool: ...
def boolvec_t___getitem__(*args, **kwargs): ...
def boolvec_t___len__(self) -> size_t: ...
def boolvec_t___ne__(self, r) -> bool: ...
def boolvec_t___setitem__(self, i, v) -> Any: ...
def boolvec_t__del(self, x) -> bool: ...
def boolvec_t_add_unique(self, x) -> bool: ...
def boolvec_t_at(*args, **kwargs): ...
def boolvec_t_begin(*args, **kwargs): ...
def boolvec_t_capacity(self) -> size_t: ...
def boolvec_t_clear(self) -> Any: ...
def boolvec_t_empty(self) -> bool: ...
def boolvec_t_end(*args, **kwargs): ...
def boolvec_t_erase(*args, **kwargs): ...
def boolvec_t_extract(*args, **kwargs): ...
def boolvec_t_find(*args, **kwargs): ...
def boolvec_t_grow(self, x=...) -> Any: ...
def boolvec_t_has(self, x) -> bool: ...
def boolvec_t_inject(self, s, len) -> Any: ...
def boolvec_t_insert(*args, **kwargs): ...
def boolvec_t_pop_back(self) -> Any: ...
def boolvec_t_push_back(self, x) -> Any: ...
def boolvec_t_qclear(self) -> Any: ...
def boolvec_t_reserve(self, cnt) -> Any: ...
@overload
def boolvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def boolvec_t_resize(self, _newsize) -> Any: ...
def boolvec_t_size(self) -> size_t: ...
def boolvec_t_swap(self, r) -> Any: ...
def boolvec_t_swiginit(*args, **kwargs): ...
def boolvec_t_swigregister(*args, **kwargs): ...
def boolvec_t_truncate(self) -> Any: ...
def channel_redir_t_fd_get(self) -> int: ...
def channel_redir_t_fd_set(self, fd) -> Any: ...
def channel_redir_t_file_get(*args, **kwargs): ...
def channel_redir_t_file_set(self, file) -> Any: ...
def channel_redir_t_flags_get(self) -> int: ...
def channel_redir_t_flags_set(self, flags) -> Any: ...
def channel_redir_t_is_append(self) -> bool: ...
def channel_redir_t_is_input(self) -> bool: ...
def channel_redir_t_is_output(self) -> bool: ...
def channel_redir_t_is_quoted(self) -> bool: ...
def channel_redir_t_length_get(self) -> int: ...
def channel_redir_t_length_set(self, length) -> Any: ...
def channel_redir_t_start_get(self) -> int: ...
def channel_redir_t_start_set(self, start) -> Any: ...
def channel_redir_t_swiginit(*args, **kwargs): ...
def channel_redir_t_swigregister(*args, **kwargs): ...
def check_process_exit(handle, exit_code, msecs=...) -> int: ...
def delete___qmutex_t(self) -> Any: ...
def delete___qsemaphore_t(self) -> Any: ...
def delete___qthread_t(self) -> Any: ...
def delete_boolvec_t(self) -> Any: ...
def delete_channel_redir_t(self) -> Any: ...
def delete_ea_array(self) -> Any: ...
def delete_ea_pointer(self) -> Any: ...
def delete_instant_dbgopts_t(self) -> Any: ...
def delete_int64vec_t(self) -> Any: ...
def delete_int_pointer(self) -> Any: ...
def delete_intvec_t(self) -> Any: ...
def delete_qmutex_locker_t(self) -> Any: ...
def delete_qrefcnt_obj_t(self) -> Any: ...
def delete_sel_array(self) -> Any: ...
def delete_sel_pointer(self) -> Any: ...
def delete_sizevec_t(self) -> Any: ...
def delete_strvec_t(self) -> Any: ...
def delete_sval_pointer(self) -> Any: ...
def delete_tid_array(self) -> Any: ...
def delete_uchar_array(self) -> Any: ...
def delete_uint64vec_t(self) -> Any: ...
def delete_uintvec_t(self) -> Any: ...
def delete_uval_array(self) -> Any: ...
def ea_array___getitem__(self, index) -> ea_t: ...
def ea_array___setitem__(self, index, value) -> Any: ...
def ea_array_cast(*args, **kwargs): ...
def ea_array_frompointer(t) -> ea_array: ...
def ea_array_swiginit(*args, **kwargs): ...
def ea_array_swigregister(*args, **kwargs): ...
def ea_pointer_assign(self, value) -> Any: ...
def ea_pointer_cast(*args, **kwargs): ...
def ea_pointer_frompointer(t) -> ea_pointer: ...
def ea_pointer_swiginit(*args, **kwargs): ...
def ea_pointer_swigregister(*args, **kwargs): ...
def ea_pointer_value(self) -> ea_t: ...
def extend_sign(v, nbytes, sign_extend) -> uint64: ...
def instant_dbgopts_t__pass_get(*args, **kwargs): ...
def instant_dbgopts_t__pass_set(self, _pass) -> Any: ...
def instant_dbgopts_t_attach_get(self) -> bool: ...
def instant_dbgopts_t_attach_set(self, attach) -> Any: ...
def instant_dbgopts_t_debmod_get(*args, **kwargs): ...
def instant_dbgopts_t_debmod_set(self, debmod) -> Any: ...
def instant_dbgopts_t_env_get(*args, **kwargs): ...
def instant_dbgopts_t_env_set(self, env) -> Any: ...
def instant_dbgopts_t_event_id_get(self) -> int: ...
def instant_dbgopts_t_event_id_set(self, event_id) -> Any: ...
def instant_dbgopts_t_host_get(*args, **kwargs): ...
def instant_dbgopts_t_host_set(self, host) -> Any: ...
def instant_dbgopts_t_pid_get(self) -> int: ...
def instant_dbgopts_t_pid_set(self, pid) -> Any: ...
def instant_dbgopts_t_port_get(self) -> int: ...
def instant_dbgopts_t_port_set(self, port) -> Any: ...
def instant_dbgopts_t_swiginit(*args, **kwargs): ...
def instant_dbgopts_t_swigregister(*args, **kwargs): ...
def int64vec_t___eq__(self, r) -> bool: ...
def int64vec_t___getitem__(*args, **kwargs): ...
def int64vec_t___len__(self) -> size_t: ...
def int64vec_t___ne__(self, r) -> bool: ...
def int64vec_t___setitem__(self, i, v) -> Any: ...
def int64vec_t__del(self, x) -> bool: ...
def int64vec_t_add_unique(self, x) -> bool: ...
def int64vec_t_at(*args, **kwargs): ...
def int64vec_t_begin(*args, **kwargs): ...
def int64vec_t_capacity(self) -> size_t: ...
def int64vec_t_clear(self) -> Any: ...
def int64vec_t_empty(self) -> bool: ...
def int64vec_t_end(*args, **kwargs): ...
def int64vec_t_erase(*args, **kwargs): ...
def int64vec_t_extract(*args, **kwargs): ...
def int64vec_t_find(*args, **kwargs): ...
def int64vec_t_has(self, x) -> bool: ...
def int64vec_t_inject(self, s, len) -> Any: ...
def int64vec_t_insert(*args, **kwargs): ...
def int64vec_t_pop_back(self) -> Any: ...
def int64vec_t_push_back(self, x) -> Any: ...
def int64vec_t_qclear(self) -> Any: ...
def int64vec_t_reserve(self, cnt) -> Any: ...
@overload
def int64vec_t_resize(self, _newsize, x) -> Any: ...
@overload
def int64vec_t_resize(self, _newsize) -> Any: ...
def int64vec_t_size(self) -> size_t: ...
def int64vec_t_swap(self, r) -> Any: ...
def int64vec_t_swiginit(*args, **kwargs): ...
def int64vec_t_swigregister(*args, **kwargs): ...
def int64vec_t_truncate(self) -> Any: ...
def int_pointer_assign(self, value) -> Any: ...
def int_pointer_cast(*args, **kwargs): ...
def int_pointer_frompointer(t) -> int_pointer: ...
def int_pointer_swiginit(*args, **kwargs): ...
def int_pointer_swigregister(*args, **kwargs): ...
def int_pointer_value(self) -> int: ...
def intvec_t___eq__(self, r) -> bool: ...
def intvec_t___getitem__(*args, **kwargs): ...
def intvec_t___len__(self) -> size_t: ...
def intvec_t___ne__(self, r) -> bool: ...
def intvec_t___setitem__(self, i, v) -> Any: ...
def intvec_t__del(self, x) -> bool: ...
def intvec_t_add_unique(self, x) -> bool: ...
def intvec_t_at(*args, **kwargs): ...
def intvec_t_begin(*args, **kwargs): ...
def intvec_t_capacity(self) -> size_t: ...
def intvec_t_clear(self) -> Any: ...
def intvec_t_empty(self) -> bool: ...
def intvec_t_end(*args, **kwargs): ...
def intvec_t_erase(*args, **kwargs): ...
def intvec_t_extract(*args, **kwargs): ...
def intvec_t_find(*args, **kwargs): ...
def intvec_t_has(self, x) -> bool: ...
def intvec_t_inject(self, s, len) -> Any: ...
def intvec_t_insert(*args, **kwargs): ...
def intvec_t_pop_back(self) -> Any: ...
def intvec_t_push_back(self, x) -> Any: ...
def intvec_t_qclear(self) -> Any: ...
def intvec_t_reserve(self, cnt) -> Any: ...
@overload
def intvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def intvec_t_resize(self, _newsize) -> Any: ...
def intvec_t_size(self) -> size_t: ...
def intvec_t_swap(self, r) -> Any: ...
def intvec_t_swiginit(*args, **kwargs): ...
def intvec_t_swigregister(*args, **kwargs): ...
def intvec_t_truncate(self) -> Any: ...
def is_control_tty(fd) -> enumtty_control_t: ...
def is_cvt64() -> bool: ...
def is_main_thread() -> bool: ...
def log2ceil(d64) -> int: ...
def log2floor(d64) -> int: ...
def new___qmutex_t() -> __qmutex_t: ...
def new___qsemaphore_t() -> __qsemaphore_t: ...
def new___qthread_t() -> __qthread_t: ...
def new_boolvec_t(x) -> boolvec_t: ...
def new_channel_redir_t() -> channel_redir_t: ...
def new_ea_array(nelements) -> ea_array: ...
def new_ea_pointer() -> ea_pointer: ...
def new_instant_dbgopts_t() -> instant_dbgopts_t: ...
def new_int64vec_t(x) -> int64vec_t: ...
def new_int_pointer() -> int_pointer: ...
def new_intvec_t(x) -> intvec_t: ...
def new_qmutex_locker_t(_lock) -> qmutex_locker_t: ...
def new_sel_array(nelements) -> sel_array: ...
def new_sel_pointer() -> sel_pointer: ...
def new_sizevec_t(x) -> sizevec_t: ...
def new_strvec_t(x) -> strvec_t: ...
def new_sval_pointer() -> sval_pointer: ...
def new_tid_array(nelements) -> tid_array: ...
def new_uchar_array(nelements) -> uchar_array: ...
def new_uint64vec_t(x) -> uint64vec_t: ...
def new_uintvec_t(x) -> uintvec_t: ...
def new_uval_array(nelements) -> uval_array: ...
def parse_dbgopts(ido, r_switch) -> bool: ...
def qatoll(nptr) -> int64: ...
def qcontrol_tty() -> Any: ...
def qdetach_tty() -> Any: ...
def qexit(code) -> Any: ...
def qmutex_locker_t_swiginit(*args, **kwargs): ...
def qmutex_locker_t_swigregister(*args, **kwargs): ...
def qrefcnt_obj_t_refcnt_get(self) -> int: ...
def qrefcnt_obj_t_refcnt_set(self, refcnt) -> Any: ...
def qrefcnt_obj_t_release(self) -> Any: ...
def qrefcnt_obj_t_swigregister(*args, **kwargs): ...
def qstrvec_t_add(_self, s) -> bool: ...
def qstrvec_t_addressof(*args, **kwargs): ...
def qstrvec_t_assign(_self, other) -> bool: ...
def qstrvec_t_clear(_self, qclear) -> bool: ...
def qstrvec_t_create(*args, **kwargs): ...
def qstrvec_t_destroy(py_obj) -> bool: ...
def qstrvec_t_from_list(_self, py_list) -> bool: ...
def qstrvec_t_get(*args, **kwargs): ...
def qstrvec_t_get_clink(*args, **kwargs): ...
def qstrvec_t_get_clink_ptr(*args, **kwargs): ...
def qstrvec_t_insert(_self, idx, s) -> bool: ...
def qstrvec_t_remove(_self, idx) -> bool: ...
def qstrvec_t_set(_self, idx, s) -> bool: ...
def qstrvec_t_size(_self) -> size_t: ...
def qthread_equal(q1, q2) -> bool: ...
def quote_cmdline_arg(arg) -> bool: ...
def qvector_reserve(*args, **kwargs): ...
def readbytes(h, res, size, mf) -> int: ...
def reloc_value(value, size, delta, mf) -> Any: ...
def relocate_relobj(_relobj, ea, mf) -> bool: ...
def sel_array___getitem__(self, index) -> sel_t: ...
def sel_array___setitem__(self, index, value) -> Any: ...
def sel_array_cast(*args, **kwargs): ...
def sel_array_frompointer(t) -> sel_array: ...
def sel_array_swiginit(*args, **kwargs): ...
def sel_array_swigregister(*args, **kwargs): ...
def sel_pointer_assign(self, value) -> Any: ...
def sel_pointer_cast(*args, **kwargs): ...
def sel_pointer_frompointer(t) -> sel_pointer: ...
def sel_pointer_swiginit(*args, **kwargs): ...
def sel_pointer_swigregister(*args, **kwargs): ...
def sel_pointer_value(self) -> sel_t: ...
def sizevec_t___eq__(self, r) -> bool: ...
def sizevec_t___getitem__(*args, **kwargs): ...
def sizevec_t___len__(self) -> size_t: ...
def sizevec_t___ne__(self, r) -> bool: ...
def sizevec_t___setitem__(self, i, v) -> Any: ...
def sizevec_t__del(self, x) -> bool: ...
def sizevec_t_add_unique(self, x) -> bool: ...
def sizevec_t_at(*args, **kwargs): ...
def sizevec_t_begin(*args, **kwargs): ...
def sizevec_t_capacity(self) -> size_t: ...
def sizevec_t_clear(self) -> Any: ...
def sizevec_t_empty(self) -> bool: ...
def sizevec_t_end(*args, **kwargs): ...
def sizevec_t_erase(*args, **kwargs): ...
def sizevec_t_extract(*args, **kwargs): ...
def sizevec_t_find(*args, **kwargs): ...
def sizevec_t_grow(self, x=...) -> Any: ...
def sizevec_t_has(self, x) -> bool: ...
def sizevec_t_inject(self, s, len) -> Any: ...
def sizevec_t_insert(*args, **kwargs): ...
def sizevec_t_pop_back(self) -> Any: ...
def sizevec_t_push_back(self, x) -> Any: ...
def sizevec_t_qclear(self) -> Any: ...
def sizevec_t_reserve(self, cnt) -> Any: ...
@overload
def sizevec_t_resize(self, _newsize, x) -> Any: ...
@overload
def sizevec_t_resize(self, _newsize) -> Any: ...
def sizevec_t_size(self) -> size_t: ...
def sizevec_t_swap(self, r) -> Any: ...
def sizevec_t_swiginit(*args, **kwargs): ...
def sizevec_t_swigregister(*args, **kwargs): ...
def sizevec_t_truncate(self) -> Any: ...
def str2user(*args, **kwargs): ...
def strvec_t___getitem__(*args, **kwargs): ...
def strvec_t___len__(self) -> size_t: ...
def strvec_t___setitem__(self, i, v) -> Any: ...
def strvec_t_at(*args, **kwargs): ...
def strvec_t_begin(*args, **kwargs): ...
def strvec_t_capacity(self) -> size_t: ...
def strvec_t_clear(self) -> Any: ...
def strvec_t_empty(self) -> bool: ...
def strvec_t_end(*args, **kwargs): ...
def strvec_t_erase(*args, **kwargs): ...
def strvec_t_extract(*args, **kwargs): ...
def strvec_t_grow(self, x=...) -> Any: ...
def strvec_t_inject(self, s, len) -> Any: ...
def strvec_t_insert(*args, **kwargs): ...
def strvec_t_pop_back(self) -> Any: ...
def strvec_t_push_back(self, x) -> Any: ...
def strvec_t_qclear(self) -> Any: ...
def strvec_t_reserve(self, cnt) -> Any: ...
@overload
def strvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def strvec_t_resize(self, _newsize) -> Any: ...
def strvec_t_size(self) -> size_t: ...
def strvec_t_swap(self, r) -> Any: ...
def strvec_t_swiginit(*args, **kwargs): ...
def strvec_t_swigregister(*args, **kwargs): ...
def strvec_t_truncate(self) -> Any: ...
def sval_pointer_assign(self, value) -> Any: ...
def sval_pointer_cast(*args, **kwargs): ...
def sval_pointer_frompointer(t) -> sval_pointer: ...
def sval_pointer_swiginit(*args, **kwargs): ...
def sval_pointer_swigregister(*args, **kwargs): ...
def sval_pointer_value(self) -> sval_t: ...
def tid_array___getitem__(self, index) -> tid_t: ...
def tid_array___setitem__(self, index, value) -> Any: ...
def tid_array_cast(*args, **kwargs): ...
def tid_array_frompointer(t) -> tid_array: ...
def tid_array_swiginit(*args, **kwargs): ...
def tid_array_swigregister(*args, **kwargs): ...
def uchar_array___getitem__(self, index) -> uchar: ...
def uchar_array___setitem__(self, index, value) -> Any: ...
def uchar_array_cast(*args, **kwargs): ...
def uchar_array_frompointer(t) -> uchar_array: ...
def uchar_array_swiginit(*args, **kwargs): ...
def uchar_array_swigregister(*args, **kwargs): ...
def uint64vec_t___eq__(self, r) -> bool: ...
def uint64vec_t___getitem__(*args, **kwargs): ...
def uint64vec_t___len__(self) -> size_t: ...
def uint64vec_t___ne__(self, r) -> bool: ...
def uint64vec_t___setitem__(self, i, v) -> Any: ...
def uint64vec_t__del(self, x) -> bool: ...
def uint64vec_t_add_unique(self, x) -> bool: ...
def uint64vec_t_at(*args, **kwargs): ...
def uint64vec_t_begin(*args, **kwargs): ...
def uint64vec_t_capacity(self) -> size_t: ...
def uint64vec_t_clear(self) -> Any: ...
def uint64vec_t_empty(self) -> bool: ...
def uint64vec_t_end(*args, **kwargs): ...
def uint64vec_t_erase(*args, **kwargs): ...
def uint64vec_t_extract(*args, **kwargs): ...
def uint64vec_t_find(*args, **kwargs): ...
def uint64vec_t_has(self, x) -> bool: ...
def uint64vec_t_inject(self, s, len) -> Any: ...
def uint64vec_t_insert(*args, **kwargs): ...
def uint64vec_t_pop_back(self) -> Any: ...
def uint64vec_t_push_back(self, x) -> Any: ...
def uint64vec_t_qclear(self) -> Any: ...
def uint64vec_t_reserve(self, cnt) -> Any: ...
@overload
def uint64vec_t_resize(self, _newsize, x) -> Any: ...
@overload
def uint64vec_t_resize(self, _newsize) -> Any: ...
def uint64vec_t_size(self) -> size_t: ...
def uint64vec_t_swap(self, r) -> Any: ...
def uint64vec_t_swiginit(*args, **kwargs): ...
def uint64vec_t_swigregister(*args, **kwargs): ...
def uint64vec_t_truncate(self) -> Any: ...
def uintvec_t___eq__(self, r) -> bool: ...
def uintvec_t___getitem__(*args, **kwargs): ...
def uintvec_t___len__(self) -> size_t: ...
def uintvec_t___ne__(self, r) -> bool: ...
def uintvec_t___setitem__(self, i, v) -> Any: ...
def uintvec_t__del(self, x) -> bool: ...
def uintvec_t_add_unique(self, x) -> bool: ...
def uintvec_t_at(*args, **kwargs): ...
def uintvec_t_begin(*args, **kwargs): ...
def uintvec_t_capacity(self) -> size_t: ...
def uintvec_t_clear(self) -> Any: ...
def uintvec_t_empty(self) -> bool: ...
def uintvec_t_end(*args, **kwargs): ...
def uintvec_t_erase(*args, **kwargs): ...
def uintvec_t_extract(*args, **kwargs): ...
def uintvec_t_find(*args, **kwargs): ...
def uintvec_t_has(self, x) -> bool: ...
def uintvec_t_inject(self, s, len) -> Any: ...
def uintvec_t_insert(*args, **kwargs): ...
def uintvec_t_pop_back(self) -> Any: ...
def uintvec_t_push_back(self, x) -> Any: ...
def uintvec_t_qclear(self) -> Any: ...
def uintvec_t_reserve(self, cnt) -> Any: ...
@overload
def uintvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def uintvec_t_resize(self, _newsize) -> Any: ...
def uintvec_t_size(self) -> size_t: ...
def uintvec_t_swap(self, r) -> Any: ...
def uintvec_t_swiginit(*args, **kwargs): ...
def uintvec_t_swigregister(*args, **kwargs): ...
def uintvec_t_truncate(self) -> Any: ...
def uval_array___getitem__(self, index) -> uval_t: ...
def uval_array___setitem__(self, index, value) -> Any: ...
def uval_array_cast(*args, **kwargs): ...
def uval_array_frompointer(t) -> uval_array: ...
def uval_array_swiginit(*args, **kwargs): ...
def uval_array_swigregister(*args, **kwargs): ...
def writebytes(h, l, size, mf) -> int: ...
