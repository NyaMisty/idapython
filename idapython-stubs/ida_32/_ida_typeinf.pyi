# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any, overload

ABS_NO: int
ABS_UNK: int
ABS_YES: int
ADDTIL_ABORTED: int
ADDTIL_COMP: int
ADDTIL_DEFAULT: int
ADDTIL_FAILED: int
ADDTIL_INCOMP: int
ADDTIL_OK: int
ADDTIL_SILENT: int
ARGREGS_BY_SLOTS: int
ARGREGS_FP_CONSUME_GP: int
ARGREGS_GP_ONLY: int
ARGREGS_INDEPENDENT: int
ARGREGS_MIPS_O32: int
ARGREGS_POLICY_UNDEFINED: int
CCN_C: int
CCN_CPP: int
CC_ALLOW_ARGPERM: int
CC_ALLOW_REGHOLES: int
CC_CDECL_OK: int
CC_GOLANG_OK: int
CC_HAS_ELLIPSIS: int
DEFMASK64: int
ETF_ASMENUM: int
ETF_AUTONAME: int
ETF_COMPATIBLE: int
ETF_FORCENAME: int
ETF_FUNCARG: int
ETF_MAY_DESTROY: int
ETF_NO_IDBSYNC: int
ETF_NO_LAYOUT: int
ETF_NO_SAVE: int
FAH_BYTE: int
FAI_ARRAY: int
FAI_HIDDEN: int
FAI_RETPTR: int
FAI_STRUCT: int
FAI_UNUSED: int
FMTFUNC_PRINTF: int
FMTFUNC_SCANF: int
FMTFUNC_STRFMON: int
FMTFUNC_STRFTIME: int
FRB_CHAR: int
FRB_CUSTOM: int
FRB_ENUM: int
FRB_FLOAT: int
FRB_INVBITS: int
FRB_INVSIGN: int
FRB_LZERO: int
FRB_MASK: int
FRB_NUMB: int
FRB_NUMD: int
FRB_NUMH: int
FRB_NUMO: int
FRB_OFFSET: int
FRB_SEG: int
FRB_SIGNED: int
FRB_STRLIT: int
FRB_STROFF: int
FRB_TABFORM: int
FRB_UNK: int
FTI_ALL: int
FTI_ARGLOCS: int
FTI_CALLTYPE: int
FTI_CONST: int
FTI_CTOR: int
FTI_DEFCALL: int
FTI_DTOR: int
FTI_EXPLOCS: int
FTI_FARCALL: int
FTI_HIGH: int
FTI_INTCALL: int
FTI_NEARCALL: int
FTI_NORET: int
FTI_PURE: int
FTI_SPOILED: int
FTI_STATIC: int
FTI_VIRTUAL: int
GTD_CALC_ARGLOCS: int
GTD_CALC_LAYOUT: int
GTD_DEL_BITFLDS: int
GTD_NO_ARGLOCS: int
GTD_NO_LAYOUT: int
GTS_BASECLASS: int
GTS_NESTED: int
GUESS_FUNC_FAILED: int
GUESS_FUNC_OK: int
GUESS_FUNC_TRIVIAL: int
HTI_CPP: int
HTI_DCL: int
HTI_EXT: int
HTI_FIL: int
HTI_HIGH: int
HTI_INT: int
HTI_LEX: int
HTI_LOWER: int
HTI_MAC: int
HTI_NDC: int
HTI_NER: int
HTI_NOBASE: int
HTI_NWR: int
HTI_PAK: int
HTI_PAK1: int
HTI_PAK16: int
HTI_PAK2: int
HTI_PAK4: int
HTI_PAK8: int
HTI_PAKDEF: int
HTI_PAK_SHIFT: int
HTI_RAWARGS: int
HTI_RELAXED: int
HTI_TST: int
HTI_UNP: int
IMPTYPE_LOCAL: int
MAX_DECL_ALIGN: int
MAX_FUNC_ARGS: int
NTF_64BIT: int
NTF_CHKSYNC: int
NTF_COPY: int
NTF_FIXNAME: int
NTF_IDBENC: int
NTF_NOBASE: int
NTF_NOCUR: int
NTF_NO_NAMECHK: int
NTF_REPLACE: int
NTF_SYMM: int
NTF_SYMU: int
NTF_TYPE: int
NTF_UMANGLED: int
PDF_DEF_BASE: int
PDF_DEF_FWD: int
PDF_HEADER_CMT: int
PDF_INCL_DEPS: int
PIO_IGNORE_PTRS: int
PIO_NOATTR_FAIL: int
PRALOC_STKOFF: int
PRALOC_VERIFY: int
PRTYPE_1LINCMT: int
PRTYPE_1LINE: int
PRTYPE_COLORED: int
PRTYPE_CPP: int
PRTYPE_DEF: int
PRTYPE_HEADER: int
PRTYPE_MAXSTR: int
PRTYPE_METHODS: int
PRTYPE_MULTI: int
PRTYPE_NOARGS: int
PRTYPE_NOARRS: int
PRTYPE_NOREGEX: int
PRTYPE_NORES: int
PRTYPE_PRAGMA: int
PRTYPE_RESTORE: int
PRTYPE_SEMI: int
PRTYPE_TYPE: int
PT_FILE: int
PT_HIGH: int
PT_LOWER: int
PT_NDC: int
PT_PACKMASK: int
PT_RAWARGS: int
PT_RELAXED: int
PT_REPLACE: int
PT_SIL: int
PT_TYP: int
PT_VAR: int
RESERVED_BYTE: int
SC_AUTO: int
SC_EXT: int
SC_FRIEND: int
SC_REG: int
SC_STAT: int
SC_TYPE: int
SC_UNK: int
SC_VIRT: int
SETCOMP_BY_USER: int
SETCOMP_ONLY_ABI: int
SETCOMP_ONLY_ID: int
SETCOMP_OVERRIDE: int
STI_ACCHAR: int
STI_ACHAR: int
STI_ACUCHAR: int
STI_AEABI_LCMP: int
STI_AEABI_MEMCLR: int
STI_AEABI_MEMCPY: int
STI_AEABI_MEMSET: int
STI_AEABI_ULCMP: int
STI_AUCHAR: int
STI_COMPLEX128: int
STI_COMPLEX64: int
STI_DONT_USE: int
STI_FDELOP: int
STI_FPURGING: int
STI_LAST: int
STI_MSGSEND: int
STI_PBYTE: int
STI_PCCHAR: int
STI_PCHAR: int
STI_PCUCHAR: int
STI_PCVOID: int
STI_PINT: int
STI_PPVOID: int
STI_PUCHAR: int
STI_PUINT: int
STI_PVOID: int
STI_RTC_CHECK_2: int
STI_RTC_CHECK_4: int
STI_RTC_CHECK_8: int
STI_SIZE_T: int
STI_SSIZE_T: int
STRMEM_ANON: int
STRMEM_AUTO: int
STRMEM_CASTABLE_TO: int
STRMEM_INDEX: int
STRMEM_MASK: int
STRMEM_MAXS: int
STRMEM_MINS: int
STRMEM_NAME: int
STRMEM_OFFSET: int
STRMEM_SIZE: int
STRMEM_SKIP_EMPTY: int
STRMEM_TYPE: int
STRMEM_VFTABLE: int
SUDT_ALIGN: int
SUDT_CONST: int
SUDT_FAST: int
SUDT_GAPS: int
SUDT_SERDEF: int
SUDT_SORT: int
SUDT_TRUNC: int
SUDT_UNEX: int
SUDT_VOLATILE: int
SWIG_PYTHON_LEGACY_BOOL: int
TAENUM_64BIT: int
TAENUM_BIN: int
TAENUM_LZERO: int
TAENUM_NUMSIGN: int
TAENUM_OCT: int
TAENUM_SIGNED: int
TAENUM_UNSIGNED: int
TAFLD_BASECLASS: int
TAFLD_GAP: int
TAFLD_METHOD: int
TAFLD_REGCMT: int
TAFLD_UNALIGNED: int
TAFLD_VFTABLE: int
TAFLD_VIRTBASE: int
TAH_ALL: int
TAH_BYTE: int
TAH_HASATTRS: int
TAPTR_PTR32: int
TAPTR_PTR64: int
TAPTR_RESTRICT: int
TAPTR_SHIFTED: int
TAUDT_CPPOBJ: int
TAUDT_MSSTRUCT: int
TAUDT_UNALIGNED: int
TAUDT_VFTABLE: int
TA_FORMAT: str
TA_ORG_ARRDIM: str
TA_ORG_TYPEDEF: str
TA_VALUE_REPR: str
TCMP_ANYBASE: int
TCMP_AUTOCAST: int
TCMP_CALL: int
TCMP_DECL: int
TCMP_DELPTR: int
TCMP_EQUAL: int
TCMP_IGNMODS: int
TCMP_MANCAST: int
TCMP_SKIPTHIS: int
TERR_ALIEN_NAME: int
TERR_BAD_ARG: int
TERR_BAD_ARRAY: int
TERR_BAD_BASE: int
TERR_BAD_BF: int
TERR_BAD_BMASK: int
TERR_BAD_GAP: int
TERR_BAD_GROUPS: int
TERR_BAD_INDEX: int
TERR_BAD_LAYOUT: int
TERR_BAD_MSKVAL: int
TERR_BAD_NAME: int
TERR_BAD_OFFSET: int
TERR_BAD_REPR: int
TERR_BAD_SERIAL: int
TERR_BAD_SIZE: int
TERR_BAD_SUBTYPE: int
TERR_BAD_SYNC: int
TERR_BAD_TAH: int
TERR_BAD_TYPE: int
TERR_BAD_UNIVAR: int
TERR_BAD_VALUE: int
TERR_BAD_VARLAST: int
TERR_COUNT: int
TERR_DUPNAME: int
TERR_ENUM_SIZE: int
TERR_GRP_NOEMPTY: int
TERR_NESTED: int
TERR_NOT_COMPAT: int
TERR_NOT_IMPL: int
TERR_NO_BMASK: int
TERR_OK: int
TERR_OVERLAP: int
TERR_SAVE_ERROR: int
TERR_SERIALIZE: int
TERR_STOCK: int
TERR_UNION_BF: int
TIL_ADD_ALREADY: int
TIL_ADD_FAILED: int
TIL_ADD_OK: int
TIL_ALI: int
TIL_ESI: int
TIL_MAC: int
TIL_MOD: int
TIL_ORD: int
TIL_SLD: int
TIL_STM: int
TIL_UNI: int
TIL_ZIP: int
TINFO_DEFINITE: int
TINFO_DELAYFUNC: int
TINFO_GUESSED: int
TINFO_STRICT: int
TPOS_LNNUM: str
TPOS_REGCMT: str
TVIS_CMT: int
TVIS_NAME: int
TVIS_RPTCMT: int
TVIS_TYPE: int
TVST_DEF: int
TVST_LEVEL: int
TVST_PRUNE: int
UTP_ENUM: int
UTP_STRUCT: int
VALSTR_OPEN: int
VTBL_MEMNAME: str
VTBL_SUFFIX: str
cvar: Any
tinfo_t_ENUMBM_AUTO: int
tinfo_t_ENUMBM_OFF: int
tinfo_t_ENUMBM_ON: int

def add_til(name, flags) -> int: ...
def alloc_type_ordinal(ti) -> uint32: ...
def alloc_type_ordinals(ti, qty) -> uint32: ...
def aloc_visitor_t_swiginit(*args, **kwargs): ...
def aloc_visitor_t_swigregister(*args, **kwargs): ...
def aloc_visitor_t_visit_location(self, v, off, size) -> int: ...
def append_abi_opts(abi_opts, user_level=...) -> bool: ...
def append_argloc(out, vloc) -> bool: ...
def append_tinfo_covered(out, typid, offset) -> bool: ...
def apply_callee_tinfo(caller, tif) -> bool: ...
def apply_cdecl(til, ea, decl, flags=...) -> bool: ...
def apply_named_type(ea, name) -> bool: ...
def apply_once_tinfo_and_name(dea, tif, name) -> bool: ...
def apply_tinfo(ea, tif, flags) -> bool: ...
def apply_tinfo_to_stkarg(insn, x, v, tif, name) -> bool: ...
def apply_type(ti, type, fields, ea, flags) -> bool: ...
def argloc_t___eq__(self, r) -> bool: ...
def argloc_t___ge__(self, r) -> bool: ...
def argloc_t___gt__(self, r) -> bool: ...
def argloc_t___le__(self, r) -> bool: ...
def argloc_t___lt__(self, r) -> bool: ...
def argloc_t___ne__(self, r) -> bool: ...
def argloc_t__consume_rrel(self, p) -> bool: ...
def argloc_t__consume_scattered(self, p) -> bool: ...
def argloc_t__set_badloc(self) -> Any: ...
def argloc_t__set_biggest(self, ct, data) -> Any: ...
def argloc_t__set_custom(self, ct, pdata) -> Any: ...
def argloc_t__set_ea(self, _ea) -> Any: ...
def argloc_t__set_reg1(self, reg, off=...) -> Any: ...
def argloc_t__set_reg2(self, _reg1, _reg2) -> Any: ...
def argloc_t__set_stkoff(self, off) -> Any: ...
def argloc_t_advance(self, delta) -> bool: ...
def argloc_t_align_reg_high(self, size, _slotsize) -> Any: ...
def argloc_t_align_stkoff_high(self, size, _slotsize) -> Any: ...
def argloc_t_atype(self) -> argloc_type_t: ...
def argloc_t_calc_offset(self) -> sval_t: ...
def argloc_t_compare(self, r) -> int: ...
def argloc_t_consume_rrel(self, p) -> Any: ...
def argloc_t_consume_scattered(self, p) -> Any: ...
def argloc_t_get_biggest(*args, **kwargs): ...
def argloc_t_get_custom(*args, **kwargs): ...
def argloc_t_get_ea(self) -> ea_t: ...
def argloc_t_get_reginfo(self) -> uint32: ...
@overload
def argloc_t_get_rrel(self) -> rrel_t: ...
@overload
def argloc_t_get_rrel(self) -> rrel_t: ...
def argloc_t_has_reg(self) -> bool: ...
def argloc_t_has_stkoff(self) -> bool: ...
def argloc_t_in_stack(self) -> bool: ...
def argloc_t_is_badloc(self) -> bool: ...
def argloc_t_is_custom(self) -> bool: ...
def argloc_t_is_ea(self) -> bool: ...
def argloc_t_is_fragmented(self) -> bool: ...
def argloc_t_is_mixed_scattered(self) -> bool: ...
def argloc_t_is_reg(self) -> bool: ...
def argloc_t_is_reg1(self) -> bool: ...
def argloc_t_is_reg2(self) -> bool: ...
def argloc_t_is_rrel(self) -> bool: ...
def argloc_t_is_scattered(self) -> bool: ...
def argloc_t_is_stkoff(self) -> bool: ...
def argloc_t_reg1(self) -> int: ...
def argloc_t_reg2(self) -> int: ...
def argloc_t_regoff(self) -> int: ...
@overload
def argloc_t_scattered(self) -> scattered_aloc_t: ...
@overload
def argloc_t_scattered(self) -> scattered_aloc_t: ...
def argloc_t_set_badloc(self) -> Any: ...
def argloc_t_set_ea(self, _ea) -> Any: ...
def argloc_t_set_reg1(self, reg, off=...) -> Any: ...
def argloc_t_set_reg2(self, _reg1, _reg2) -> Any: ...
def argloc_t_set_stkoff(self, off) -> Any: ...
def argloc_t_stkoff(self) -> sval_t: ...
def argloc_t_swap(self, r) -> Any: ...
def argloc_t_swiginit(*args, **kwargs): ...
def argloc_t_swigregister(*args, **kwargs): ...
def argpart_t___lt__(self, r) -> bool: ...
def argpart_t_bad_offset(self) -> bool: ...
def argpart_t_bad_size(self) -> bool: ...
def argpart_t_off_get(self) -> ushort: ...
def argpart_t_off_set(self, off) -> Any: ...
def argpart_t_size_get(self) -> ushort: ...
def argpart_t_size_set(self, size) -> Any: ...
def argpart_t_swap(self, r) -> Any: ...
def argpart_t_swiginit(*args, **kwargs): ...
def argpart_t_swigregister(*args, **kwargs): ...
def argpartvec_t___eq__(self, r) -> bool: ...
def argpartvec_t___getitem__(self, i) -> argpart_t: ...
def argpartvec_t___len__(self) -> size_t: ...
def argpartvec_t___ne__(self, r) -> bool: ...
def argpartvec_t___setitem__(self, i, v) -> Any: ...
def argpartvec_t__del(self, x) -> bool: ...
def argpartvec_t_add_unique(self, x) -> bool: ...
def argpartvec_t_at(self, _idx) -> argpart_t: ...
@overload
def argpartvec_t_begin(self) -> argpart_t: ...
@overload
def argpartvec_t_begin(self) -> argpart_t: ...
def argpartvec_t_capacity(self) -> size_t: ...
def argpartvec_t_clear(self) -> Any: ...
def argpartvec_t_empty(self) -> bool: ...
@overload
def argpartvec_t_end(self) -> argpart_t: ...
@overload
def argpartvec_t_end(self) -> argpart_t: ...
@overload
def argpartvec_t_erase(self, it) -> argpart_t: ...
@overload
def argpartvec_t_erase(self, first, last) -> argpart_t: ...
def argpartvec_t_extract(self) -> argpart_t: ...
@overload
def argpartvec_t_find(self, x) -> argpart_t: ...
@overload
def argpartvec_t_find(self, x) -> argpart_t: ...
def argpartvec_t_grow(self, x=...) -> Any: ...
def argpartvec_t_has(self, x) -> bool: ...
def argpartvec_t_inject(self, s, len) -> Any: ...
def argpartvec_t_insert(self, it, x) -> argpart_t: ...
def argpartvec_t_pop_back(self) -> Any: ...
@overload
def argpartvec_t_push_back(self, x) -> Any: ...
@overload
def argpartvec_t_push_back(self) -> argpart_t: ...
def argpartvec_t_qclear(self) -> Any: ...
def argpartvec_t_reserve(self, cnt) -> Any: ...
@overload
def argpartvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def argpartvec_t_resize(self, _newsize) -> Any: ...
def argpartvec_t_size(self) -> size_t: ...
def argpartvec_t_swap(self, r) -> Any: ...
def argpartvec_t_swiginit(*args, **kwargs): ...
def argpartvec_t_swigregister(*args, **kwargs): ...
def argpartvec_t_truncate(self) -> Any: ...
def argtinfo_helper_t_has_delay_slot(self, arg0) -> bool: ...
def argtinfo_helper_t_is_stkarg_load(self, insn, src, dst) -> bool: ...
def argtinfo_helper_t_reserved_get(self) -> size_t: ...
def argtinfo_helper_t_reserved_set(self, reserved) -> Any: ...
def argtinfo_helper_t_set_op_tinfo(self, insn, x, tif, name) -> bool: ...
def argtinfo_helper_t_swiginit(*args, **kwargs): ...
def argtinfo_helper_t_swigregister(*args, **kwargs): ...
def argtinfo_helper_t_use_arg_tinfos(self, caller, fti, rargs) -> Any: ...
def array_type_data_t_base_get(self) -> uint32: ...
def array_type_data_t_base_set(self, base) -> Any: ...
def array_type_data_t_elem_type_get(self) -> tinfo_t: ...
def array_type_data_t_elem_type_set(self, elem_type) -> Any: ...
def array_type_data_t_nelems_get(self) -> uint32: ...
def array_type_data_t_nelems_set(self, nelems) -> Any: ...
def array_type_data_t_swap(self, r) -> Any: ...
def array_type_data_t_swiginit(*args, **kwargs): ...
def array_type_data_t_swigregister(*args, **kwargs): ...
def begin_type_updating(utp) -> Any: ...
def bitfield_type_data_t___eq__(self, r) -> bool: ...
def bitfield_type_data_t___ge__(self, r) -> bool: ...
def bitfield_type_data_t___gt__(self, r) -> bool: ...
def bitfield_type_data_t___le__(self, r) -> bool: ...
def bitfield_type_data_t___lt__(self, r) -> bool: ...
def bitfield_type_data_t___ne__(self, r) -> bool: ...
def bitfield_type_data_t_compare(self, r) -> int: ...
def bitfield_type_data_t_is_unsigned_get(self) -> bool: ...
def bitfield_type_data_t_is_unsigned_set(self, is_unsigned) -> Any: ...
def bitfield_type_data_t_is_valid_bitfield(self) -> bool: ...
def bitfield_type_data_t_nbytes_get(self) -> uchar: ...
def bitfield_type_data_t_nbytes_set(self, nbytes) -> Any: ...
def bitfield_type_data_t_swap(self, r) -> Any: ...
def bitfield_type_data_t_swiginit(*args, **kwargs): ...
def bitfield_type_data_t_swigregister(*args, **kwargs): ...
def bitfield_type_data_t_width_get(self) -> uchar: ...
def bitfield_type_data_t_width_set(self, width) -> Any: ...
def calc_c_cpp_name(name, type, ccn_flags) -> ssize_t: ...
def calc_number_of_children(loc, tif, dont_deref_ptr=...) -> int: ...
def calc_tinfo_gaps(out, typid) -> bool: ...
def calc_type_size(*args, **kwargs): ...
def callregs_t_by_slots(self) -> bool: ...
def callregs_t_fpregs_get(*args, **kwargs): ...
def callregs_t_fpregs_set(self, fpregs) -> Any: ...
def callregs_t_gpregs_get(*args, **kwargs): ...
def callregs_t_gpregs_set(self, gpregs) -> Any: ...
def callregs_t_init_regs(self, cc) -> Any: ...
def callregs_t_nregs_get(self) -> int: ...
def callregs_t_nregs_set(self, nregs) -> Any: ...
def callregs_t_policy_get(self) -> argreg_policy_t: ...
def callregs_t_policy_set(self, policy) -> Any: ...
def callregs_t_regcount(cc) -> int: ...
def callregs_t_reginds(self, gp_ind, fp_ind, r) -> bool: ...
def callregs_t_reset(self) -> Any: ...
def callregs_t_set(self, _policy, gprs, fprs) -> Any: ...
def callregs_t_swap(self, r) -> Any: ...
def callregs_t_swiginit(*args, **kwargs): ...
def callregs_t_swigregister(*args, **kwargs): ...
def choose_local_tinfo(ti, title, func=..., def_ord=..., ud=...) -> uint32: ...
def choose_local_tinfo_and_delta(delta, ti, title, func=..., def_ord=..., ud=...) -> uint32: ...
def choose_named_type(out_sym, root_til, title, ntf_flags, predicate=...) -> bool: ...
def clear_tinfo_t(_this) -> Any: ...
def compact_til(ti) -> bool: ...
def compare_tinfo(t1, t2, tcflags) -> bool: ...
def const_aloc_visitor_t_swiginit(*args, **kwargs): ...
def const_aloc_visitor_t_swigregister(*args, **kwargs): ...
def const_aloc_visitor_t_visit_location(self, v, off, size) -> int: ...
def convert_pt_flags_to_hti(pt_flags) -> int: ...
def copy_named_type(dsttil, srctil, name) -> uint32: ...
def copy_tinfo_t(_this, r) -> Any: ...
def create_enum_type(enum_name, ei, enum_width, sign, convert_to_bitmask, enum_cmt=...) -> tid_t: ...
def create_numbered_type_name(ord) -> ssize_t: ...
def create_tinfo(_this, bt, bt2, ptr) -> bool: ...
def create_tinfo2(_this, bt, bt2, ptr) -> bool: ...
def custom_data_type_info_t_dtid_get(self) -> int16: ...
def custom_data_type_info_t_dtid_set(self, dtid) -> Any: ...
def custom_data_type_info_t_fid_get(self) -> int16: ...
def custom_data_type_info_t_fid_set(self, fid) -> Any: ...
def custom_data_type_info_t_swiginit(*args, **kwargs): ...
def custom_data_type_info_t_swigregister(*args, **kwargs): ...
def default_compiler() -> comp_t: ...
def del_named_type(ti, name, ntf_flags) -> bool: ...
def del_numbered_type(ti, ordinal) -> bool: ...
def del_til(name) -> bool: ...
def del_tinfo_attr(tif, key, make_copy) -> bool: ...
def del_vftable_ea(ordinal) -> bool: ...
def delete_aloc_visitor_t(self) -> Any: ...
def delete_argloc_t(self) -> Any: ...
def delete_argpart_t(self) -> Any: ...
def delete_argpartvec_t(self) -> Any: ...
def delete_argtinfo_helper_t(self) -> Any: ...
def delete_array_type_data_t(self) -> Any: ...
def delete_bitfield_type_data_t(self) -> Any: ...
def delete_callregs_t(self) -> Any: ...
def delete_const_aloc_visitor_t(self) -> Any: ...
def delete_custom_data_type_info_t(self) -> Any: ...
def delete_edm_t(self) -> Any: ...
def delete_edmvec_t(self) -> Any: ...
def delete_enum_type_data_t(self) -> Any: ...
def delete_func_type_data_t(self) -> Any: ...
def delete_funcarg_t(self) -> Any: ...
def delete_funcargvec_t(self) -> Any: ...
def delete_ida_lowertype_helper_t(self) -> Any: ...
def delete_lowertype_helper_t(self) -> Any: ...
def delete_predicate_t(self) -> Any: ...
def delete_ptr_type_data_t(self) -> Any: ...
def delete_reginfovec_t(self) -> Any: ...
def delete_regobj_t(self) -> Any: ...
def delete_regobjs_t(self) -> Any: ...
def delete_regobjvec_t(self) -> Any: ...
def delete_rrel_t(self) -> Any: ...
def delete_scattered_aloc_t(self) -> Any: ...
def delete_simd_info_t(self) -> Any: ...
def delete_stkarg_area_info_t(self) -> Any: ...
def delete_text_sink_t(self) -> Any: ...
def delete_til_symbol_t(self) -> Any: ...
def delete_til_t(self) -> Any: ...
def delete_tinfo_t(self) -> Any: ...
def delete_tinfo_visitor_t(self) -> Any: ...
def delete_type_attr_t(self) -> Any: ...
def delete_type_attrs_t(self) -> Any: ...
def delete_type_mods_t(self) -> Any: ...
def delete_typedef_type_data_t(self) -> Any: ...
def delete_udm_t(self) -> Any: ...
def delete_udt_type_data_t(self) -> Any: ...
def delete_udtmembervec_t(self) -> Any: ...
def delete_udtmembervec_template_t(self) -> Any: ...
def delete_valstr_t(self) -> Any: ...
def delete_valstrs_t(self) -> Any: ...
def delete_valstrvec_t(self) -> Any: ...
def delete_value_repr_t(self) -> Any: ...
def deref_ptr(ptr_ea, tif, closure_obj=...) -> bool: ...
def deserialize_tinfo(tif, til, ptype, pfields, pfldcmts, cmt=...) -> bool: ...
def disown_aloc_visitor_t(*args, **kwargs): ...
def disown_argtinfo_helper_t(*args, **kwargs): ...
def disown_const_aloc_visitor_t(*args, **kwargs): ...
def disown_predicate_t(*args, **kwargs): ...
def disown_text_sink_t(*args, **kwargs): ...
def disown_tinfo_visitor_t(*args, **kwargs): ...
def dstr_tinfo(*args, **kwargs): ...
def dump_func_type_data(fti, praloc_bits) -> bool: ...
def edm_t___eq__(self, r) -> bool: ...
def edm_t___ne__(self, r) -> bool: ...
def edm_t_cmt_get(*args, **kwargs): ...
def edm_t_cmt_set(self, cmt) -> Any: ...
def edm_t_get_tid(self) -> tid_t: ...
def edm_t_name_get(*args, **kwargs): ...
def edm_t_name_set(self, name) -> Any: ...
def edm_t_swap(self, r) -> Any: ...
def edm_t_swiginit(*args, **kwargs): ...
def edm_t_swigregister(*args, **kwargs): ...
def edm_t_value_get(self) -> uint64: ...
def edm_t_value_set(self, value) -> Any: ...
def edmvec_t___eq__(self, r) -> bool: ...
def edmvec_t___getitem__(self, i) -> edm_t: ...
def edmvec_t___len__(self) -> size_t: ...
def edmvec_t___ne__(self, r) -> bool: ...
def edmvec_t___setitem__(self, i, v) -> Any: ...
def edmvec_t__del(self, x) -> bool: ...
def edmvec_t_add_unique(self, x) -> bool: ...
def edmvec_t_at(self, _idx) -> edm_t: ...
@overload
def edmvec_t_begin(self) -> edm_t: ...
@overload
def edmvec_t_begin(self) -> edm_t: ...
def edmvec_t_capacity(self) -> size_t: ...
def edmvec_t_clear(self) -> Any: ...
def edmvec_t_empty(self) -> bool: ...
@overload
def edmvec_t_end(self) -> edm_t: ...
@overload
def edmvec_t_end(self) -> edm_t: ...
@overload
def edmvec_t_erase(self, it) -> edm_t: ...
@overload
def edmvec_t_erase(self, first, last) -> edm_t: ...
def edmvec_t_extract(self) -> edm_t: ...
@overload
def edmvec_t_find(self, x) -> edm_t: ...
@overload
def edmvec_t_find(self, x) -> edm_t: ...
def edmvec_t_grow(self, x=...) -> Any: ...
def edmvec_t_has(self, x) -> bool: ...
def edmvec_t_inject(self, s, len) -> Any: ...
def edmvec_t_insert(self, it, x) -> edm_t: ...
def edmvec_t_pop_back(self) -> Any: ...
@overload
def edmvec_t_push_back(self, x) -> Any: ...
@overload
def edmvec_t_push_back(self) -> edm_t: ...
def edmvec_t_qclear(self) -> Any: ...
def edmvec_t_reserve(self, cnt) -> Any: ...
@overload
def edmvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def edmvec_t_resize(self, _newsize) -> Any: ...
def edmvec_t_size(self) -> size_t: ...
def edmvec_t_swap(self, r) -> Any: ...
def edmvec_t_swiginit(*args, **kwargs): ...
def edmvec_t_swigregister(*args, **kwargs): ...
def edmvec_t_truncate(self) -> Any: ...
def enable_numbered_types(ti, enable) -> bool: ...
def end_type_updating(utp) -> Any: ...
def enum_type_data_t__get_max_serial(ei, value) -> uchar: ...
def enum_type_data_t_add_constant(self, name, value, cmt=...) -> Any: ...
def enum_type_data_t_bte_get(self) -> bte_t: ...
def enum_type_data_t_bte_set(self, bte) -> Any: ...
def enum_type_data_t_calc_mask(self) -> uint64: ...
def enum_type_data_t_calc_nbytes(self) -> int: ...
@overload
def enum_type_data_t_find_member(self, name, _from=..., to=...) -> ssize_t: ...
@overload
def enum_type_data_t_find_member(self, value, serial, _from=..., to=..., vmask=...) -> ssize_t: ...
def enum_type_data_t_get_constant_group(self, group_start_index, group_size, idx) -> bool: ...
def enum_type_data_t_get_enum_radix(self) -> int: ...
def enum_type_data_t_group_sizes_get(*args, **kwargs): ...
def enum_type_data_t_group_sizes_set(self, group_sizes) -> Any: ...
def enum_type_data_t_has_lzero(self) -> bool: ...
def enum_type_data_t_is_bf(self) -> bool: ...
def enum_type_data_t_is_bin(self) -> bool: ...
def enum_type_data_t_is_char(self) -> bool: ...
def enum_type_data_t_is_dec(self) -> bool: ...
def enum_type_data_t_is_group_mask_at(self, idx) -> bool: ...
def enum_type_data_t_is_hex(self) -> bool: ...
def enum_type_data_t_is_number_signed(self) -> bool: ...
def enum_type_data_t_is_oct(self) -> bool: ...
def enum_type_data_t_is_sbin(self) -> bool: ...
def enum_type_data_t_is_shex(self) -> bool: ...
def enum_type_data_t_is_soct(self) -> bool: ...
def enum_type_data_t_is_udec(self) -> bool: ...
def enum_type_data_t_is_valid_group_sizes(self) -> bool: ...
def enum_type_data_t_set_enum_radix(self, radix, sign) -> Any: ...
def enum_type_data_t_set_lzero(self, on) -> Any: ...
def enum_type_data_t_set_nbytes(self, nbytes) -> bool: ...
def enum_type_data_t_set_value_repr(self, repr) -> tinfo_code_t: ...
def enum_type_data_t_store_64bit_values(self) -> bool: ...
def enum_type_data_t_swap(self, r) -> Any: ...
def enum_type_data_t_swiginit(*args, **kwargs): ...
def enum_type_data_t_swigregister(*args, **kwargs): ...
def enum_type_data_t_taenum_bits_get(self) -> uint32: ...
def enum_type_data_t_taenum_bits_set(self, taenum_bits) -> Any: ...
def extract_argloc(vloc, ptype, forbid_stkoff) -> bool: ...
def find_tinfo_udt_member(udm, typid, strmem_flags) -> int: ...
def first_named_type(*args, **kwargs): ...
def for_all_arglocs(vv, vloc, size, off=...) -> int: ...
def for_all_const_arglocs(vv, vloc, size, off=...) -> int: ...
def free_til(ti) -> Any: ...
def func_has_stkframe_hole(ea, fti) -> bool: ...
def func_type_data_t_cc_get(self) -> cm_t: ...
def func_type_data_t_cc_set(self, cc) -> Any: ...
def func_type_data_t_dump(self, praloc_bits=...) -> bool: ...
def func_type_data_t_flags_get(self) -> int: ...
def func_type_data_t_flags_set(self, flags) -> Any: ...
def func_type_data_t_get_call_method(self) -> int: ...
def func_type_data_t_guess_cc(self, purged, cc_flags) -> cm_t: ...
def func_type_data_t_is_const(self) -> bool: ...
def func_type_data_t_is_ctor(self) -> bool: ...
def func_type_data_t_is_dtor(self) -> bool: ...
def func_type_data_t_is_golang_cc(self) -> bool: ...
def func_type_data_t_is_high(self) -> bool: ...
def func_type_data_t_is_noret(self) -> bool: ...
def func_type_data_t_is_pure(self) -> bool: ...
def func_type_data_t_is_static(self) -> bool: ...
def func_type_data_t_is_swift_cc(self) -> bool: ...
def func_type_data_t_is_vararg_cc(self) -> bool: ...
def func_type_data_t_is_virtual(self) -> bool: ...
def func_type_data_t_retloc_get(self) -> argloc_t: ...
def func_type_data_t_retloc_set(self, retloc) -> Any: ...
def func_type_data_t_rettype_get(self) -> tinfo_t: ...
def func_type_data_t_rettype_set(self, rettype) -> Any: ...
def func_type_data_t_spoiled_get(self) -> reginfovec_t: ...
def func_type_data_t_spoiled_set(self, spoiled) -> Any: ...
def func_type_data_t_stkargs_get(self) -> uval_t: ...
def func_type_data_t_stkargs_set(self, stkargs) -> Any: ...
def func_type_data_t_swap(self, r) -> Any: ...
def func_type_data_t_swiginit(*args, **kwargs): ...
def func_type_data_t_swigregister(*args, **kwargs): ...
def funcarg_t___eq__(self, r) -> bool: ...
def funcarg_t___ne__(self, r) -> bool: ...
def funcarg_t_argloc_get(self) -> argloc_t: ...
def funcarg_t_argloc_set(self, argloc) -> Any: ...
def funcarg_t_cmt_get(*args, **kwargs): ...
def funcarg_t_cmt_set(self, cmt) -> Any: ...
def funcarg_t_flags_get(self) -> uint32: ...
def funcarg_t_flags_set(self, flags) -> Any: ...
def funcarg_t_name_get(*args, **kwargs): ...
def funcarg_t_name_set(self, name) -> Any: ...
def funcarg_t_swiginit(*args, **kwargs): ...
def funcarg_t_swigregister(*args, **kwargs): ...
def funcarg_t_type_get(self) -> tinfo_t: ...
def funcarg_t_type_set(self, type) -> Any: ...
def funcargvec_t___eq__(self, r) -> bool: ...
def funcargvec_t___getitem__(self, i) -> funcarg_t: ...
def funcargvec_t___len__(self) -> size_t: ...
def funcargvec_t___ne__(self, r) -> bool: ...
def funcargvec_t___setitem__(self, i, v) -> Any: ...
def funcargvec_t__del(self, x) -> bool: ...
def funcargvec_t_add_unique(self, x) -> bool: ...
def funcargvec_t_at(self, _idx) -> funcarg_t: ...
@overload
def funcargvec_t_begin(self) -> funcarg_t: ...
@overload
def funcargvec_t_begin(self) -> funcarg_t: ...
def funcargvec_t_capacity(self) -> size_t: ...
def funcargvec_t_clear(self) -> Any: ...
def funcargvec_t_empty(self) -> bool: ...
@overload
def funcargvec_t_end(self) -> funcarg_t: ...
@overload
def funcargvec_t_end(self) -> funcarg_t: ...
@overload
def funcargvec_t_erase(self, it) -> funcarg_t: ...
@overload
def funcargvec_t_erase(self, first, last) -> funcarg_t: ...
def funcargvec_t_extract(self) -> funcarg_t: ...
@overload
def funcargvec_t_find(self, x) -> funcarg_t: ...
@overload
def funcargvec_t_find(self, x) -> funcarg_t: ...
def funcargvec_t_grow(self, x=...) -> Any: ...
def funcargvec_t_has(self, x) -> bool: ...
def funcargvec_t_inject(self, s, len) -> Any: ...
def funcargvec_t_insert(self, it, x) -> funcarg_t: ...
def funcargvec_t_pop_back(self) -> Any: ...
@overload
def funcargvec_t_push_back(self, x) -> Any: ...
@overload
def funcargvec_t_push_back(self) -> funcarg_t: ...
def funcargvec_t_qclear(self) -> Any: ...
def funcargvec_t_reserve(self, cnt) -> Any: ...
@overload
def funcargvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def funcargvec_t_resize(self, _newsize) -> Any: ...
def funcargvec_t_size(self) -> size_t: ...
def funcargvec_t_swap(self, r) -> Any: ...
def funcargvec_t_swiginit(*args, **kwargs): ...
def funcargvec_t_swigregister(*args, **kwargs): ...
def funcargvec_t_truncate(self) -> Any: ...
def gcc_layout() -> bool: ...
def gen_decorate_name(name, mangle, cc, type) -> bool: ...
def gen_use_arg_tinfos(caller, fti, rargs, set_optype, is_stkarg_load, has_delay_slot) -> Any: ...
def gen_use_arg_tinfos2(_this, caller, fti, rargs) -> Any: ...
def get_abi_name() -> ssize_t: ...
def get_alias_target(ti, ordinal) -> uint32: ...
def get_arg_addrs(*args, **kwargs): ...
def get_base_type(t) -> type_t: ...
def get_c_header_path() -> ssize_t: ...
def get_c_macros() -> ssize_t: ...
def get_comp(comp) -> comp_t: ...
def get_compiler_abbr(*args, **kwargs): ...
def get_compiler_name(*args, **kwargs): ...
def get_compilers(ids, names, abbrs) -> Any: ...
def get_enum_member_expr(tif, serial, value) -> bool: ...
def get_full_type(t) -> type_t: ...
def get_idainfo64_by_type(out_flags, tif) -> bool: ...
def get_idainfo_by_type(tif) -> bool: ...
def get_idati() -> til_t: ...
def get_named_type(*args, **kwargs): ...
def get_named_type64(*args, **kwargs): ...
def get_named_type_tid(name) -> tid_t: ...
def get_numbered_type(*args, **kwargs): ...
def get_numbered_type_name(*args, **kwargs): ...
def get_ordinal_count(ti=...) -> uint32: ...
def get_ordinal_from_idb_type(name, type) -> int: ...
def get_ordinal_limit(ti=...) -> uint32: ...
def get_ordinal_qty(ti) -> uint32: ...
def get_scalar_bt(size) -> type_t: ...
def get_stock_tinfo(tif, id) -> bool: ...
def get_tid_name(tid) -> bool: ...
def get_tid_ordinal(tid) -> uint32: ...
def get_tinfo_attr(typid, key, bv, all_attrs) -> bool: ...
def get_tinfo_attrs(typid, tav, include_ref_attrs) -> bool: ...
def get_tinfo_by_flags(out, flags) -> bool: ...
def get_tinfo_details(typid, bt2, buf) -> bool: ...
def get_tinfo_details2(typid, bt2, buf) -> bool: ...
def get_tinfo_pdata(outptr, typid, what) -> size_t: ...
def get_tinfo_property(typid, gta_prop) -> size_t: ...
def get_tinfo_property4(typid, gta_prop, p1, p2, p3, p4) -> size_t: ...
def get_tinfo_size(p_effalign, typid, gts_code) -> size_t: ...
def get_tinfo_tid(tif, force_tid) -> tid_t: ...
def get_type_flags(t) -> type_t: ...
def get_type_ordinal(ti, name) -> int32: ...
def get_udm_by_fullname(udm, fullname) -> ssize_t: ...
def get_udm_tid(udm, udt_name) -> tid_t: ...
def get_vftable_ea(ordinal) -> ea_t: ...
def get_vftable_ordinal(vftable_ea) -> uint32: ...
def guess_func_cc(fti, npurged, cc_flags) -> cm_t: ...
def guess_tinfo(out, id) -> int: ...
def ida_lowertype_helper_t_func_has_stkframe_hole(self, candidate, candidate_data) -> bool: ...
def ida_lowertype_helper_t_get_func_purged_bytes(self, candidate, arg3) -> int: ...
def ida_lowertype_helper_t_swiginit(*args, **kwargs): ...
def ida_lowertype_helper_t_swigregister(*args, **kwargs): ...
def idc_get_local_type(ordinal, flags) -> int: ...
def idc_get_local_type_name(ordinal) -> char: ...
def idc_get_local_type_raw(*args, **kwargs): ...
def idc_get_type(*args, **kwargs): ...
def idc_get_type_raw(*args, **kwargs): ...
def idc_guess_type(*args, **kwargs): ...
def idc_parse_decl(*args, **kwargs): ...
def idc_parse_types(input, flags) -> int: ...
def idc_print_type(*args, **kwargs): ...
def idc_set_local_type(ordinal, dcl, flags) -> int: ...
def import_type(til, idx, name, flags=...) -> tid_t: ...
@overload
def inf_big_arg_align() -> bool: ...
@overload
def inf_big_arg_align(cc) -> bool: ...
@overload
def inf_huge_arg_align() -> bool: ...
@overload
def inf_huge_arg_align(cc) -> bool: ...
@overload
def inf_pack_stkargs() -> bool: ...
@overload
def inf_pack_stkargs(cc) -> bool: ...
@overload
def is_autosync(name, type) -> bool: ...
@overload
def is_autosync(name, tif) -> bool: ...
def is_code_far(cm) -> bool: ...
def is_comp_unsure(comp) -> comp_t: ...
def is_data_far(cm) -> bool: ...
def is_gcc() -> bool: ...
def is_gcc32() -> bool: ...
def is_gcc64() -> bool: ...
def is_golang_cc(cc) -> bool: ...
def is_ordinal_name(name, ord=...) -> bool: ...
def is_purging_cc(cm) -> bool: ...
def is_restype_enum(til, type) -> bool: ...
def is_restype_struct(til, type) -> bool: ...
def is_restype_struni(til, type) -> bool: ...
def is_restype_void(til, type) -> bool: ...
def is_sdacl_byte(t) -> bool: ...
def is_swift_cc(cc) -> bool: ...
def is_tah_byte(t) -> bool: ...
def is_type_arithmetic(t) -> bool: ...
def is_type_array(t) -> bool: ...
def is_type_bitfld(t) -> bool: ...
def is_type_bool(t) -> bool: ...
def is_type_char(t) -> bool: ...
def is_type_choosable(ti, ordinal) -> bool: ...
def is_type_complex(t) -> bool: ...
def is_type_const(t) -> bool: ...
def is_type_double(t) -> bool: ...
def is_type_enum(t) -> bool: ...
def is_type_ext_arithmetic(t) -> bool: ...
def is_type_ext_integral(t) -> bool: ...
def is_type_float(t) -> bool: ...
def is_type_floating(t) -> bool: ...
def is_type_func(t) -> bool: ...
def is_type_int(bt) -> bool: ...
def is_type_int128(t) -> bool: ...
def is_type_int16(t) -> bool: ...
def is_type_int32(t) -> bool: ...
def is_type_int64(t) -> bool: ...
def is_type_integral(t) -> bool: ...
def is_type_ldouble(t) -> bool: ...
def is_type_paf(t) -> bool: ...
def is_type_partial(t) -> bool: ...
def is_type_ptr(t) -> bool: ...
def is_type_ptr_or_array(t) -> bool: ...
def is_type_struct(t) -> bool: ...
def is_type_struni(t) -> bool: ...
def is_type_sue(t) -> bool: ...
def is_type_tbyte(t) -> bool: ...
def is_type_typedef(t) -> bool: ...
def is_type_uchar(t) -> bool: ...
def is_type_uint(t) -> bool: ...
def is_type_uint128(t) -> bool: ...
def is_type_uint16(t) -> bool: ...
def is_type_uint32(t) -> bool: ...
def is_type_uint64(t) -> bool: ...
def is_type_union(t) -> bool: ...
def is_type_unknown(t) -> bool: ...
def is_type_void(t) -> bool: ...
def is_type_volatile(t) -> bool: ...
def is_typeid_last(t) -> bool: ...
def is_user_cc(cm) -> bool: ...
def is_vararg_cc(cm) -> bool: ...
def lexcompare_tinfo(t1, t2, arg3) -> int: ...
def load_til(name, tildir=...) -> til_t: ...
def load_til_header(tildir, name) -> til_t: ...
def lower_type(til, tif, name=..., _helper=...) -> int: ...
def lowertype_helper_t_func_has_stkframe_hole(self, candidate, candidate_data) -> bool: ...
def lowertype_helper_t_get_func_purged_bytes(self, candidate, candidate_data) -> int: ...
def lowertype_helper_t_swigregister(*args, **kwargs): ...
def new_aloc_visitor_t(_self) -> aloc_visitor_t: ...
def new_argloc_t(r) -> argloc_t: ...
def new_argpart_t() -> argpart_t: ...
def new_argpartvec_t(x) -> argpartvec_t: ...
def new_argtinfo_helper_t(_self) -> argtinfo_helper_t: ...
def new_array_type_data_t(b=..., n=...) -> array_type_data_t: ...
def new_bitfield_type_data_t(_nbytes=..., _width=..., _is_unsigned=...) -> bitfield_type_data_t: ...
def new_callregs_t(cc) -> callregs_t: ...
def new_const_aloc_visitor_t(_self) -> const_aloc_visitor_t: ...
def new_custom_data_type_info_t() -> custom_data_type_info_t: ...
def new_edm_t() -> edm_t: ...
def new_edmvec_t(x) -> edmvec_t: ...
def new_enum_type_data_t(_bte=...) -> enum_type_data_t: ...
def new_func_type_data_t() -> func_type_data_t: ...
def new_funcarg_t() -> funcarg_t: ...
def new_funcargvec_t(x) -> funcargvec_t: ...
def new_ida_lowertype_helper_t(_tif, _ea, _pb) -> ida_lowertype_helper_t: ...
def new_predicate_t(_self) -> predicate_t: ...
def new_ptr_type_data_t(c=..., bps=..., p=..., d=...) -> ptr_type_data_t: ...
def new_reginfovec_t(x) -> reginfovec_t: ...
def new_regobj_t() -> regobj_t: ...
def new_regobjs_t() -> regobjs_t: ...
def new_regobjvec_t(x) -> regobjvec_t: ...
def new_rrel_t() -> rrel_t: ...
def new_scattered_aloc_t() -> scattered_aloc_t: ...
def new_simd_info_t(nm=..., sz=..., memt=...) -> simd_info_t: ...
def new_stkarg_area_info_t() -> stkarg_area_info_t: ...
def new_text_sink_t(_self) -> text_sink_t: ...
def new_til(name, desc) -> til_t: ...
def new_til_symbol_t(n=..., t=...) -> til_symbol_t: ...
def new_til_t() -> til_t: ...
def new_tinfo_t(r) -> tinfo_t: ...
def new_tinfo_visitor_t(_self, s=...) -> tinfo_visitor_t: ...
def new_type_attr_t() -> type_attr_t: ...
def new_type_attrs_t(x) -> type_attrs_t: ...
def new_type_mods_t() -> type_mods_t: ...
def new_typedef_type_data_t(_til, ord, _resolve=...) -> typedef_type_data_t: ...
def new_udm_t() -> udm_t: ...
def new_udt_type_data_t() -> udt_type_data_t: ...
def new_udtmembervec_t() -> udtmembervec_t: ...
def new_udtmembervec_template_t(x) -> udtmembervec_template_t: ...
def new_valstr_t() -> valstr_t: ...
def new_valstrs_t() -> valstrs_t: ...
def new_valstrvec_t(x) -> valstrvec_t: ...
def new_value_repr_t() -> value_repr_t: ...
def next_named_type(*args, **kwargs): ...
def optimize_argloc(vloc, size, gaps) -> bool: ...
def pack_idcobj_to_bv(obj, tif, bytes, objoff, pio_flags=...) -> error_t: ...
def pack_idcobj_to_idb(obj, tif, ea, pio_flags=...) -> error_t: ...
def pack_object_to_bv(*args, **kwargs): ...
def pack_object_to_idb(*args, **kwargs): ...
def parse_decl(out_tif, til, decl, pt_flags) -> bool: ...
def parse_decls(til, input, printer, hti_flags) -> int: ...
def predicate_t_should_display(self, til, name, type, fields) -> bool: ...
def predicate_t_swiginit(*args, **kwargs): ...
def predicate_t_swigregister(*args, **kwargs): ...
def print_argloc(vloc, size=..., vflags=...) -> size_t: ...
def print_decls(*args, **kwargs): ...
def print_tinfo(prefix, indent, cmtindent, flags, tif, name, cmt) -> bool: ...
def print_type(ea, prtype_flags) -> bool: ...
def ptr_type_data_t___eq__(self, r) -> bool: ...
def ptr_type_data_t___ne__(self, r) -> bool: ...
def ptr_type_data_t_based_ptr_size_get(self) -> uchar: ...
def ptr_type_data_t_based_ptr_size_set(self, based_ptr_size) -> Any: ...
def ptr_type_data_t_closure_get(self) -> tinfo_t: ...
def ptr_type_data_t_closure_set(self, closure) -> Any: ...
def ptr_type_data_t_delta_get(self) -> int32: ...
def ptr_type_data_t_delta_set(self, delta) -> Any: ...
def ptr_type_data_t_is_code_ptr(self) -> bool: ...
def ptr_type_data_t_is_shifted(self) -> bool: ...
def ptr_type_data_t_obj_type_get(self) -> tinfo_t: ...
def ptr_type_data_t_obj_type_set(self, obj_type) -> Any: ...
def ptr_type_data_t_parent_get(self) -> tinfo_t: ...
def ptr_type_data_t_parent_set(self, parent) -> Any: ...
def ptr_type_data_t_swap(self, r) -> Any: ...
def ptr_type_data_t_swiginit(*args, **kwargs): ...
def ptr_type_data_t_swigregister(*args, **kwargs): ...
def ptr_type_data_t_taptr_bits_get(self) -> uchar: ...
def ptr_type_data_t_taptr_bits_set(self, taptr_bits) -> Any: ...
def read_tinfo_bitfield_value(typid, v, bitoff) -> uint64: ...
def reginfovec_t___eq__(self, r) -> bool: ...
def reginfovec_t___getitem__(self, i) -> reg_info_t: ...
def reginfovec_t___len__(self) -> size_t: ...
def reginfovec_t___ne__(self, r) -> bool: ...
def reginfovec_t___setitem__(self, i, v) -> Any: ...
def reginfovec_t__del(self, x) -> bool: ...
def reginfovec_t_add_unique(self, x) -> bool: ...
def reginfovec_t_at(self, _idx) -> reg_info_t: ...
@overload
def reginfovec_t_begin(self) -> reg_info_t: ...
@overload
def reginfovec_t_begin(self) -> reg_info_t: ...
def reginfovec_t_capacity(self) -> size_t: ...
def reginfovec_t_clear(self) -> Any: ...
def reginfovec_t_empty(self) -> bool: ...
@overload
def reginfovec_t_end(self) -> reg_info_t: ...
@overload
def reginfovec_t_end(self) -> reg_info_t: ...
@overload
def reginfovec_t_erase(self, it) -> reg_info_t: ...
@overload
def reginfovec_t_erase(self, first, last) -> reg_info_t: ...
def reginfovec_t_extract(self) -> reg_info_t: ...
@overload
def reginfovec_t_find(self, x) -> reg_info_t: ...
@overload
def reginfovec_t_find(self, x) -> reg_info_t: ...
def reginfovec_t_grow(self, x=...) -> Any: ...
def reginfovec_t_has(self, x) -> bool: ...
def reginfovec_t_inject(self, s, len) -> Any: ...
def reginfovec_t_insert(self, it, x) -> reg_info_t: ...
def reginfovec_t_pop_back(self) -> Any: ...
@overload
def reginfovec_t_push_back(self, x) -> Any: ...
@overload
def reginfovec_t_push_back(self) -> reg_info_t: ...
def reginfovec_t_qclear(self) -> Any: ...
def reginfovec_t_reserve(self, cnt) -> Any: ...
@overload
def reginfovec_t_resize(self, _newsize, x) -> Any: ...
@overload
def reginfovec_t_resize(self, _newsize) -> Any: ...
def reginfovec_t_size(self) -> size_t: ...
def reginfovec_t_swap(self, r) -> Any: ...
def reginfovec_t_swiginit(*args, **kwargs): ...
def reginfovec_t_swigregister(*args, **kwargs): ...
def reginfovec_t_truncate(self) -> Any: ...
def regobj_t_regidx_get(self) -> int: ...
def regobj_t_regidx_set(self, regidx) -> Any: ...
def regobj_t_relocate_get(self) -> int: ...
def regobj_t_relocate_set(self, relocate) -> Any: ...
def regobj_t_size(self) -> size_t: ...
def regobj_t_swiginit(*args, **kwargs): ...
def regobj_t_swigregister(*args, **kwargs): ...
def regobj_t_value_get(*args, **kwargs): ...
def regobj_t_value_set(self, value) -> Any: ...
def regobjs_t_swiginit(*args, **kwargs): ...
def regobjs_t_swigregister(*args, **kwargs): ...
def regobjvec_t___getitem__(self, i) -> regobj_t: ...
def regobjvec_t___len__(self) -> size_t: ...
def regobjvec_t___setitem__(self, i, v) -> Any: ...
def regobjvec_t_at(self, _idx) -> regobj_t: ...
@overload
def regobjvec_t_begin(self) -> regobj_t: ...
@overload
def regobjvec_t_begin(self) -> regobj_t: ...
def regobjvec_t_capacity(self) -> size_t: ...
def regobjvec_t_clear(self) -> Any: ...
def regobjvec_t_empty(self) -> bool: ...
@overload
def regobjvec_t_end(self) -> regobj_t: ...
@overload
def regobjvec_t_end(self) -> regobj_t: ...
@overload
def regobjvec_t_erase(self, it) -> regobj_t: ...
@overload
def regobjvec_t_erase(self, first, last) -> regobj_t: ...
def regobjvec_t_extract(self) -> regobj_t: ...
def regobjvec_t_grow(self, x=...) -> Any: ...
def regobjvec_t_inject(self, s, len) -> Any: ...
def regobjvec_t_insert(self, it, x) -> regobj_t: ...
def regobjvec_t_pop_back(self) -> Any: ...
@overload
def regobjvec_t_push_back(self, x) -> Any: ...
@overload
def regobjvec_t_push_back(self) -> regobj_t: ...
def regobjvec_t_qclear(self) -> Any: ...
def regobjvec_t_reserve(self, cnt) -> Any: ...
@overload
def regobjvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def regobjvec_t_resize(self, _newsize) -> Any: ...
def regobjvec_t_size(self) -> size_t: ...
def regobjvec_t_swap(self, r) -> Any: ...
def regobjvec_t_swiginit(*args, **kwargs): ...
def regobjvec_t_swigregister(*args, **kwargs): ...
def regobjvec_t_truncate(self) -> Any: ...
def remove_abi_opts(abi_opts, user_level=...) -> bool: ...
def remove_pointer(tif) -> tinfo_t: ...
def remove_tinfo_pointer(*args, **kwargs): ...
def replace_ordinal_typerefs(til, tif) -> int: ...
def resolve_typedef(*args, **kwargs): ...
def rrel_t_off_get(self) -> sval_t: ...
def rrel_t_off_set(self, off) -> Any: ...
def rrel_t_reg_get(self) -> int: ...
def rrel_t_reg_set(self, reg) -> Any: ...
def rrel_t_swiginit(*args, **kwargs): ...
def rrel_t_swigregister(*args, **kwargs): ...
def save_tinfo(tif, til, ord, name, ntf_flags) -> tinfo_code_t: ...
def scattered_aloc_t_swiginit(*args, **kwargs): ...
def scattered_aloc_t_swigregister(*args, **kwargs): ...
def score_tinfo(tif) -> uint32: ...
def serialize_tinfo(type, fields, fldcmts, tif, sudt_flags) -> bool: ...
def set_abi_name(abiname, user_level=...) -> bool: ...
def set_c_header_path(incdir) -> Any: ...
def set_c_macros(macros) -> Any: ...
def set_compiler(cc, flags, abiname=...) -> bool: ...
def set_compiler_id(id, abiname=...) -> bool: ...
def set_compiler_string(compstr, user_level) -> bool: ...
def set_numbered_type(ti, ordinal, ntf_flags, name, type, fields=..., cmt=..., fldcmts=..., sclass=...) -> tinfo_code_t: ...
def set_tinfo_attr(tif, ta, may_overwrite) -> bool: ...
def set_tinfo_attrs(tif, ta) -> bool: ...
def set_tinfo_property(tif, sta_prop, x) -> size_t: ...
def set_tinfo_property4(tif, sta_prop, p1, p2, p3, p4) -> size_t: ...
def set_type_alias(ti, src_ordinal, dst_ordinal) -> bool: ...
def set_type_choosable(ti, ordinal, value) -> Any: ...
def set_vftable_ea(ordinal, vftable_ea) -> bool: ...
def simd_info_t_match_pattern(self, pattern) -> bool: ...
def simd_info_t_memtype_get(self) -> type_t: ...
def simd_info_t_memtype_set(self, memtype) -> Any: ...
def simd_info_t_name_get(*args, **kwargs): ...
def simd_info_t_name_set(self, name) -> Any: ...
def simd_info_t_size_get(self) -> uint16: ...
def simd_info_t_size_set(self, size) -> Any: ...
def simd_info_t_swiginit(*args, **kwargs): ...
def simd_info_t_swigregister(*args, **kwargs): ...
def simd_info_t_tif_get(self) -> tinfo_t: ...
def simd_info_t_tif_set(self, tif) -> Any: ...
def stkarg_area_info_t_cb_get(self) -> size_t: ...
def stkarg_area_info_t_cb_set(self, cb) -> Any: ...
def stkarg_area_info_t_linkage_area_get(self) -> sval_t: ...
def stkarg_area_info_t_linkage_area_set(self, linkage_area) -> Any: ...
def stkarg_area_info_t_shadow_size_get(self) -> sval_t: ...
def stkarg_area_info_t_shadow_size_set(self, shadow_size) -> Any: ...
def stkarg_area_info_t_stkarg_offset_get(self) -> sval_t: ...
def stkarg_area_info_t_stkarg_offset_set(self, stkarg_offset) -> Any: ...
def stkarg_area_info_t_swiginit(*args, **kwargs): ...
def stkarg_area_info_t_swigregister(*args, **kwargs): ...
def store_til(ti, tildir, name) -> bool: ...
def switch_to_golang() -> Any: ...
def text_sink_t__print(self, str) -> int: ...
def text_sink_t_swiginit(*args, **kwargs): ...
def text_sink_t_swigregister(*args, **kwargs): ...
def til_symbol_t_name_get(*args, **kwargs): ...
def til_symbol_t_name_set(self, name) -> Any: ...
def til_symbol_t_swiginit(*args, **kwargs): ...
def til_symbol_t_swigregister(*args, **kwargs): ...
def til_symbol_t_til_get(self) -> til_t: ...
def til_symbol_t_til_set(self, til) -> Any: ...
def til_t_base(self, n) -> til_t: ...
def til_t_cc_get(self) -> compiler_info_t: ...
def til_t_cc_set(self, cc) -> Any: ...
def til_t_desc_get(*args, **kwargs): ...
def til_t_desc_set(self, desc) -> Any: ...
def til_t_flags_get(self) -> uint32: ...
def til_t_flags_set(self, flags) -> Any: ...
def til_t_is_dirty(self) -> bool: ...
def til_t_name_get(*args, **kwargs): ...
def til_t_name_set(self, name) -> Any: ...
def til_t_nbases_get(self) -> int: ...
def til_t_nbases_set(self, nbases) -> Any: ...
def til_t_nrefs_get(self) -> int: ...
def til_t_nrefs_set(self, nrefs) -> Any: ...
def til_t_nstreams_get(self) -> int: ...
def til_t_nstreams_set(self, nstreams) -> Any: ...
def til_t_set_dirty(self) -> Any: ...
def til_t_streams_get(*args, **kwargs): ...
def til_t_streams_set(self, streams) -> Any: ...
def til_t_swiginit(*args, **kwargs): ...
def til_t_swigregister(*args, **kwargs): ...
def tinfo_errstr(*args, **kwargs): ...
def tinfo_t___eq__(self, r) -> bool: ...
def tinfo_t___ge__(self, r) -> bool: ...
def tinfo_t___gt__(self, r) -> bool: ...
def tinfo_t___le__(self, r) -> bool: ...
def tinfo_t___lt__(self, r) -> bool: ...
def tinfo_t___ne__(self, r) -> bool: ...
def tinfo_t___str__(self) -> qstring: ...
def tinfo_t__print(self, name=..., prtype_flags=..., indent=..., cmtindent=..., prefix=..., cmt=...) -> bool: ...
def tinfo_t_add_edm(self, edm, bmask=..., etf_flags=..., idx=...) -> tinfo_code_t: ...
def tinfo_t_add_udm(self, udm, etf_flags=..., times=..., idx=...) -> tinfo_code_t: ...
def tinfo_t_append_covered(self, out, offset=...) -> bool: ...
def tinfo_t_calc_gaps(self, out) -> bool: ...
def tinfo_t_calc_purged_bytes(self) -> int: ...
def tinfo_t_calc_score(self) -> uint32: ...
def tinfo_t_calc_udt_aligns(self, sudt_flags=...) -> bool: ...
def tinfo_t_change_sign(self, sign) -> bool: ...
def tinfo_t_clear(self) -> Any: ...
def tinfo_t_clr_const(self) -> bool: ...
def tinfo_t_clr_const_volatile(self) -> bool: ...
def tinfo_t_clr_decl_const_volatile(self) -> Any: ...
def tinfo_t_clr_volatile(self) -> bool: ...
def tinfo_t_compare(self, r) -> int: ...
def tinfo_t_compare_with(self, r, tcflags=...) -> bool: ...
def tinfo_t_convert_array_to_ptr(self) -> bool: ...
def tinfo_t_copy(self) -> tinfo_t: ...
def tinfo_t_copy_type(self, til, name, ntf_flags=...) -> tinfo_code_t: ...
@overload
def tinfo_t_create_array(self, p, decl_type=...) -> bool: ...
@overload
def tinfo_t_create_array(self, tif, nelems=..., base=..., decl_type=...) -> bool: ...
@overload
def tinfo_t_create_bitfield(self, p, decl_type=...) -> bool: ...
@overload
def tinfo_t_create_bitfield(self, nbytes, width, is_unsigned=..., decl_type=...) -> bool: ...
def tinfo_t_create_enum(self, p, decl_type=...) -> bool: ...
def tinfo_t_create_forward_decl(self, til, decl_type, name, ntf_flags=...) -> tinfo_code_t: ...
def tinfo_t_create_func(self, p, decl_type=...) -> bool: ...
@overload
def tinfo_t_create_ptr(self, p, decl_type=...) -> bool: ...
@overload
def tinfo_t_create_ptr(self, tif, bps=..., decl_type=...) -> bool: ...
def tinfo_t_create_simple_type(self, decl_type) -> bool: ...
@overload
def tinfo_t_create_typedef(self, p, decl_type=..., try_ordinal=...) -> bool: ...
@overload
def tinfo_t_create_typedef(self, til, name, decl_type=..., try_ordinal=...) -> Any: ...
@overload
def tinfo_t_create_typedef(self, til, ord, decl_type=...) -> Any: ...
@overload
def tinfo_t_create_udt(self, p) -> bool: ...
@overload
def tinfo_t_create_udt(self, p, decl_type) -> bool: ...
def tinfo_t_del_attr(self, key, make_copy=...) -> bool: ...
def tinfo_t_del_attrs(self) -> Any: ...
def tinfo_t_del_edm(self, idx, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_del_edms(self, idx1, idx2, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_del_udm(self, index, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_del_udms(self, idx1, idx2, etf_flags=...) -> tinfo_code_t: ...
@overload
def tinfo_t_deserialize(self, til, ptype, pfields=..., pfldcmts=..., cmt=...) -> bool: ...
@overload
def tinfo_t_deserialize(self, til, type, fields, cmts=...) -> bool: ...
def tinfo_t_dstr(*args, **kwargs): ...
def tinfo_t_edit_array(self, editor, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_edit_bitfield(self, editor, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_edit_edm(self, idx, value, bmask=..., etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_edit_enum(self, editor, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_edit_func(self, editor, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_edit_ptr(self, editor, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_edit_udt(self, editor, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_empty(self) -> bool: ...
def tinfo_t_equals_to(self, r) -> bool: ...
def tinfo_t_expand_udt(self, idx, delta, etf_flags=...) -> tinfo_code_t: ...
@overload
def tinfo_t_find_edm(self, edm, value, bmask=..., serial=...) -> tinfo_code_t: ...
@overload
def tinfo_t_find_edm(self, edm, name) -> tinfo_code_t: ...
def tinfo_t_find_udm(self, udm, strmem_flags) -> int: ...
def tinfo_t_force_tid(self) -> tid_t: ...
def tinfo_t_get_alias_target(self) -> uint32: ...
def tinfo_t_get_array_details(self, ai) -> bool: ...
def tinfo_t_get_array_element(self) -> tinfo_t: ...
def tinfo_t_get_array_nelems(self) -> int: ...
def tinfo_t_get_attr(*args, **kwargs): ...
def tinfo_t_get_attrs(self, tav, all_attrs=...) -> bool: ...
def tinfo_t_get_bit_buckets(self, buckets) -> bool: ...
def tinfo_t_get_bitfield_details(self, bi) -> bool: ...
def tinfo_t_get_declalign(self) -> uchar: ...
def tinfo_t_get_decltype(self) -> type_t: ...
def tinfo_t_get_edm(self, edm, idx) -> tinfo_code_t: ...
def tinfo_t_get_edm_by_tid(self, edm, tid) -> ssize_t: ...
def tinfo_t_get_enum_base_type(self) -> type_t: ...
def tinfo_t_get_enum_details(self, ei) -> bool: ...
def tinfo_t_get_enum_radix(self) -> int: ...
def tinfo_t_get_final_element(self) -> tinfo_t: ...
def tinfo_t_get_final_ordinal(self) -> uint32: ...
def tinfo_t_get_final_type_name(self) -> bool: ...
def tinfo_t_get_forward_type(self) -> type_t: ...
def tinfo_t_get_func_details(self, fi, gtd=...) -> bool: ...
def tinfo_t_get_innermost_udm(self, bitoffset) -> tinfo_t: ...
def tinfo_t_get_methods(self, methods) -> bool: ...
def tinfo_t_get_modifiers(self) -> type_t: ...
def tinfo_t_get_named_type(self, til, name, decl_type=..., resolve=..., try_ordinal=...) -> bool: ...
def tinfo_t_get_nargs(self) -> int: ...
def tinfo_t_get_next_type_name(self) -> bool: ...
def tinfo_t_get_nice_type_name(self) -> bool: ...
def tinfo_t_get_nth_arg(self, n) -> tinfo_t: ...
def tinfo_t_get_numbered_type(self, til, ordinal, decl_type=..., resolve=...) -> bool: ...
def tinfo_t_get_onemember_type(self) -> tinfo_t: ...
def tinfo_t_get_ordinal(self) -> uint32: ...
def tinfo_t_get_pointed_object(self) -> tinfo_t: ...
def tinfo_t_get_ptr_details(self, pi) -> bool: ...
def tinfo_t_get_ptrarr_object(self) -> tinfo_t: ...
def tinfo_t_get_ptrarr_objsize(self) -> int: ...
def tinfo_t_get_realtype(self, full=...) -> type_t: ...
def tinfo_t_get_rettype(self) -> tinfo_t: ...
def tinfo_t_get_sign(self) -> type_sign_t: ...
def tinfo_t_get_size(self, p_effalign=..., gts_code=...) -> size_t: ...
def tinfo_t_get_stock(id) -> tinfo_t: ...
def tinfo_t_get_tid(self) -> tid_t: ...
def tinfo_t_get_til(self) -> til_t: ...
def tinfo_t_get_type_by_edm_name(self, mname, til=...) -> bool: ...
def tinfo_t_get_type_by_tid(self, tid) -> bool: ...
def tinfo_t_get_type_cmt(self) -> int: ...
def tinfo_t_get_type_name(self) -> bool: ...
def tinfo_t_get_type_rptcmt(self) -> bool: ...
def tinfo_t_get_udm_by_tid(self, udm, tid) -> ssize_t: ...
def tinfo_t_get_udm_tid(self, idx) -> tid_t: ...
def tinfo_t_get_udt_details(self, udt, gtd=...) -> bool: ...
def tinfo_t_get_udt_nmembers(self) -> int: ...
def tinfo_t_get_unpadded_size(self) -> size_t: ...
def tinfo_t_has_details(self) -> bool: ...
def tinfo_t_has_union(self) -> bool: ...
def tinfo_t_has_vftable(self) -> bool: ...
def tinfo_t_is_aliased(self) -> bool: ...
def tinfo_t_is_anonymous_udt(self) -> bool: ...
def tinfo_t_is_arithmetic(self) -> bool: ...
def tinfo_t_is_array(self) -> bool: ...
def tinfo_t_is_bitfield(self) -> bool: ...
def tinfo_t_is_bitmask_enum(self) -> bool: ...
def tinfo_t_is_bool(self) -> bool: ...
def tinfo_t_is_castable_to(self, target) -> bool: ...
def tinfo_t_is_char(self) -> bool: ...
def tinfo_t_is_complex(self) -> bool: ...
def tinfo_t_is_const(self) -> bool: ...
def tinfo_t_is_correct(self) -> bool: ...
def tinfo_t_is_decl_array(self) -> bool: ...
def tinfo_t_is_decl_bitfield(self) -> bool: ...
def tinfo_t_is_decl_bool(self) -> bool: ...
def tinfo_t_is_decl_char(self) -> bool: ...
def tinfo_t_is_decl_complex(self) -> bool: ...
def tinfo_t_is_decl_const(self) -> bool: ...
def tinfo_t_is_decl_double(self) -> bool: ...
def tinfo_t_is_decl_enum(self) -> bool: ...
def tinfo_t_is_decl_float(self) -> bool: ...
def tinfo_t_is_decl_floating(self) -> bool: ...
def tinfo_t_is_decl_func(self) -> bool: ...
def tinfo_t_is_decl_int(self) -> bool: ...
def tinfo_t_is_decl_int128(self) -> bool: ...
def tinfo_t_is_decl_int16(self) -> bool: ...
def tinfo_t_is_decl_int32(self) -> bool: ...
def tinfo_t_is_decl_int64(self) -> bool: ...
def tinfo_t_is_decl_last(self) -> bool: ...
def tinfo_t_is_decl_ldouble(self) -> bool: ...
def tinfo_t_is_decl_paf(self) -> bool: ...
def tinfo_t_is_decl_partial(self) -> bool: ...
def tinfo_t_is_decl_ptr(self) -> bool: ...
def tinfo_t_is_decl_struct(self) -> bool: ...
def tinfo_t_is_decl_sue(self) -> bool: ...
def tinfo_t_is_decl_tbyte(self) -> bool: ...
def tinfo_t_is_decl_typedef(self) -> bool: ...
def tinfo_t_is_decl_uchar(self) -> bool: ...
def tinfo_t_is_decl_udt(self) -> bool: ...
def tinfo_t_is_decl_uint(self) -> bool: ...
def tinfo_t_is_decl_uint128(self) -> bool: ...
def tinfo_t_is_decl_uint16(self) -> bool: ...
def tinfo_t_is_decl_uint32(self) -> bool: ...
def tinfo_t_is_decl_uint64(self) -> bool: ...
def tinfo_t_is_decl_union(self) -> bool: ...
def tinfo_t_is_decl_unknown(self) -> bool: ...
def tinfo_t_is_decl_void(self) -> bool: ...
def tinfo_t_is_decl_volatile(self) -> bool: ...
def tinfo_t_is_double(self) -> bool: ...
def tinfo_t_is_empty_udt(self) -> bool: ...
def tinfo_t_is_enum(self) -> bool: ...
def tinfo_t_is_ext_arithmetic(self) -> bool: ...
def tinfo_t_is_ext_integral(self) -> bool: ...
def tinfo_t_is_float(self) -> bool: ...
def tinfo_t_is_floating(self) -> bool: ...
def tinfo_t_is_forward_decl(self) -> bool: ...
def tinfo_t_is_forward_enum(self) -> bool: ...
def tinfo_t_is_forward_struct(self) -> bool: ...
def tinfo_t_is_forward_union(self) -> bool: ...
def tinfo_t_is_from_subtil(self) -> bool: ...
def tinfo_t_is_func(self) -> bool: ...
def tinfo_t_is_funcptr(self) -> bool: ...
def tinfo_t_is_high_func(self) -> bool: ...
def tinfo_t_is_int(self) -> bool: ...
def tinfo_t_is_int128(self) -> bool: ...
def tinfo_t_is_int16(self) -> bool: ...
def tinfo_t_is_int32(self) -> bool: ...
def tinfo_t_is_int64(self) -> bool: ...
def tinfo_t_is_integral(self) -> bool: ...
def tinfo_t_is_ldouble(self) -> bool: ...
def tinfo_t_is_manually_castable_to(self, target) -> bool: ...
def tinfo_t_is_one_fpval(self) -> bool: ...
def tinfo_t_is_paf(self) -> bool: ...
def tinfo_t_is_partial(self) -> bool: ...
def tinfo_t_is_ptr(self) -> bool: ...
def tinfo_t_is_ptr_or_array(self) -> bool: ...
def tinfo_t_is_purging_cc(self) -> bool: ...
def tinfo_t_is_pvoid(self) -> bool: ...
def tinfo_t_is_scalar(self) -> bool: ...
def tinfo_t_is_shifted_ptr(self) -> bool: ...
def tinfo_t_is_signed(self) -> bool: ...
def tinfo_t_is_small_udt(self) -> bool: ...
def tinfo_t_is_sse_type(self) -> bool: ...
def tinfo_t_is_struct(self) -> bool: ...
def tinfo_t_is_sue(self) -> bool: ...
def tinfo_t_is_tbyte(self) -> bool: ...
def tinfo_t_is_typedef(self) -> bool: ...
def tinfo_t_is_typeref(self) -> bool: ...
def tinfo_t_is_uchar(self) -> bool: ...
def tinfo_t_is_udt(self) -> bool: ...
def tinfo_t_is_uint(self) -> bool: ...
def tinfo_t_is_uint128(self) -> bool: ...
def tinfo_t_is_uint16(self) -> bool: ...
def tinfo_t_is_uint32(self) -> bool: ...
def tinfo_t_is_uint64(self) -> bool: ...
def tinfo_t_is_union(self) -> bool: ...
def tinfo_t_is_unknown(self) -> bool: ...
def tinfo_t_is_unsigned(self) -> bool: ...
def tinfo_t_is_user_cc(self) -> bool: ...
def tinfo_t_is_vararg_cc(self) -> bool: ...
def tinfo_t_is_varmember(self) -> bool: ...
def tinfo_t_is_varstruct(self) -> bool: ...
def tinfo_t_is_vftable(self) -> bool: ...
def tinfo_t_is_void(self) -> bool: ...
def tinfo_t_is_volatile(self) -> bool: ...
def tinfo_t_is_well_defined(self) -> bool: ...
def tinfo_t_parse(self, decl, til=..., pt_flags=...) -> bool: ...
def tinfo_t_present(self) -> bool: ...
def tinfo_t_read_bitfield_value(self, v, bitoff) -> uint64: ...
def tinfo_t_remove_ptr_or_array(self) -> bool: ...
def tinfo_t_rename_edm(self, idx, name, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_rename_type(self, name, ntf_flags=...) -> tinfo_code_t: ...
def tinfo_t_rename_udm(self, index, name, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_requires_qualifier(self, name, offset) -> bool: ...
def tinfo_t_save_type(self, ntf_flags=...) -> tinfo_code_t: ...
def tinfo_t_serialize(*args, **kwargs): ...
def tinfo_t_set_attr(self, ta, may_overwrite=...) -> bool: ...
def tinfo_t_set_attrs(self, tav) -> bool: ...
def tinfo_t_set_const(self) -> Any: ...
def tinfo_t_set_declalign(self, declalign) -> bool: ...
def tinfo_t_set_edm_cmt(self, idx, cmt, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_enum_is_bitmask(self, stance=..., etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_enum_repr(self, repr, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_enum_sign(self, sign, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_enum_width(self, nbytes, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_methods(self, methods) -> bool: ...
def tinfo_t_set_modifiers(self, mod) -> Any: ...
def tinfo_t_set_named_type(self, til, name, ntf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_numbered_type(self, til, ord, ntf_flags=..., name=...) -> tinfo_code_t: ...
def tinfo_t_set_symbol_type(self, til, name, ntf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_type_alias(self, dest_ord) -> bool: ...
def tinfo_t_set_type_alignment(self, declalign, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_type_cmt(self, cmt, is_regcmt=..., etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_udm_cmt(self, index, cmt, is_regcmt=..., etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_udm_repr(self, index, repr, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_udm_type(self, index, tif, etf_flags=..., repr=...) -> tinfo_code_t: ...
def tinfo_t_set_udt_alignment(self, sda, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_udt_pack(self, pack, etf_flags=...) -> tinfo_code_t: ...
def tinfo_t_set_volatile(self) -> Any: ...
def tinfo_t_swap(self, r) -> Any: ...
def tinfo_t_swiginit(*args, **kwargs): ...
def tinfo_t_swigregister(*args, **kwargs): ...
def tinfo_t_write_bitfield_value(self, dst, v, bitoff) -> uint64: ...
def tinfo_visitor_t_apply_to(self, tif, out=..., name=..., cmt=...) -> int: ...
def tinfo_visitor_t_prune_now(self) -> Any: ...
def tinfo_visitor_t_state_get(self) -> int: ...
def tinfo_visitor_t_state_set(self, state) -> Any: ...
def tinfo_visitor_t_swiginit(*args, **kwargs): ...
def tinfo_visitor_t_swigregister(*args, **kwargs): ...
def tinfo_visitor_t_visit_type(self, out, tif, name, cmt) -> int: ...
def type_attr_t___ge__(self, r) -> bool: ...
def type_attr_t___lt__(self, r) -> bool: ...
def type_attr_t_key_get(*args, **kwargs): ...
def type_attr_t_key_set(self, key) -> Any: ...
def type_attr_t_swiginit(*args, **kwargs): ...
def type_attr_t_swigregister(*args, **kwargs): ...
def type_attr_t_value_get(*args, **kwargs): ...
def type_attr_t_value_set(self, value) -> Any: ...
def type_attrs_t___getitem__(self, i) -> type_attr_t: ...
def type_attrs_t___len__(self) -> size_t: ...
def type_attrs_t___setitem__(self, i, v) -> Any: ...
def type_attrs_t_at(self, _idx) -> type_attr_t: ...
@overload
def type_attrs_t_begin(self) -> type_attr_t: ...
@overload
def type_attrs_t_begin(self) -> type_attr_t: ...
def type_attrs_t_capacity(self) -> size_t: ...
def type_attrs_t_clear(self) -> Any: ...
def type_attrs_t_empty(self) -> bool: ...
@overload
def type_attrs_t_end(self) -> type_attr_t: ...
@overload
def type_attrs_t_end(self) -> type_attr_t: ...
@overload
def type_attrs_t_erase(self, it) -> type_attr_t: ...
@overload
def type_attrs_t_erase(self, first, last) -> type_attr_t: ...
def type_attrs_t_extract(self) -> type_attr_t: ...
def type_attrs_t_grow(self, x=...) -> Any: ...
def type_attrs_t_inject(self, s, len) -> Any: ...
def type_attrs_t_insert(self, it, x) -> type_attr_t: ...
def type_attrs_t_pop_back(self) -> Any: ...
@overload
def type_attrs_t_push_back(self, x) -> Any: ...
@overload
def type_attrs_t_push_back(self) -> type_attr_t: ...
def type_attrs_t_qclear(self) -> Any: ...
def type_attrs_t_reserve(self, cnt) -> Any: ...
@overload
def type_attrs_t_resize(self, _newsize, x) -> Any: ...
@overload
def type_attrs_t_resize(self, _newsize) -> Any: ...
def type_attrs_t_size(self) -> size_t: ...
def type_attrs_t_swap(self, r) -> Any: ...
def type_attrs_t_swiginit(*args, **kwargs): ...
def type_attrs_t_swigregister(*args, **kwargs): ...
def type_attrs_t_truncate(self) -> Any: ...
def type_mods_t_clear(self) -> Any: ...
def type_mods_t_cmt_get(*args, **kwargs): ...
def type_mods_t_cmt_set(self, cmt) -> Any: ...
def type_mods_t_flags_get(self) -> int: ...
def type_mods_t_flags_set(self, flags) -> Any: ...
def type_mods_t_has_cmt(self) -> bool: ...
def type_mods_t_has_info(self) -> bool: ...
def type_mods_t_has_name(self) -> bool: ...
def type_mods_t_has_type(self) -> bool: ...
def type_mods_t_is_rptcmt(self) -> bool: ...
def type_mods_t_name_get(*args, **kwargs): ...
def type_mods_t_name_set(self, name) -> Any: ...
def type_mods_t_set_new_cmt(self, c, rptcmt) -> Any: ...
def type_mods_t_set_new_name(self, n) -> Any: ...
def type_mods_t_set_new_type(self, t) -> Any: ...
def type_mods_t_swiginit(*args, **kwargs): ...
def type_mods_t_swigregister(*args, **kwargs): ...
def type_mods_t_type_get(self) -> tinfo_t: ...
def type_mods_t_type_set(self, type) -> Any: ...
def typedef_type_data_t_is_ordref_get(self) -> bool: ...
def typedef_type_data_t_is_ordref_set(self, is_ordref) -> Any: ...
def typedef_type_data_t_name_get(*args, **kwargs): ...
def typedef_type_data_t_name_set(self, name) -> Any: ...
def typedef_type_data_t_ordinal_get(self) -> uint32: ...
def typedef_type_data_t_ordinal_set(self, ordinal) -> Any: ...
def typedef_type_data_t_resolve_get(self) -> bool: ...
def typedef_type_data_t_resolve_set(self, resolve) -> Any: ...
def typedef_type_data_t_swap(self, r) -> Any: ...
def typedef_type_data_t_swiginit(*args, **kwargs): ...
def typedef_type_data_t_swigregister(*args, **kwargs): ...
def typedef_type_data_t_til_get(self) -> til_t: ...
def typedef_type_data_t_til_set(self, til) -> Any: ...
def udm_t___eq__(self, r) -> bool: ...
def udm_t___lt__(self, r) -> bool: ...
def udm_t___ne__(self, r) -> bool: ...
def udm_t__make_gap(_this, byteoff, nbytes) -> bool: ...
def udm_t_begin(self) -> uint64: ...
def udm_t_can_be_dtor(self) -> bool: ...
def udm_t_can_rename(self) -> bool: ...
def udm_t_clr_baseclass(self) -> Any: ...
def udm_t_clr_method(self) -> Any: ...
def udm_t_clr_unaligned(self) -> Any: ...
def udm_t_clr_vftable(self) -> Any: ...
def udm_t_clr_virtbase(self) -> Any: ...
def udm_t_cmt_get(*args, **kwargs): ...
def udm_t_cmt_set(self, cmt) -> Any: ...
def udm_t_effalign_get(self) -> int: ...
def udm_t_effalign_set(self, effalign) -> Any: ...
def udm_t_end(self) -> uint64: ...
def udm_t_fda_get(self) -> uchar: ...
def udm_t_fda_set(self, fda) -> Any: ...
def udm_t_is_anonymous_udm(self) -> bool: ...
def udm_t_is_baseclass(self) -> bool: ...
def udm_t_is_bitfield(self) -> bool: ...
def udm_t_is_gap(self) -> bool: ...
def udm_t_is_method(self) -> bool: ...
def udm_t_is_regcmt(self) -> bool: ...
def udm_t_is_unaligned(self) -> bool: ...
def udm_t_is_vftable(self) -> bool: ...
def udm_t_is_virtbase(self) -> bool: ...
def udm_t_is_zero_bitfield(self) -> bool: ...
def udm_t_make_gap(self, byteoff, nbytes) -> bool: ...
def udm_t_name_get(*args, **kwargs): ...
def udm_t_name_set(self, name) -> Any: ...
def udm_t_offset_get(self) -> uint64: ...
def udm_t_offset_set(self, offset) -> Any: ...
def udm_t_repr_get(self) -> value_repr_t: ...
def udm_t_repr_set(self, repr) -> Any: ...
def udm_t_set_baseclass(self, on=...) -> Any: ...
def udm_t_set_method(self, on=...) -> Any: ...
def udm_t_set_regcmt(self, on=...) -> Any: ...
def udm_t_set_unaligned(self, on=...) -> Any: ...
def udm_t_set_value_repr(self, r) -> Any: ...
def udm_t_set_vftable(self, on=...) -> Any: ...
def udm_t_set_virtbase(self, on=...) -> Any: ...
def udm_t_size_get(self) -> uint64: ...
def udm_t_size_set(self, size) -> Any: ...
def udm_t_swap(self, r) -> Any: ...
def udm_t_swiginit(*args, **kwargs): ...
def udm_t_swigregister(*args, **kwargs): ...
def udm_t_tafld_bits_get(self) -> uint32: ...
def udm_t_tafld_bits_set(self, tafld_bits) -> Any: ...
def udm_t_type_get(self) -> tinfo_t: ...
def udm_t_type_set(self, type) -> Any: ...
def udt_type_data_t__find_member(_this, udm, strmem_flags) -> ssize_t: ...
def udt_type_data_t__get_best_fit_member(_this, disp) -> ssize_t: ...
def udt_type_data_t_effalign_get(self) -> uint32: ...
def udt_type_data_t_effalign_set(self, effalign) -> Any: ...
@overload
def udt_type_data_t_find_member(self, pattern_udm, strmem_flags) -> ssize_t: ...
@overload
def udt_type_data_t_find_member(self, name) -> ssize_t: ...
@overload
def udt_type_data_t_find_member(self, bit_offset) -> ssize_t: ...
def udt_type_data_t_get_best_fit_member(self, disp) -> ssize_t: ...
def udt_type_data_t_is_cppobj(self) -> bool: ...
def udt_type_data_t_is_last_baseclass(self, idx) -> bool: ...
def udt_type_data_t_is_msstruct(self) -> bool: ...
def udt_type_data_t_is_unaligned(self) -> bool: ...
def udt_type_data_t_is_union_get(self) -> bool: ...
def udt_type_data_t_is_union_set(self, is_union) -> Any: ...
def udt_type_data_t_is_vftable(self) -> bool: ...
def udt_type_data_t_pack_get(self) -> uchar: ...
def udt_type_data_t_pack_set(self, pack) -> Any: ...
def udt_type_data_t_sda_get(self) -> uchar: ...
def udt_type_data_t_sda_set(self, sda) -> Any: ...
def udt_type_data_t_set_vftable(self, on=...) -> Any: ...
def udt_type_data_t_swap(self, r) -> Any: ...
def udt_type_data_t_swiginit(*args, **kwargs): ...
def udt_type_data_t_swigregister(*args, **kwargs): ...
def udt_type_data_t_taudt_bits_get(self) -> uint32: ...
def udt_type_data_t_taudt_bits_set(self, taudt_bits) -> Any: ...
def udt_type_data_t_total_size_get(self) -> size_t: ...
def udt_type_data_t_total_size_set(self, total_size) -> Any: ...
def udt_type_data_t_unpadded_size_get(self) -> size_t: ...
def udt_type_data_t_unpadded_size_set(self, unpadded_size) -> Any: ...
def udt_type_data_t_version_get(self) -> uchar: ...
def udt_type_data_t_version_set(self, version) -> Any: ...
def udtmembervec_t_swiginit(*args, **kwargs): ...
def udtmembervec_t_swigregister(*args, **kwargs): ...
def udtmembervec_template_t___eq__(self, r) -> bool: ...
def udtmembervec_template_t___getitem__(self, i) -> udm_t: ...
def udtmembervec_template_t___len__(self) -> size_t: ...
def udtmembervec_template_t___ne__(self, r) -> bool: ...
def udtmembervec_template_t___setitem__(self, i, v) -> Any: ...
def udtmembervec_template_t__del(self, x) -> bool: ...
def udtmembervec_template_t_add_unique(self, x) -> bool: ...
def udtmembervec_template_t_at(self, _idx) -> udm_t: ...
@overload
def udtmembervec_template_t_begin(self) -> udm_t: ...
@overload
def udtmembervec_template_t_begin(self) -> udm_t: ...
def udtmembervec_template_t_capacity(self) -> size_t: ...
def udtmembervec_template_t_clear(self) -> Any: ...
def udtmembervec_template_t_empty(self) -> bool: ...
@overload
def udtmembervec_template_t_end(self) -> udm_t: ...
@overload
def udtmembervec_template_t_end(self) -> udm_t: ...
@overload
def udtmembervec_template_t_erase(self, it) -> udm_t: ...
@overload
def udtmembervec_template_t_erase(self, first, last) -> udm_t: ...
def udtmembervec_template_t_extract(self) -> udm_t: ...
@overload
def udtmembervec_template_t_find(self, x) -> udm_t: ...
@overload
def udtmembervec_template_t_find(self, x) -> udm_t: ...
def udtmembervec_template_t_grow(self, x=...) -> Any: ...
def udtmembervec_template_t_has(self, x) -> bool: ...
def udtmembervec_template_t_inject(self, s, len) -> Any: ...
def udtmembervec_template_t_insert(self, it, x) -> udm_t: ...
def udtmembervec_template_t_pop_back(self) -> Any: ...
@overload
def udtmembervec_template_t_push_back(self, x) -> Any: ...
@overload
def udtmembervec_template_t_push_back(self) -> udm_t: ...
def udtmembervec_template_t_qclear(self) -> Any: ...
def udtmembervec_template_t_reserve(self, cnt) -> Any: ...
@overload
def udtmembervec_template_t_resize(self, _newsize, x) -> Any: ...
@overload
def udtmembervec_template_t_resize(self, _newsize) -> Any: ...
def udtmembervec_template_t_size(self) -> size_t: ...
def udtmembervec_template_t_swap(self, r) -> Any: ...
def udtmembervec_template_t_swiginit(*args, **kwargs): ...
def udtmembervec_template_t_swigregister(*args, **kwargs): ...
def udtmembervec_template_t_truncate(self) -> Any: ...
def unpack_idcobj_from_bv(obj, tif, bytes, pio_flags=...) -> error_t: ...
def unpack_idcobj_from_idb(obj, tif, ea, off0, pio_flags=...) -> error_t: ...
def unpack_object_from_bv(*args, **kwargs): ...
def unpack_object_from_idb(*args, **kwargs): ...
def use_golang_cc() -> bool: ...
def valstr_t_info_get(*args, **kwargs): ...
def valstr_t_info_set(self, info) -> Any: ...
def valstr_t_length_get(self) -> size_t: ...
def valstr_t_length_set(self, length) -> Any: ...
def valstr_t_members_get(self) -> valstrs_t: ...
def valstr_t_members_set(self, members) -> Any: ...
def valstr_t_oneline_get(*args, **kwargs): ...
def valstr_t_oneline_set(self, oneline) -> Any: ...
def valstr_t_props_get(self) -> int: ...
def valstr_t_props_set(self, props) -> Any: ...
def valstr_t_swiginit(*args, **kwargs): ...
def valstr_t_swigregister(*args, **kwargs): ...
def valstrs_t_swiginit(*args, **kwargs): ...
def valstrs_t_swigregister(*args, **kwargs): ...
def valstrvec_t___getitem__(self, i) -> valstr_t: ...
def valstrvec_t___len__(self) -> size_t: ...
def valstrvec_t___setitem__(self, i, v) -> Any: ...
def valstrvec_t_at(self, _idx) -> valstr_t: ...
@overload
def valstrvec_t_begin(self) -> valstr_t: ...
@overload
def valstrvec_t_begin(self) -> valstr_t: ...
def valstrvec_t_capacity(self) -> size_t: ...
def valstrvec_t_clear(self) -> Any: ...
def valstrvec_t_empty(self) -> bool: ...
@overload
def valstrvec_t_end(self) -> valstr_t: ...
@overload
def valstrvec_t_end(self) -> valstr_t: ...
@overload
def valstrvec_t_erase(self, it) -> valstr_t: ...
@overload
def valstrvec_t_erase(self, first, last) -> valstr_t: ...
def valstrvec_t_extract(self) -> valstr_t: ...
def valstrvec_t_grow(self, x=...) -> Any: ...
def valstrvec_t_inject(self, s, len) -> Any: ...
def valstrvec_t_insert(self, it, x) -> valstr_t: ...
def valstrvec_t_pop_back(self) -> Any: ...
@overload
def valstrvec_t_push_back(self, x) -> Any: ...
@overload
def valstrvec_t_push_back(self) -> valstr_t: ...
def valstrvec_t_qclear(self) -> Any: ...
def valstrvec_t_reserve(self, cnt) -> Any: ...
@overload
def valstrvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def valstrvec_t_resize(self, _newsize) -> Any: ...
def valstrvec_t_size(self) -> size_t: ...
def valstrvec_t_swap(self, r) -> Any: ...
def valstrvec_t_swiginit(*args, **kwargs): ...
def valstrvec_t_swigregister(*args, **kwargs): ...
def valstrvec_t_truncate(self) -> Any: ...
def value_repr_t___str__(self) -> qstring: ...
def value_repr_t__from_opinfo(_this, flags, afl, opinfo, ap) -> bool: ...
def value_repr_t__print(self, colored=...) -> size_t: ...
def value_repr_t__print_(_this, colored) -> size_t: ...
def value_repr_t_ap_get(self) -> array_parameters_t: ...
def value_repr_t_ap_set(self, ap) -> Any: ...
def value_repr_t_bits_get(self) -> uint64: ...
def value_repr_t_bits_set(self, bits) -> Any: ...
def value_repr_t_cd_get(self) -> custom_data_type_info_t: ...
def value_repr_t_cd_set(self, cd) -> Any: ...
def value_repr_t_clear(self) -> Any: ...
def value_repr_t_delta_get(self) -> adiff_t: ...
def value_repr_t_delta_set(self, delta) -> Any: ...
def value_repr_t_empty(self) -> bool: ...
def value_repr_t_from_opinfo(self, flags, afl, opinfo, _ap) -> bool: ...
def value_repr_t_get_vtype(self) -> uint64: ...
def value_repr_t_has_lzeroes(self) -> bool: ...
def value_repr_t_has_tabform(self) -> bool: ...
def value_repr_t_init_ap(self, _ap) -> Any: ...
def value_repr_t_is_custom(self) -> bool: ...
def value_repr_t_is_enum(self) -> bool: ...
def value_repr_t_is_offset(self) -> bool: ...
def value_repr_t_is_signed(self) -> bool: ...
def value_repr_t_is_strlit(self) -> bool: ...
def value_repr_t_is_stroff(self) -> bool: ...
def value_repr_t_is_typref(self) -> bool: ...
def value_repr_t_parse_value_repr(self, attr, target_type=...) -> bool: ...
def value_repr_t_ri_get(self) -> refinfo_t: ...
def value_repr_t_ri_set(self, ri) -> Any: ...
def value_repr_t_set_ap(self, _ap) -> Any: ...
def value_repr_t_set_lzeroes(self, on) -> Any: ...
def value_repr_t_set_signed(self, on) -> Any: ...
def value_repr_t_set_tabform(self, on) -> Any: ...
def value_repr_t_set_vtype(self, vt) -> Any: ...
def value_repr_t_strtype_get(self) -> int32: ...
def value_repr_t_strtype_set(self, strtype) -> Any: ...
def value_repr_t_swap(self, r) -> Any: ...
def value_repr_t_swiginit(*args, **kwargs): ...
def value_repr_t_swigregister(*args, **kwargs): ...
def value_repr_t_type_ordinal_get(self) -> uint32: ...
def value_repr_t_type_ordinal_set(self, type_ordinal) -> Any: ...
def verify_argloc(vloc, size, gaps) -> int: ...
def verify_tinfo(typid) -> int: ...
def visit_subtypes(visitor, out, tif, name, cmt) -> int: ...
def write_tinfo_bitfield_value(typid, dst, v, bitoff) -> uint64: ...
