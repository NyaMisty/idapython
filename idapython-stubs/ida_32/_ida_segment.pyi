# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any

ADDSEG_FILLGAP: int
ADDSEG_IDBENC: int
ADDSEG_NOAA: int
ADDSEG_NOSREG: int
ADDSEG_NOTRUNC: int
ADDSEG_OR_DIE: int
ADDSEG_QUIET: int
ADDSEG_SPARSE: int
CSS_BREAK: int
CSS_NODBG: int
CSS_NOMEM: int
CSS_NORANGE: int
CSS_OK: int
MAX_GROUPS: int
MAX_SEGM_TRANSLATIONS: int
MOVE_SEGM_CHUNK: int
MOVE_SEGM_DEBUG: int
MOVE_SEGM_IDP: int
MOVE_SEGM_INVAL: int
MOVE_SEGM_LOADER: int
MOVE_SEGM_MAPPING: int
MOVE_SEGM_ODD: int
MOVE_SEGM_OK: int
MOVE_SEGM_ORPHAN: int
MOVE_SEGM_PARAM: int
MOVE_SEGM_ROOM: int
MOVE_SEGM_SOURCEFILES: int
MSF_FIXONCE: int
MSF_LDKEEP: int
MSF_NETNODES: int
MSF_NOFIX: int
MSF_PRIORITY: int
MSF_SILENT: int
SEGMOD_KEEP: int
SEGMOD_KEEP0: int
SEGMOD_KEEPSEL: int
SEGMOD_KILL: int
SEGMOD_NOMOVE: int
SEGMOD_SILENT: int
SEGMOD_SPARSE: int
SEGPERM_EXEC: int
SEGPERM_MAXVAL: int
SEGPERM_READ: int
SEGPERM_WRITE: int
SEG_ABSSYM: int
SEG_BSS: int
SEG_CODE: int
SEG_COMM: int
SEG_DATA: int
SEG_GRP: int
SEG_IMEM: int
SEG_IMP: int
SEG_MAX_BITNESS_CODE: int
SEG_MAX_SEGTYPE_CODE: int
SEG_NORM: int
SEG_NULL: int
SEG_UNDF: int
SEG_XTRN: int
SFL_COMORG: int
SFL_DEBUG: int
SFL_HEADER: int
SFL_HIDDEN: int
SFL_HIDETYPE: int
SFL_LOADER: int
SFL_OBOK: int
SNAP_ALL_SEG: int
SNAP_CUR_SEG: int
SNAP_LOAD_SEG: int
SREG_NUM: int
SWIG_PYTHON_LEGACY_BOOL: int
saAbs: int
saGroup: int
saRel1024Bytes: int
saRel128Bytes: int
saRel2048Bytes: int
saRel32Bytes: int
saRel4K: int
saRel512Bytes: int
saRel64Bytes: int
saRelByte: int
saRelDble: int
saRelPage: int
saRelPara: int
saRelQword: int
saRelWord: int
saRel_MAX_ALIGN_CODE: int
scCommon: int
scGroup: int
scPriv: int
scPub: int
scPub2: int
scPub3: int
scStack: int
sc_MAX_COMB_CODE: int

def add_segm(para, start, end, name, sclass, flags=...) -> bool: ...
def add_segm_ex(NONNULL_s, name, sclass, flags) -> bool: ...
def add_segment_translation(segstart, mappedseg) -> bool: ...
def allocate_selector(segbase) -> sel_t: ...
def change_segment_status(s, is_deb_segm) -> int: ...
def del_segm(ea, flags) -> bool: ...
def del_segment_translations(segstart) -> Any: ...
def del_selector(selector) -> Any: ...
def delete_lock_segment(self) -> Any: ...
def delete_segment_defsr_array(self) -> Any: ...
def delete_segment_t(self) -> Any: ...
def find_free_selector() -> sel_t: ...
def find_selector(base) -> sel_t: ...
def get_defsr(s, reg) -> sel_t: ...
def get_first_seg() -> segment_t: ...
def get_group_selector(grpsel) -> sel_t: ...
def get_last_seg() -> segment_t: ...
def get_next_seg(ea) -> segment_t: ...
def get_prev_seg(ea) -> segment_t: ...
def get_segm_base(s) -> ea_t: ...
def get_segm_by_name(name) -> segment_t: ...
def get_segm_by_sel(selector) -> segment_t: ...
def get_segm_class(s) -> ssize_t: ...
def get_segm_name(s, flags=...) -> ssize_t: ...
def get_segm_num(ea) -> int: ...
def get_segm_para(s) -> ea_t: ...
def get_segm_qty() -> int: ...
def get_segment_alignment(*args, **kwargs): ...
def get_segment_cmt(s, repeatable) -> ssize_t: ...
def get_segment_combination(*args, **kwargs): ...
def get_segment_translations(transmap, segstart) -> ssize_t: ...
def get_selector_qty() -> size_t: ...
def get_visible_segm_name(s) -> ssize_t: ...
def getn_selector(n) -> bool: ...
def getnseg(n) -> segment_t: ...
def getseg(ea) -> segment_t: ...
def is_finally_visible_segm(s) -> bool: ...
def is_miniidb() -> bool: ...
def is_segm_locked(segm) -> bool: ...
def is_spec_ea(ea) -> bool: ...
def is_spec_segm(seg_type) -> bool: ...
def is_visible_segm(s) -> bool: ...
def lock_segm(segm, lock) -> Any: ...
def lock_segment_swiginit(*args, **kwargs): ...
def lock_segment_swigregister(*args, **kwargs): ...
def move_segm(s, to, flags=...) -> move_segm_code_t: ...
def move_segm_start(ea, newstart, mode) -> bool: ...
def move_segm_strerror(*args, **kwargs): ...
def new_lock_segment(_segm) -> lock_segment: ...
def new_segment_defsr_array(data) -> segment_defsr_array: ...
def new_segment_t() -> segment_t: ...
def rebase_program(delta, flags) -> int: ...
def segm_adjust_diff(s, delta) -> adiff_t: ...
def segm_adjust_ea(s, ea) -> ea_t: ...
def segment_defsr_array___getitem__(*args, **kwargs): ...
def segment_defsr_array___len__(self) -> size_t: ...
def segment_defsr_array___setitem__(self, i, v) -> Any: ...
def segment_defsr_array__get_bytes(self) -> bytevec_t: ...
def segment_defsr_array__set_bytes(self, bts) -> Any: ...
def segment_defsr_array_data_get(*args, **kwargs): ...
def segment_defsr_array_swiginit(*args, **kwargs): ...
def segment_defsr_array_swigregister(*args, **kwargs): ...
def segment_t___getDefsr(self) -> segment_defsr_array: ...
def segment_t_abits(self) -> int: ...
def segment_t_abytes(self) -> int: ...
def segment_t_align_get(self) -> uchar: ...
def segment_t_align_set(self, align) -> Any: ...
def segment_t_bitness_get(self) -> uchar: ...
def segment_t_bitness_set(self, bitness) -> Any: ...
def segment_t_clr_comorg(self) -> Any: ...
def segment_t_clr_ob_ok(self) -> Any: ...
def segment_t_color_get(self) -> bgcolor_t: ...
def segment_t_color_set(self, color) -> Any: ...
def segment_t_comb_get(self) -> uchar: ...
def segment_t_comb_set(self, comb) -> Any: ...
def segment_t_comorg(self) -> bool: ...
def segment_t_defsr_get(self) -> sel_t[16]: ...
def segment_t_defsr_set(self, defsr) -> Any: ...
def segment_t_end_ea_get(self) -> ea_t: ...
def segment_t_end_ea_set(self, end_ea) -> Any: ...
def segment_t_flags_get(self) -> ushort: ...
def segment_t_flags_set(self, flags) -> Any: ...
def segment_t_is_16bit(self) -> bool: ...
def segment_t_is_32bit(self) -> bool: ...
def segment_t_is_64bit(self) -> bool: ...
def segment_t_is_header_segm(self) -> bool: ...
def segment_t_is_hidden_segtype(self) -> bool: ...
def segment_t_is_loader_segm(self) -> bool: ...
def segment_t_is_visible_segm(self) -> bool: ...
def segment_t_name_get(self) -> uval_t: ...
def segment_t_name_set(self, name) -> Any: ...
def segment_t_ob_ok(self) -> bool: ...
def segment_t_orgbase_get(self) -> uval_t: ...
def segment_t_orgbase_set(self, orgbase) -> Any: ...
def segment_t_perm_get(self) -> uchar: ...
def segment_t_perm_set(self, perm) -> Any: ...
def segment_t_sclass_get(self) -> uval_t: ...
def segment_t_sclass_set(self, sclass) -> Any: ...
def segment_t_sel_get(self) -> sel_t: ...
def segment_t_sel_set(self, sel) -> Any: ...
def segment_t_set_comorg(self) -> Any: ...
def segment_t_set_debugger_segm(self, debseg) -> Any: ...
def segment_t_set_header_segm(self, on) -> Any: ...
def segment_t_set_hidden_segtype(self, hide) -> Any: ...
def segment_t_set_loader_segm(self, ldrseg) -> Any: ...
def segment_t_set_ob_ok(self) -> Any: ...
def segment_t_set_visible_segm(self, visible) -> Any: ...
def segment_t_start_ea_get(self) -> ea_t: ...
def segment_t_start_ea_set(self, start_ea) -> Any: ...
def segment_t_swiginit(*args, **kwargs): ...
def segment_t_swigregister(*args, **kwargs): ...
def segment_t_type_get(self) -> uchar: ...
def segment_t_type_set(self, type) -> Any: ...
def segment_t_update(self) -> bool: ...
def segtype(ea) -> uchar: ...
def sel2ea(selector) -> ea_t: ...
def sel2para(selector) -> ea_t: ...
def set_defsr(s, reg, value) -> Any: ...
def set_group_selector(grp, sel) -> int: ...
def set_segm_addressing(s, bitness) -> bool: ...
def set_segm_base(s, newbase) -> bool: ...
def set_segm_class(s, sclass, flags=...) -> int: ...
def set_segm_end(ea, newend, flags) -> bool: ...
def set_segm_name(s, name, flags=...) -> int: ...
def set_segm_start(ea, newstart, flags) -> bool: ...
def set_segment_cmt(s, cmt, repeatable) -> Any: ...
def set_segment_translations(segstart, transmap) -> bool: ...
def set_selector(selector, paragraph) -> int: ...
def set_visible_segm(s, visible) -> Any: ...
def setup_selector(segbase) -> sel_t: ...
def std_out_segm_footer(ctx, seg) -> Any: ...
def take_memory_snapshot(type) -> bool: ...
def update_segm(s) -> bool: ...
