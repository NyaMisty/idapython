# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any, overload

SWIG_PYTHON_LEGACY_BOOL: int
XREF_ALL: int
XREF_BASE: int
XREF_DATA: int
XREF_FAR: int
XREF_MASK: int
XREF_PASTEND: int
XREF_TAIL: int
XREF_USER: int
dr_I: int
dr_O: int
dr_R: int
dr_S: int
dr_T: int
dr_U: int
dr_W: int
fl_CF: int
fl_CN: int
fl_F: int
fl_JF: int
fl_JN: int
fl_U: int
fl_USobsolete: int

def add_cref(frm, to, type) -> bool: ...
def add_dref(frm, to, type) -> bool: ...
def calc_switch_cases(ea, si) -> cases_and_targets_t: ...
def cases_and_targets_t_cases_get(self) -> casevec_t: ...
def cases_and_targets_t_cases_set(self, cases) -> Any: ...
def cases_and_targets_t_swiginit(*args, **kwargs): ...
def cases_and_targets_t_swigregister(*args, **kwargs): ...
def cases_and_targets_t_targets_get(*args, **kwargs): ...
def cases_and_targets_t_targets_set(self, targets) -> Any: ...
def casevec_t___eq__(self, r) -> bool: ...
def casevec_t___getitem__(*args, **kwargs): ...
def casevec_t___len__(self) -> size_t: ...
def casevec_t___ne__(self, r) -> bool: ...
def casevec_t___setitem__(self, i, v) -> Any: ...
def casevec_t__del(self, x) -> bool: ...
def casevec_t_add_unique(self, x) -> bool: ...
def casevec_t_at(*args, **kwargs): ...
def casevec_t_begin(*args, **kwargs): ...
def casevec_t_capacity(self) -> size_t: ...
def casevec_t_clear(self) -> Any: ...
def casevec_t_empty(self) -> bool: ...
def casevec_t_end(*args, **kwargs): ...
def casevec_t_erase(*args, **kwargs): ...
def casevec_t_extract(*args, **kwargs): ...
def casevec_t_find(*args, **kwargs): ...
def casevec_t_grow(self, x=...) -> Any: ...
def casevec_t_has(self, x) -> bool: ...
def casevec_t_inject(self, s, len) -> Any: ...
def casevec_t_insert(*args, **kwargs): ...
def casevec_t_pop_back(self) -> Any: ...
def casevec_t_push_back(self, x) -> Any: ...
def casevec_t_qclear(self) -> Any: ...
def casevec_t_reserve(self, cnt) -> Any: ...
@overload
def casevec_t_resize(self, _newsize, x) -> Any: ...
@overload
def casevec_t_resize(self, _newsize) -> Any: ...
def casevec_t_size(self) -> size_t: ...
def casevec_t_swap(self, r) -> Any: ...
def casevec_t_swiginit(*args, **kwargs): ...
def casevec_t_swigregister(*args, **kwargs): ...
def casevec_t_truncate(self) -> Any: ...
def create_switch_table(ea, si) -> bool: ...
def create_switch_xrefs(ea, si) -> bool: ...
def del_cref(frm, to, expand) -> bool: ...
def del_dref(frm, to) -> Any: ...
def delete_cases_and_targets_t(self) -> Any: ...
def delete_casevec_t(self) -> Any: ...
def delete_switch_table(jump_ea, si) -> Any: ...
def delete_xrefblk_t(self) -> Any: ...
def get_first_cref_from(frm) -> ea_t: ...
def get_first_cref_to(to) -> ea_t: ...
def get_first_dref_from(frm) -> ea_t: ...
def get_first_dref_to(to) -> ea_t: ...
def get_first_fcref_from(frm) -> ea_t: ...
def get_first_fcref_to(to) -> ea_t: ...
def get_next_cref_from(frm, current) -> ea_t: ...
def get_next_cref_to(to, current) -> ea_t: ...
def get_next_dref_from(frm, current) -> ea_t: ...
def get_next_dref_to(to, current) -> ea_t: ...
def get_next_fcref_from(frm, current) -> ea_t: ...
def get_next_fcref_to(to, current) -> ea_t: ...
def has_external_refs(pfn, ea) -> bool: ...
def new_cases_and_targets_t() -> cases_and_targets_t: ...
def new_casevec_t(x) -> casevec_t: ...
def new_xrefblk_t() -> xrefblk_t: ...
def xrefblk_t_first_from(self, _from, flags) -> bool: ...
def xrefblk_t_first_to(self, _to, flags) -> bool: ...
def xrefblk_t_frm_get(self) -> ea_t: ...
def xrefblk_t_frm_set(self, frm) -> Any: ...
def xrefblk_t_iscode_get(self) -> uchar: ...
def xrefblk_t_iscode_set(self, iscode) -> Any: ...
@overload
def xrefblk_t_next_from(self) -> bool: ...
@overload
def xrefblk_t_next_from(self, _from, _to, flags) -> bool: ...
@overload
def xrefblk_t_next_to(self) -> bool: ...
@overload
def xrefblk_t_next_to(self, _from, _to, flags) -> bool: ...
def xrefblk_t_swiginit(*args, **kwargs): ...
def xrefblk_t_swigregister(*args, **kwargs): ...
def xrefblk_t_to_get(self) -> ea_t: ...
def xrefblk_t_to_set(self, to) -> Any: ...
def xrefblk_t_type_get(self) -> uchar: ...
def xrefblk_t_type_set(self, type) -> Any: ...
def xrefblk_t_user_get(self) -> uchar: ...
def xrefblk_t_user_set(self, user) -> Any: ...
def xrefchar(xrtype) -> char: ...
