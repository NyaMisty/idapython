# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any, overload

BINOPSTATE_DONE: int
BINOPSTATE_GO: int
BINOPSTATE_NONE: int
COMMSTATE_DONE: int
COMMSTATE_GO: int
COMMSTATE_NONE: int
CTXF_BINOP_STATE: int
CTXF_BIT_PREFIX: int
CTXF_CMT_STATE: int
CTXF_CODE: int
CTXF_DBLIND_OPND: int
CTXF_DEMANGLED_LABEL: int
CTXF_DEMANGLED_OK: int
CTXF_GEN_CMT: int
CTXF_GEN_XREFS: int
CTXF_HIDDEN_ADDR: int
CTXF_LABEL_OK: int
CTXF_MAIN: int
CTXF_MULTI: int
CTXF_NORMAL_LABEL: int
CTXF_OUTCTX_T: int
CTXF_OVSTORE_PRNT: int
CTXF_STACK: int
CTXF_VOIDS: int
CTXF_XREF_STATE: int
DEFAULT_INDENT: int
FCBF_CONT: int
FCBF_DELIM: int
FCBF_ERR_REPL: int
FCBF_FF_LIT: int
GH_BYTESEX_HAS_HIGHBYTE: int
GH_PRINT_ALL: int
GH_PRINT_ALL_BUT_BYTESEX: int
GH_PRINT_ASM: int
GH_PRINT_BYTESEX: int
GH_PRINT_HEADER: int
GH_PRINT_PROC: int
GH_PRINT_PROC_AND_ASM: int
GH_PRINT_PROC_ASM_AND_BYTESEX: int
INSN_64BIT: int
INSN_MACRO: int
INSN_MODMAC: int
MAKELINE_BINPREF: int
MAKELINE_NONE: int
MAKELINE_STACK: int
MAKELINE_VOID: int
OF_NO_BASE_DISP: int
OF_NUMBER: int
OF_OUTER_DISP: int
OF_SHOW: int
OOFS_IFSIGN: int
OOFS_NEEDSIGN: int
OOFS_NOSIGN: int
OOFW_16: int
OOFW_24: int
OOFW_32: int
OOFW_64: int
OOFW_8: int
OOFW_IMM: int
OOF_ADDR: int
OOF_ANYSERIAL: int
OOF_LZEROES: int
OOF_NOBNOT: int
OOF_NO_LZEROES: int
OOF_NUMBER: int
OOF_OUTER: int
OOF_SIGNED: int
OOF_SIGNMASK: int
OOF_SPACES: int
OOF_WIDTHMASK: int
OOF_ZSTROFF: int
PACK_FORM_DEF: int
STKVAR_VALID_SIZE: int
SWIG_PYTHON_LEGACY_BOOL: int
XREFSTATE_DONE: int
XREFSTATE_GO: int
XREFSTATE_NONE: int
cvar: Any
dt_bitfild: int
dt_byte: int
dt_byte16: int
dt_byte32: int
dt_byte64: int
dt_code: int
dt_double: int
dt_dword: int
dt_float: int
dt_fword: int
dt_half: int
dt_ldbl: int
dt_packreal: int
dt_qword: int
dt_string: int
dt_tbyte: int
dt_unicode: int
dt_void: int
dt_word: int

def calc_dataseg(insn, n=..., rgnum=...) -> ea_t: ...
def can_decode(ea) -> bool: ...
def construct_macro(insn, enable, build_macro) -> bool: ...
def construct_macro2(_this, insn, enable) -> bool: ...
def create_insn(ea, out=...) -> int: ...
def create_outctx(ea, F=..., suspop=...) -> outctx_base_t: ...
def decode_insn(out, ea) -> int: ...
def decode_preceding_insn(*args, **kwargs): ...
def decode_prev_insn(out, ea) -> ea_t: ...
def delete_insn_t(self) -> Any: ...
def delete_macro_constructor_t(self) -> Any: ...
def delete_op_t(self) -> Any: ...
def delete_operands_array(self) -> Any: ...
def disown_macro_constructor_t(*args, **kwargs): ...
def get_dtype_by_size(size) -> int: ...
def get_dtype_flag(dtype) -> flags64_t: ...
def get_dtype_size(dtype) -> size_t: ...
def get_immvals(*args, **kwargs): ...
def get_lookback() -> int: ...
def get_printable_immvals(*args, **kwargs): ...
def insn_add_cref(insn, to, opoff, type) -> Any: ...
def insn_add_dref(insn, to, opoff, type) -> Any: ...
def insn_add_off_drefs(insn, x, type, outf) -> ea_t: ...
def insn_create_stkvar(insn, x, v, flags) -> bool: ...
def insn_t___get_auxpref__(self) -> uint32: ...
def insn_t___get_operand__(self, n) -> op_t: ...
def insn_t___get_ops__(self) -> operands_array: ...
def insn_t___set_auxpref__(self, v) -> Any: ...
def insn_t__from_ptrval__(ptrval) -> insn_t: ...
def insn_t_add_cref(self, to, opoff, type) -> Any: ...
def insn_t_add_dref(self, to, opoff, type) -> Any: ...
def insn_t_add_off_drefs(self, x, type, outf) -> ea_t: ...
def insn_t_assign(self, other) -> Any: ...
def insn_t_auxpref_get(self) -> uint32: ...
def insn_t_auxpref_set(self, auxpref) -> Any: ...
def insn_t_auxpref_u16_get(self) -> uint16[2]: ...
def insn_t_auxpref_u16_set(self, auxpref_u16) -> Any: ...
def insn_t_auxpref_u8_get(self) -> uint8[4]: ...
def insn_t_auxpref_u8_set(self, auxpref_u8) -> Any: ...
@overload
def insn_t_create_op_data(self, ea_, opoff, dtype) -> bool: ...
@overload
def insn_t_create_op_data(self, ea_, op) -> bool: ...
def insn_t_create_stkvar(self, x, v, flags_) -> bool: ...
def insn_t_cs_get(self) -> ea_t: ...
def insn_t_cs_set(self, cs) -> Any: ...
def insn_t_ea_get(self) -> ea_t: ...
def insn_t_ea_set(self, ea) -> Any: ...
def insn_t_flags_get(self) -> int16: ...
def insn_t_flags_set(self, flags) -> Any: ...
@overload
def insn_t_get_canon_feature(self, ph) -> uint32: ...
@overload
def insn_t_get_canon_feature(self) -> uint32: ...
def insn_t_get_canon_mnem(self, ph) -> charconst: ...
def insn_t_get_next_byte(self) -> uint8: ...
def insn_t_get_next_dword(self) -> uint32: ...
def insn_t_get_next_qword(self) -> uint64: ...
def insn_t_get_next_word(self) -> uint16: ...
def insn_t_insnpref_get(self) -> char: ...
def insn_t_insnpref_set(self, insnpref) -> Any: ...
def insn_t_ip_get(self) -> ea_t: ...
def insn_t_ip_set(self, ip) -> Any: ...
def insn_t_is_64bit(self) -> bool: ...
@overload
def insn_t_is_canon_insn(self, ph) -> bool: ...
@overload
def insn_t_is_canon_insn(self) -> bool: ...
def insn_t_is_macro(self) -> bool: ...
def insn_t_itype_get(self) -> uint16: ...
def insn_t_itype_set(self, itype) -> Any: ...
def insn_t_ops_get(self) -> op_t: ...
def insn_t_ops_set(self, ops) -> Any: ...
def insn_t_segpref_get(self) -> char: ...
def insn_t_segpref_set(self, segpref) -> Any: ...
def insn_t_size_get(self) -> uint16: ...
def insn_t_size_set(self, size) -> Any: ...
def insn_t_swiginit(*args, **kwargs): ...
def insn_t_swigregister(*args, **kwargs): ...
def is_floating_dtype(dtype) -> bool: ...
def macro_constructor_t_build_macro(self, insn, may_go_forward) -> bool: ...
def macro_constructor_t_reserved_get(self) -> size_t: ...
def macro_constructor_t_reserved_set(self, reserved) -> Any: ...
def macro_constructor_t_swiginit(*args, **kwargs): ...
def macro_constructor_t_swigregister(*args, **kwargs): ...
@overload
def map_code_ea(insn, addr, opnum) -> ea_t: ...
@overload
def map_code_ea(insn, op) -> ea_t: ...
@overload
def map_data_ea(insn, addr, opnum=...) -> ea_t: ...
@overload
def map_data_ea(insn, op) -> ea_t: ...
@overload
def map_ea(insn, op, iscode) -> ea_t: ...
@overload
def map_ea(insn, addr, opnum, iscode) -> ea_t: ...
def new_insn_t() -> insn_t: ...
def new_macro_constructor_t(_self) -> macro_constructor_t: ...
def new_op_t() -> op_t: ...
def new_operands_array(data) -> operands_array: ...
def op_t___get_addr__(self) -> ea_t: ...
def op_t___get_reg_phrase__(self) -> uint16: ...
def op_t___get_specval__(self) -> ea_t: ...
def op_t___get_value64__(self) -> uint64: ...
def op_t___get_value__(self) -> ea_t: ...
def op_t___set_addr__(self, v) -> Any: ...
def op_t___set_reg_phrase__(self, r) -> Any: ...
def op_t___set_specval__(self, v) -> Any: ...
def op_t___set_value64__(self, v) -> Any: ...
def op_t___set_value__(self, v) -> Any: ...
def op_t__from_ptrval__(ptrval) -> op_t: ...
def op_t_addr_get(self) -> ea_t: ...
def op_t_addr_set(self, addr) -> Any: ...
def op_t_assign(self, other) -> Any: ...
def op_t_clr_shown(self) -> Any: ...
def op_t_dtype_get(self) -> op_dtype_t: ...
def op_t_dtype_set(self, dtype) -> Any: ...
def op_t_flags_get(self) -> uchar: ...
def op_t_flags_set(self, flags) -> Any: ...
def op_t_is_imm(self, v) -> bool: ...
def op_t_is_reg(self, r) -> bool: ...
def op_t_n_get(self) -> uchar: ...
def op_t_n_set(self, n) -> Any: ...
def op_t_offb_get(self) -> char: ...
def op_t_offb_set(self, offb) -> Any: ...
def op_t_offo_get(self) -> char: ...
def op_t_offo_set(self, offo) -> Any: ...
def op_t_phrase_get(self) -> uint16: ...
def op_t_phrase_set(self, phrase) -> Any: ...
def op_t_reg_get(self) -> uint16: ...
def op_t_reg_set(self, reg) -> Any: ...
def op_t_set_shown(self) -> Any: ...
def op_t_shown(self) -> bool: ...
def op_t_specflag1_get(self) -> char: ...
def op_t_specflag1_set(self, specflag1) -> Any: ...
def op_t_specflag2_get(self) -> char: ...
def op_t_specflag2_set(self, specflag2) -> Any: ...
def op_t_specflag3_get(self) -> char: ...
def op_t_specflag3_set(self, specflag3) -> Any: ...
def op_t_specflag4_get(self) -> char: ...
def op_t_specflag4_set(self, specflag4) -> Any: ...
def op_t_specval_get(self) -> ea_t: ...
def op_t_specval_set(self, specval) -> Any: ...
def op_t_swiginit(*args, **kwargs): ...
def op_t_swigregister(*args, **kwargs): ...
def op_t_type_get(self) -> optype_t: ...
def op_t_type_set(self, type) -> Any: ...
def op_t_value_get(self) -> uval_t: ...
def op_t_value_set(self, value) -> Any: ...
def operands_array___getitem__(self, i) -> op_t: ...
def operands_array___len__(self) -> size_t: ...
def operands_array___setitem__(self, i, v) -> Any: ...
def operands_array__get_bytes(self) -> bytevec_t: ...
def operands_array__set_bytes(self, bts) -> Any: ...
def operands_array_data_get(*args, **kwargs): ...
def operands_array_swiginit(*args, **kwargs): ...
def operands_array_swigregister(*args, **kwargs): ...
def outctx_base_t_F32_get(self) -> flags_t: ...
def outctx_base_t_F32_set(self, F32) -> Any: ...
def outctx_base_t__from_ptrval__(ptrval) -> outctx_base_t: ...
def outctx_base_t_close_comment(self) -> Any: ...
def outctx_base_t_clr_gen_label(self) -> Any: ...
def outctx_base_t_default_lnnum_get(self) -> int: ...
def outctx_base_t_default_lnnum_set(self, default_lnnum) -> Any: ...
def outctx_base_t_display_voids(self) -> bool: ...
def outctx_base_t_flush_buf(self, buf, indent=...) -> bool: ...
def outctx_base_t_flush_outbuf(self, indent=...) -> bool: ...
def outctx_base_t_forbid_annotations(self) -> int: ...
def outctx_base_t_force_code(self) -> bool: ...
def outctx_base_t_gen_block_cmt(self, cmt, color) -> bool: ...
def outctx_base_t_gen_border_line(self, solid=...) -> bool: ...
def outctx_base_t_gen_cmt_line(self, format) -> bool: ...
def outctx_base_t_gen_collapsed_line(self, format) -> bool: ...
def outctx_base_t_gen_empty_line(self) -> bool: ...
def outctx_base_t_gen_empty_line_without_annotations(self) -> Any: ...
def outctx_base_t_gen_printf(self, indent, format) -> bool: ...
def outctx_base_t_gen_xref_lines(self) -> bool: ...
def outctx_base_t_getF(self) -> flags64_t: ...
def outctx_base_t_get_stkvar(*args, **kwargs): ...
def outctx_base_t_init_lines_array(self, answers, maxsize) -> Any: ...
def outctx_base_t_insn_ea_get(self) -> ea_t: ...
def outctx_base_t_insn_ea_set(self, insn_ea) -> Any: ...
def outctx_base_t_multiline(self) -> bool: ...
def outctx_base_t_only_main_line(self) -> bool: ...
def outctx_base_t_out_addr_tag(self, ea) -> Any: ...
def outctx_base_t_out_btoa(self, Word, radix=...) -> Any: ...
def outctx_base_t_out_char(self, c) -> Any: ...
def outctx_base_t_out_chars(self, c, n) -> Any: ...
def outctx_base_t_out_colored_register_line(self, str) -> Any: ...
def outctx_base_t_out_keyword(self, str) -> Any: ...
def outctx_base_t_out_line(self, str, color=...) -> Any: ...
def outctx_base_t_out_long(self, v, radix) -> Any: ...
def outctx_base_t_out_name_expr(self, x, ea, off=...) -> bool: ...
def outctx_base_t_out_printf(self, format) -> size_t: ...
def outctx_base_t_out_register(self, str) -> Any: ...
def outctx_base_t_out_spaces(self, len) -> Any: ...
def outctx_base_t_out_symbol(self, c) -> Any: ...
def outctx_base_t_out_tagoff(self, tag) -> Any: ...
def outctx_base_t_out_tagon(self, tag) -> Any: ...
def outctx_base_t_out_value(self, x, outf=...) -> flags64_t: ...
def outctx_base_t_outbuf_get(*args, **kwargs): ...
def outctx_base_t_outbuf_set(self, outbuf) -> Any: ...
def outctx_base_t_print_label_now(self) -> bool: ...
def outctx_base_t_restore_ctxflags(self, saved_flags) -> Any: ...
def outctx_base_t_retrieve_cmt(self) -> ssize_t: ...
def outctx_base_t_retrieve_name(self, arg2, arg3) -> ssize_t: ...
def outctx_base_t_set_comment_addr(self, ea) -> Any: ...
def outctx_base_t_set_dlbind_opnd(self) -> Any: ...
def outctx_base_t_set_gen_cmt(self, on=...) -> Any: ...
def outctx_base_t_set_gen_demangled_label(self) -> Any: ...
def outctx_base_t_set_gen_label(self) -> Any: ...
def outctx_base_t_set_gen_xrefs(self, on=...) -> Any: ...
def outctx_base_t_setup_outctx(self, prefix, makeline_flags) -> Any: ...
def outctx_base_t_stack_view(self) -> bool: ...
def outctx_base_t_swigregister(*args, **kwargs): ...
def outctx_base_t_term_outctx(self, prefix=...) -> int: ...
def outctx_t__from_ptrval__(ptrval) -> outctx_t: ...
def outctx_t_ash_get(self) -> asm_t: ...
def outctx_t_ash_set(self, ash) -> Any: ...
def outctx_t_bin_ea_get(self) -> ea_t: ...
def outctx_t_bin_ea_set(self, bin_ea) -> Any: ...
def outctx_t_bin_state_get(self) -> char: ...
def outctx_t_bin_state_set(self, bin_state) -> Any: ...
def outctx_t_bin_width_get(self) -> int: ...
def outctx_t_bin_width_set(self, bin_width) -> Any: ...
def outctx_t_curlabel_get(*args, **kwargs): ...
def outctx_t_curlabel_set(self, curlabel) -> Any: ...
def outctx_t_gen_func_footer(self, pfn) -> Any: ...
def outctx_t_gen_func_header(self, pfn) -> Any: ...
def outctx_t_gen_header(self, flags=..., proc_name=..., proc_flavour=...) -> Any: ...
def outctx_t_gen_header_extra(self) -> Any: ...
def outctx_t_gen_xref_lines(self) -> bool: ...
def outctx_t_gl_bpsize_get(self) -> int: ...
def outctx_t_gl_bpsize_set(self, gl_bpsize) -> Any: ...
def outctx_t_insn_get(self) -> insn_t: ...
def outctx_t_insn_set(self, insn) -> Any: ...
def outctx_t_next_line_ea_get(self) -> ea_t: ...
def outctx_t_next_line_ea_set(self, next_line_ea) -> Any: ...
def outctx_t_out_btoa(self, Word, radix=...) -> Any: ...
def outctx_t_out_custom_mnem(self, mnem, width=..., postfix=...) -> Any: ...
def outctx_t_out_data(self, analyze_only) -> Any: ...
def outctx_t_out_fcref_names(self) -> Any: ...
def outctx_t_out_immchar_cmts(self) -> Any: ...
def outctx_t_out_mnem(self, width=..., postfix=...) -> Any: ...
def outctx_t_out_mnemonic(self) -> Any: ...
def outctx_t_out_one_operand(self, n) -> bool: ...
def outctx_t_out_specea(self, segtype) -> bool: ...
def outctx_t_ph_get(self) -> processor_t: ...
def outctx_t_ph_set(self, ph) -> Any: ...
def outctx_t_prefix_ea_get(self) -> ea_t: ...
def outctx_t_prefix_ea_set(self, prefix_ea) -> Any: ...
def outctx_t_procmod_get(self) -> procmod_t: ...
def outctx_t_procmod_set(self, procmod) -> Any: ...
def outctx_t_retrieve_cmt(self) -> ssize_t: ...
def outctx_t_retrieve_name(self, arg2, arg3) -> ssize_t: ...
def outctx_t_saved_immvals_get(self) -> uval_t[8]: ...
def outctx_t_saved_immvals_set(self, saved_immvals) -> Any: ...
def outctx_t_set_bin_state(self, value) -> Any: ...
def outctx_t_setup_outctx(self, prefix, flags) -> Any: ...
def outctx_t_swigregister(*args, **kwargs): ...
def outctx_t_term_outctx(self, prefix=...) -> int: ...
def outctx_t_wif_get(self) -> printop_t: ...
def outctx_t_wif_set(self, wif) -> Any: ...
def print_insn_mnem(ea) -> bool: ...
def print_operand(ea, n, getn_flags=..., newtype=...) -> bool: ...
