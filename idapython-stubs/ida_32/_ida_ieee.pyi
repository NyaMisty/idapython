# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any

E_SPECIAL_EXP: int
FPVAL_NWORDS: int
FPV_BADARG: int
FPV_NAN: int
FPV_NINF: int
FPV_NORM: int
FPV_PINF: int
IEEE_E: int
IEEE_EXONE: int
IEEE_M: int
IEEE_NI: int
REAL_ERROR_BADDATA: int
REAL_ERROR_BADSTR: int
REAL_ERROR_FORMAT: int
REAL_ERROR_FPOVER: int
REAL_ERROR_INTOVER: int
REAL_ERROR_OK: int
REAL_ERROR_RANGE: int
REAL_ERROR_ZERODIV: int
SWIG_PYTHON_LEGACY_BOOL: int
cvar: Any

def delete_fpvalue_shorts_array_t(self) -> Any: ...
def delete_fpvalue_t(self) -> Any: ...
def ecleaz(x) -> Any: ...
def fpvalue_shorts_array_t___getitem__(*args, **kwargs): ...
def fpvalue_shorts_array_t___len__(self) -> size_t: ...
def fpvalue_shorts_array_t___setitem__(self, i, v) -> Any: ...
def fpvalue_shorts_array_t__get_bytes(self) -> bytevec_t: ...
def fpvalue_shorts_array_t__set_bytes(self, bts) -> Any: ...
def fpvalue_shorts_array_t_data_get(*args, **kwargs): ...
def fpvalue_shorts_array_t_swiginit(*args, **kwargs): ...
def fpvalue_shorts_array_t_swigregister(*args, **kwargs): ...
def fpvalue_t___add__(self, o) -> fpvalue_t: ...
def fpvalue_t___eq__(self, r) -> bool: ...
def fpvalue_t___ge__(self, r) -> bool: ...
def fpvalue_t___gt__(self, r) -> bool: ...
def fpvalue_t___le__(self, r) -> bool: ...
def fpvalue_t___lt__(self, r) -> bool: ...
def fpvalue_t___mul__(self, o) -> fpvalue_t: ...
def fpvalue_t___ne__(self, r) -> bool: ...
def fpvalue_t___str__(self) -> qstring: ...
def fpvalue_t___sub__(self, o) -> fpvalue_t: ...
def fpvalue_t___truediv__(self, o) -> fpvalue_t: ...
def fpvalue_t__get_10bytes(self) -> Any: ...
def fpvalue_t__get_bytes(self) -> Any: ...
def fpvalue_t__get_float(self) -> double: ...
def fpvalue_t__get_shorts(self) -> fpvalue_shorts_array_t: ...
def fpvalue_t__set_10bytes(self, _in) -> Any: ...
def fpvalue_t__set_bytes(self, _in) -> Any: ...
def fpvalue_t__set_float(self, v) -> Any: ...
def fpvalue_t_assign(self, r) -> Any: ...
def fpvalue_t_clear(self) -> Any: ...
def fpvalue_t_compare(self, r) -> int: ...
def fpvalue_t_eabs(self) -> Any: ...
def fpvalue_t_fadd(self, y) -> fpvalue_error_t: ...
def fpvalue_t_fdiv(self, y) -> fpvalue_error_t: ...
def fpvalue_t_fmul(self, y) -> fpvalue_error_t: ...
def fpvalue_t_from_10bytes(self, fpval) -> fpvalue_error_t: ...
def fpvalue_t_from_12bytes(self, fpval) -> fpvalue_error_t: ...
def fpvalue_t_from_int64(self, x) -> Any: ...
def fpvalue_t_from_str(self, p) -> fpvalue_error_t: ...
def fpvalue_t_from_sval(self, x) -> Any: ...
def fpvalue_t_from_uint64(self, x) -> Any: ...
def fpvalue_t_fsub(self, y) -> fpvalue_error_t: ...
def fpvalue_t_get_kind(self) -> fpvalue_kind_t: ...
def fpvalue_t_is_negative(self) -> bool: ...
def fpvalue_t_mul_pow2(self, power_of_2) -> fpvalue_error_t: ...
def fpvalue_t_negate(self) -> Any: ...
def fpvalue_t_swiginit(*args, **kwargs): ...
def fpvalue_t_swigregister(*args, **kwargs): ...
def fpvalue_t_to_10bytes(self, fpval) -> fpvalue_error_t: ...
def fpvalue_t_to_12bytes(self, fpval) -> fpvalue_error_t: ...
def fpvalue_t_to_int64(self, round=...) -> fpvalue_error_t: ...
def fpvalue_t_to_str(self, mode) -> Any: ...
def fpvalue_t_to_sval(self, round=...) -> fpvalue_error_t: ...
def fpvalue_t_to_uint64(self, round=...) -> fpvalue_error_t: ...
def fpvalue_t_w_get(self) -> uint16[6]: ...
def fpvalue_t_w_set(self, w) -> Any: ...
def new_fpvalue_shorts_array_t(data) -> fpvalue_shorts_array_t: ...
def new_fpvalue_t(_in) -> fpvalue_t: ...
