# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any

FIXUPF_CREATED: int
FIXUPF_EXTDEF: int
FIXUPF_LOADER_MASK: int
FIXUPF_REL: int
FIXUPF_UNUSED: int
FIXUP_CUSTOM: int
FIXUP_HI16: int
FIXUP_HI8: int
FIXUP_LOW16: int
FIXUP_LOW8: int
FIXUP_OFF16: int
FIXUP_OFF16S: int
FIXUP_OFF32: int
FIXUP_OFF32S: int
FIXUP_OFF64: int
FIXUP_OFF8: int
FIXUP_OFF8S: int
FIXUP_PTR16: int
FIXUP_PTR32: int
FIXUP_SEG16: int
SWIG_PYTHON_LEGACY_BOOL: int
V695_FIXUP_VHIGH: int
V695_FIXUP_VLOW: int

def calc_fixup_size(type) -> int: ...
def contains_fixups(ea, size) -> bool: ...
def del_fixup(source) -> Any: ...
def delete_fixup_data_t(self) -> Any: ...
def delete_fixup_info_t(self) -> Any: ...
def exists_fixup(source) -> bool: ...
def find_custom_fixup(name) -> fixup_type_t: ...
def fixup_data_t_calc_size(self) -> int: ...
def fixup_data_t_clr_extdef(self) -> Any: ...
def fixup_data_t_clr_unused(self) -> Any: ...
def fixup_data_t_displacement_get(self) -> adiff_t: ...
def fixup_data_t_displacement_set(self, displacement) -> Any: ...
def fixup_data_t_get(self, source) -> bool: ...
def fixup_data_t_get_base(self) -> ea_t: ...
def fixup_data_t_get_desc(*args, **kwargs): ...
def fixup_data_t_get_flags(self) -> uint32: ...
def fixup_data_t_get_handler(*args, **kwargs): ...
def fixup_data_t_get_type(self) -> fixup_type_t: ...
def fixup_data_t_get_value(self, ea) -> uval_t: ...
def fixup_data_t_has_base(self) -> bool: ...
def fixup_data_t_is_custom(self) -> bool: ...
def fixup_data_t_is_extdef(self) -> bool: ...
def fixup_data_t_is_unused(self) -> bool: ...
def fixup_data_t_off_get(self) -> ea_t: ...
def fixup_data_t_off_set(self, off) -> Any: ...
def fixup_data_t_patch_value(self, ea) -> bool: ...
def fixup_data_t_sel_get(self) -> sel_t: ...
def fixup_data_t_sel_set(self, sel) -> Any: ...
def fixup_data_t_set(self, source) -> Any: ...
def fixup_data_t_set_base(self, new_base) -> Any: ...
def fixup_data_t_set_extdef(self) -> Any: ...
def fixup_data_t_set_sel(self, seg) -> Any: ...
def fixup_data_t_set_target_sel(self) -> Any: ...
def fixup_data_t_set_type(self, type_) -> Any: ...
def fixup_data_t_set_type_and_flags(self, type_, flags_=...) -> Any: ...
def fixup_data_t_set_unused(self) -> Any: ...
def fixup_data_t_swiginit(*args, **kwargs): ...
def fixup_data_t_swigregister(*args, **kwargs): ...
def fixup_data_t_was_created(self) -> bool: ...
def fixup_info_t_ea_get(self) -> ea_t: ...
def fixup_info_t_ea_set(self, ea) -> Any: ...
def fixup_info_t_fd_get(self) -> fixup_data_t: ...
def fixup_info_t_fd_set(self, fd) -> Any: ...
def fixup_info_t_swiginit(*args, **kwargs): ...
def fixup_info_t_swigregister(*args, **kwargs): ...
def gen_fix_fixups(_from, to, size) -> Any: ...
def get_first_fixup_ea() -> ea_t: ...
def get_fixup(fd, source) -> bool: ...
def get_fixup_desc(*args, **kwargs): ...
def get_fixup_handler(*args, **kwargs): ...
def get_fixup_value(ea, type) -> uval_t: ...
def get_fixups(out, ea, size) -> bool: ...
def get_next_fixup_ea(ea) -> ea_t: ...
def get_prev_fixup_ea(ea) -> ea_t: ...
def handle_fixups_in_macro(ri, ea, other, macro_reft_and_flags) -> bool: ...
def is_fixup_custom(type) -> bool: ...
def new_fixup_data_t(type_, flags_=...) -> fixup_data_t: ...
def new_fixup_info_t() -> fixup_info_t: ...
def patch_fixup_value(ea, fd) -> bool: ...
def set_fixup(source, fd) -> Any: ...
