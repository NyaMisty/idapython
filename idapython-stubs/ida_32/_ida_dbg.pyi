# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any, overload

BKPT_ACTIVE: int
BKPT_BADBPT: int
BKPT_CNDREADY: int
BKPT_FAKEPEND: int
BKPT_LISTBPT: int
BKPT_PAGE: int
BKPT_PARTIAL: int
BKPT_TRACE: int
BPLT_ABS: int
BPLT_REL: int
BPLT_SRC: int
BPLT_SYM: int
BPTCK_ACT: int
BPTCK_NO: int
BPTCK_NONE: int
BPTCK_YES: int
BPTEV_ADDED: int
BPTEV_CHANGED: int
BPTEV_REMOVED: int
BPT_BRK: int
BPT_ELANG_MASK: int
BPT_ELANG_SHIFT: int
BPT_ENABLED: int
BPT_LOWCND: int
BPT_TRACE: int
BPT_TRACEON: int
BPT_TRACE_BBLK: int
BPT_TRACE_FUNC: int
BPT_TRACE_INSN: int
BPT_TRACE_TYPES: int
BPT_UPDMEM: int
BT_LOG_INSTS: int
DBGINV_ALL: int
DBGINV_MEMCFG: int
DBGINV_MEMORY: int
DBGINV_NONE: int
DBGINV_REDRAW: int
DBGINV_REGS: int
DEC_ERROR: int
DEC_NOTASK: int
DEC_TIMEOUT: int
DOPT_BPT_MSGS: int
DOPT_DISABLE_ASLR: int
DOPT_END_BPT: int
DOPT_ENTRY_BPT: int
DOPT_EXCDLG: int
DOPT_FAST_STEP: int
DOPT_INFO_BPT: int
DOPT_INFO_MSGS: int
DOPT_LIB_BPT: int
DOPT_LIB_MSGS: int
DOPT_LOAD_DINFO: int
DOPT_REAL_MEMORY: int
DOPT_REDO_STACK: int
DOPT_SEGM_MSGS: int
DOPT_START_BPT: int
DOPT_TEMP_HWBPT: int
DOPT_THREAD_BPT: int
DOPT_THREAD_MSGS: int
DSTATE_NOTASK: int
DSTATE_RUN: int
DSTATE_SUSP: int
EXCDLG_ALWAYS: int
EXCDLG_NEVER: int
EXCDLG_UNKNOWN: int
FT_LOG_RET: int
IT_LOG_SAME_IP: int
MOVBPT_BAD_TYPE: int
MOVBPT_DEST_BUSY: int
MOVBPT_NOT_FOUND: int
MOVBPT_OK: int
SAVE_ALL_VALUES: int
SAVE_DIFF: int
SAVE_NONE: int
SRCDBG_PROV_VERSION: int
SRCIT_EXPR: int
SRCIT_FUNC: int
SRCIT_LOCVAR: int
SRCIT_MODULE: int
SRCIT_NONE: int
SRCIT_STMT: int
SRCIT_STTVAR: int
ST_ALREADY_LOGGED: int
ST_DIFFERENTIAL: int
ST_OPTIONS_DEFAULT: int
ST_OPTIONS_MASK: int
ST_OVER_DEBUG_SEG: int
ST_OVER_LIB_FUNC: int
ST_SKIP_LOOPS: int
SWIG_PYTHON_LEGACY_BOOL: int
WFNE_ANY: int
WFNE_CONT: int
WFNE_NOWAIT: int
WFNE_SILENT: int
WFNE_SUSP: int
WFNE_USEC: int
dbg_bpt: int
dbg_bpt_changed: int
dbg_exception: int
dbg_finished_loading_bpts: int
dbg_information: int
dbg_last: int
dbg_library_load: int
dbg_library_unload: int
dbg_null: int
dbg_process_attach: int
dbg_process_detach: int
dbg_process_exit: int
dbg_process_start: int
dbg_request_error: int
dbg_run_to: int
dbg_started_loading_bpts: int
dbg_step_into: int
dbg_step_over: int
dbg_step_until_ret: int
dbg_suspend_process: int
dbg_thread_exit: int
dbg_thread_start: int
dbg_trace: int
tev_bpt: int
tev_call: int
tev_event: int
tev_insn: int
tev_max: int
tev_mem: int
tev_none: int
tev_ret: int

def DBG_Hooks_dbg_bpt(self, tid, bptea) -> int: ...
def DBG_Hooks_dbg_bpt_changed(self, bptev_code, bpt) -> Any: ...
def DBG_Hooks_dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info) -> int: ...
def DBG_Hooks_dbg_finished_loading_bpts(self) -> Any: ...
def DBG_Hooks_dbg_information(self, pid, tid, ea, info) -> Any: ...
def DBG_Hooks_dbg_library_load(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size) -> Any: ...
def DBG_Hooks_dbg_library_unload(self, pid, tid, ea, info) -> Any: ...
def DBG_Hooks_dbg_process_attach(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size) -> Any: ...
def DBG_Hooks_dbg_process_detach(self, pid, tid, ea) -> Any: ...
def DBG_Hooks_dbg_process_exit(self, pid, tid, ea, exit_code) -> Any: ...
def DBG_Hooks_dbg_process_start(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size) -> Any: ...
def DBG_Hooks_dbg_request_error(self, failed_command, failed_dbg_notification) -> Any: ...
def DBG_Hooks_dbg_run_to(self, pid, tid, ea) -> Any: ...
def DBG_Hooks_dbg_started_loading_bpts(self) -> Any: ...
def DBG_Hooks_dbg_step_into(self) -> Any: ...
def DBG_Hooks_dbg_step_over(self) -> Any: ...
def DBG_Hooks_dbg_step_until_ret(self) -> Any: ...
def DBG_Hooks_dbg_suspend_process(self) -> Any: ...
def DBG_Hooks_dbg_thread_exit(self, pid, tid, ea, exit_code) -> Any: ...
def DBG_Hooks_dbg_thread_start(self, pid, tid, ea) -> Any: ...
def DBG_Hooks_dbg_trace(self, tid, ip) -> int: ...
def DBG_Hooks_hook(self) -> bool: ...
def DBG_Hooks_swiginit(*args, **kwargs): ...
def DBG_Hooks_swigregister(*args, **kwargs): ...
def DBG_Hooks_unhook(self) -> bool: ...
@overload
def add_bpt(ea, size=..., type=...) -> bool: ...
@overload
def add_bpt(bpt) -> bool: ...
def add_path_mapping(src, dst) -> Any: ...
def add_virt_module(mod) -> bool: ...
def attach_process(pid=..., event_id=...) -> int: ...
def bpt_location_t___eq__(self, r) -> bool: ...
def bpt_location_t___ge__(self, r) -> bool: ...
def bpt_location_t___gt__(self, r) -> bool: ...
def bpt_location_t___le__(self, r) -> bool: ...
def bpt_location_t___lt__(self, r) -> bool: ...
def bpt_location_t___ne__(self, r) -> bool: ...
def bpt_location_t_compare(self, r) -> int: ...
def bpt_location_t_ea(self) -> ea_t: ...
def bpt_location_t_index_get(self) -> int: ...
def bpt_location_t_index_set(self, index) -> Any: ...
def bpt_location_t_info_get(self) -> ea_t: ...
def bpt_location_t_info_set(self, info) -> Any: ...
def bpt_location_t_is_empty_path(self) -> bool: ...
def bpt_location_t_lineno(self) -> int: ...
def bpt_location_t_loctype_get(self) -> bpt_loctype_t: ...
def bpt_location_t_loctype_set(self, loctype) -> Any: ...
def bpt_location_t_offset(self) -> uval_t: ...
def bpt_location_t_path(*args, **kwargs): ...
def bpt_location_t_set_abs_bpt(self, a) -> Any: ...
def bpt_location_t_set_rel_bpt(self, mod, _offset) -> Any: ...
def bpt_location_t_set_src_bpt(self, fn, _lineno) -> Any: ...
def bpt_location_t_set_sym_bpt(self, _symbol, _offset=...) -> Any: ...
def bpt_location_t_swiginit(*args, **kwargs): ...
def bpt_location_t_swigregister(*args, **kwargs): ...
def bpt_location_t_symbol(*args, **kwargs): ...
def bpt_location_t_type(self) -> bpt_loctype_t: ...
def bpt_t_badbpt(self) -> bool: ...
def bpt_t_bptid_get(self) -> inode_t: ...
def bpt_t_bptid_set(self, bptid) -> Any: ...
def bpt_t_cb_get(self) -> size_t: ...
def bpt_t_cb_set(self, cb) -> Any: ...
def bpt_t_cndidx_get(self) -> int: ...
def bpt_t_cndidx_set(self, cndidx) -> Any: ...
def bpt_t_condition_get(*args, **kwargs): ...
def bpt_t_condition_set(self, condition) -> Any: ...
def bpt_t_ea_get(self) -> ea_t: ...
def bpt_t_ea_set(self, ea) -> Any: ...
def bpt_t_elang_get(*args, **kwargs): ...
def bpt_t_elang_set(self, elang) -> Any: ...
def bpt_t_enabled(self) -> bool: ...
def bpt_t_flags_get(self) -> uint32: ...
def bpt_t_flags_set(self, flags) -> Any: ...
def bpt_t_get_cnd_elang_idx(self) -> size_t: ...
def bpt_t_get_size(self) -> int: ...
def bpt_t_is_absbpt(self) -> bool: ...
def bpt_t_is_active(self) -> bool: ...
def bpt_t_is_compiled(self) -> bool: ...
def bpt_t_is_hwbpt(self) -> bool: ...
def bpt_t_is_inactive(self) -> bool: ...
def bpt_t_is_low_level(self) -> bool: ...
def bpt_t_is_page_bpt(self) -> bool: ...
def bpt_t_is_partially_active(self) -> bool: ...
def bpt_t_is_relbpt(self) -> bool: ...
def bpt_t_is_srcbpt(self) -> bool: ...
def bpt_t_is_symbpt(self) -> bool: ...
def bpt_t_is_tracemodebpt(self) -> bool: ...
def bpt_t_is_traceoffbpt(self) -> bool: ...
def bpt_t_is_traceonbpt(self) -> bool: ...
def bpt_t_listbpt(self) -> bool: ...
def bpt_t_loc_get(self) -> bpt_location_t: ...
def bpt_t_loc_set(self, loc) -> Any: ...
def bpt_t_pass_count_get(self) -> int: ...
def bpt_t_pass_count_set(self, pass_count) -> Any: ...
def bpt_t_pid_get(self) -> pid_t: ...
def bpt_t_pid_set(self, pid) -> Any: ...
def bpt_t_props_get(self) -> uint32: ...
def bpt_t_props_set(self, props) -> Any: ...
def bpt_t_set_abs_bpt(self, a) -> Any: ...
def bpt_t_set_rel_bpt(self, mod, o) -> Any: ...
def bpt_t_set_src_bpt(self, fn, lineno) -> Any: ...
def bpt_t_set_sym_bpt(self, sym, o) -> Any: ...
def bpt_t_set_trace_action(self, enable, trace_types) -> bool: ...
def bpt_t_size_get(self) -> int: ...
def bpt_t_size_set(self, size) -> Any: ...
def bpt_t_swiginit(*args, **kwargs): ...
def bpt_t_swigregister(*args, **kwargs): ...
def bpt_t_tid_get(self) -> thid_t: ...
def bpt_t_tid_set(self, tid) -> Any: ...
def bpt_t_type_get(self) -> bpttype_t: ...
def bpt_t_type_set(self, type) -> Any: ...
def bpt_vec_t___getitem__(self, i) -> bpt_t: ...
def bpt_vec_t___len__(self) -> size_t: ...
def bpt_vec_t___setitem__(self, i, v) -> Any: ...
def bpt_vec_t_at(self, _idx) -> bpt_t: ...
@overload
def bpt_vec_t_begin(self) -> bpt_t: ...
@overload
def bpt_vec_t_begin(self) -> bpt_t: ...
def bpt_vec_t_capacity(self) -> size_t: ...
def bpt_vec_t_clear(self) -> Any: ...
def bpt_vec_t_empty(self) -> bool: ...
@overload
def bpt_vec_t_end(self) -> bpt_t: ...
@overload
def bpt_vec_t_end(self) -> bpt_t: ...
@overload
def bpt_vec_t_erase(self, it) -> bpt_t: ...
@overload
def bpt_vec_t_erase(self, first, last) -> bpt_t: ...
def bpt_vec_t_extract(self) -> bpt_t: ...
def bpt_vec_t_grow(self, x=...) -> Any: ...
def bpt_vec_t_inject(self, s, len) -> Any: ...
def bpt_vec_t_insert(self, it, x) -> bpt_t: ...
def bpt_vec_t_pop_back(self) -> Any: ...
@overload
def bpt_vec_t_push_back(self, x) -> Any: ...
@overload
def bpt_vec_t_push_back(self) -> bpt_t: ...
def bpt_vec_t_qclear(self) -> Any: ...
def bpt_vec_t_reserve(self, cnt) -> Any: ...
@overload
def bpt_vec_t_resize(self, _newsize, x) -> Any: ...
@overload
def bpt_vec_t_resize(self, _newsize) -> Any: ...
def bpt_vec_t_size(self) -> size_t: ...
def bpt_vec_t_swap(self, r) -> Any: ...
def bpt_vec_t_swiginit(*args, **kwargs): ...
def bpt_vec_t_swigregister(*args, **kwargs): ...
def bpt_vec_t_truncate(self) -> Any: ...
def bptaddrs_t_bpt_get(self) -> bpt_t: ...
def bptaddrs_t_bpt_set(self, bpt) -> Any: ...
def bptaddrs_t_swiginit(*args, **kwargs): ...
def bptaddrs_t_swigregister(*args, **kwargs): ...
def bring_debugger_to_front() -> Any: ...
def check_bpt(ea) -> int: ...
def choose_trace_file() -> bool: ...
def clear_requests_queue() -> Any: ...
def clear_trace() -> Any: ...
def collect_stack_trace(tid, trace) -> bool: ...
def continue_process() -> bool: ...
def create_source_viewer(*args, **kwargs): ...
def dbg_add_bpt_tev(tid, ea, bp) -> bool: ...
def dbg_add_call_tev(tid, caller, callee) -> Any: ...
def dbg_add_debug_event(event) -> Any: ...
def dbg_add_insn_tev(tid, ea, save=...) -> bool: ...
def dbg_add_many_tevs(new_tevs) -> bool: ...
def dbg_add_ret_tev(tid, ret_insn, return_to) -> Any: ...
def dbg_add_tev(type, tid, address) -> Any: ...
def dbg_add_thread(tid) -> Any: ...
def dbg_bin_search(start_ea, end_ea, data, srch_flags) -> drc_t: ...
def dbg_can_query() -> bool: ...
def dbg_del_thread(tid) -> Any: ...
def dbg_is_loaded() -> bool: ...
def define_exception(*args, **kwargs): ...
@overload
def del_bpt(ea) -> bool: ...
@overload
def del_bpt(bptloc) -> bool: ...
def del_bptgrp(name) -> bool: ...
def del_virt_module(base) -> bool: ...
def delete_DBG_Hooks(self) -> Any: ...
def delete_bpt_location_t(self) -> Any: ...
def delete_bpt_t(self) -> Any: ...
def delete_bpt_vec_t(self) -> Any: ...
def delete_bptaddrs_t(self) -> Any: ...
def delete_eval_ctx_t(self) -> Any: ...
def delete_memreg_info_t(self) -> Any: ...
def delete_memreg_infos_t(self) -> Any: ...
def delete_tev_info_reg_t(self) -> Any: ...
def delete_tev_info_t(self) -> Any: ...
def delete_tev_reg_value_t(self) -> Any: ...
def delete_tev_reg_values_t(self) -> Any: ...
def delete_tevinforeg_vec_t(self) -> Any: ...
def detach_process() -> bool: ...
def diff_trace_file(NONNULL_filename) -> bool: ...
def disable_bblk_trace() -> bool: ...
@overload
def disable_bpt(ea) -> bool: ...
@overload
def disable_bpt(bptloc) -> bool: ...
def disable_func_trace() -> bool: ...
def disable_insn_trace() -> bool: ...
def disable_step_trace() -> bool: ...
def disown_DBG_Hooks(*args, **kwargs): ...
def edit_manual_regions() -> Any: ...
def enable_bblk_trace(enable=...) -> bool: ...
@overload
def enable_bpt(ea, enable=...) -> bool: ...
@overload
def enable_bpt(bptloc, enable=...) -> bool: ...
def enable_bptgrp(bptgrp_name, enable=...) -> int: ...
def enable_func_trace(enable=...) -> bool: ...
def enable_insn_trace(enable=...) -> bool: ...
def enable_manual_regions(enable) -> Any: ...
def enable_step_trace(enable=...) -> bool: ...
def eval_ctx_t_ea_get(self) -> ea_t: ...
def eval_ctx_t_ea_set(self, ea) -> Any: ...
def eval_ctx_t_swiginit(*args, **kwargs): ...
def eval_ctx_t_swigregister(*args, **kwargs): ...
def exist_bpt(ea) -> bool: ...
def exit_process() -> bool: ...
def find_bpt(bptloc, bpt) -> bool: ...
def get_bblk_trace_options() -> int: ...
def get_bpt(ea, bpt) -> bool: ...
def get_bpt_group(bptloc) -> bool: ...
def get_bpt_qty() -> int: ...
def get_bpt_tev_ea(n) -> ea_t: ...
def get_bptloc_string(*args, **kwargs): ...
def get_call_tev_callee(n) -> ea_t: ...
def get_current_source_file() -> bool: ...
def get_current_source_line() -> int: ...
def get_current_thread() -> thid_t: ...
def get_dbg_byte(ea) -> bool: ...
def get_dbg_memory_info(ranges) -> int: ...
def get_dbg_reg_info(regname, ri) -> bool: ...
def get_debug_event() -> debug_event_t: ...
def get_debugger_event_cond(*args, **kwargs): ...
def get_first_module(modinfo) -> bool: ...
def get_func_trace_options() -> int: ...
def get_global_var(prov, ea, name, out) -> bool: ...
def get_grp_bpts(bpts, grp_name) -> ssize_t: ...
def get_insn_tev_reg_mem(n, memmap) -> bool: ...
def get_insn_tev_reg_result(n, regname, regval) -> bool: ...
def get_insn_tev_reg_val(n, regname, regval) -> bool: ...
def get_insn_trace_options() -> int: ...
def get_ip_val() -> bool: ...
def get_local_var(prov, ea, name, out) -> bool: ...
def get_local_vars(prov, ea, out) -> bool: ...
def get_manual_regions(ranges) -> Any: ...
def get_module_info(ea, modinfo) -> bool: ...
def get_next_module(modinfo) -> bool: ...
def get_process_options() -> Any: ...
def get_process_state() -> int: ...
def get_processes(proclist) -> ssize_t: ...
@overload
def get_reg_val(regname, regval) -> bool: ...
@overload
def get_reg_val(regname, ival) -> bool: ...
def get_reg_vals(tid, clsmask=...) -> regvals_t: ...
def get_ret_tev_return(n) -> ea_t: ...
def get_running_notification() -> dbg_notification_t: ...
def get_running_request() -> ui_notification_t: ...
def get_sp_val() -> bool: ...
def get_srcinfo_provider(*args, **kwargs): ...
def get_step_trace_options() -> int: ...
def get_tev_ea(n) -> ea_t: ...
def get_tev_event(n, d) -> bool: ...
def get_tev_info(n, tev_info) -> bool: ...
def get_tev_memory_info(n, mi) -> bool: ...
def get_tev_qty() -> int: ...
def get_tev_tid(n) -> int: ...
def get_tev_type(n) -> int: ...
def get_thread_qty() -> int: ...
def get_trace_base_address() -> ea_t: ...
def get_trace_dynamic_register_set(idaregs) -> Any: ...
def get_trace_file_desc(filename) -> bool: ...
def get_trace_platform(*args, **kwargs): ...
def getn_bpt(n, bpt) -> bool: ...
def getn_thread(n) -> thid_t: ...
def getn_thread_name(*args, **kwargs): ...
def graph_trace() -> bool: ...
def handle_debug_event(ev, rqflags) -> int: ...
def hide_all_bpts() -> int: ...
def internal_get_sreg_base(tid, sreg_value) -> ea_t: ...
def internal_ioctl(fn, buf, poutbuf, poutsize) -> int: ...
def invalidate_dbg_state(dbginv) -> int: ...
def invalidate_dbgmem_config() -> Any: ...
def invalidate_dbgmem_contents(ea, size) -> Any: ...
def is_bblk_trace_enabled() -> bool: ...
def is_debugger_busy() -> bool: ...
def is_debugger_memory(ea) -> bool: ...
def is_debugger_on() -> bool: ...
def is_func_trace_enabled() -> bool: ...
def is_insn_trace_enabled() -> bool: ...
def is_reg_custom(regname) -> bool: ...
def is_reg_float(regname) -> bool: ...
def is_reg_integer(regname) -> bool: ...
def is_request_running() -> bool: ...
def is_step_trace_enabled() -> bool: ...
def is_valid_dstate(state) -> bool: ...
def is_valid_trace_file(filename) -> bool: ...
def list_bptgrps(bptgrps) -> size_t: ...
def load_debugger(dbgname, use_remote) -> bool: ...
def load_trace_file(filename) -> bool: ...
def memreg_info_t_ea_get(self) -> ea_t: ...
def memreg_info_t_ea_set(self, ea) -> Any: ...
def memreg_info_t_get_bytes(*args, **kwargs): ...
def memreg_info_t_swiginit(*args, **kwargs): ...
def memreg_info_t_swigregister(*args, **kwargs): ...
def memreg_infos_t___getitem__(self, i) -> memreg_info_t: ...
def memreg_infos_t___len__(self) -> size_t: ...
def memreg_infos_t___setitem__(self, i, v) -> Any: ...
def memreg_infos_t_at(self, _idx) -> memreg_info_t: ...
@overload
def memreg_infos_t_begin(self) -> memreg_info_t: ...
@overload
def memreg_infos_t_begin(self) -> memreg_info_t: ...
def memreg_infos_t_capacity(self) -> size_t: ...
def memreg_infos_t_clear(self) -> Any: ...
def memreg_infos_t_empty(self) -> bool: ...
@overload
def memreg_infos_t_end(self) -> memreg_info_t: ...
@overload
def memreg_infos_t_end(self) -> memreg_info_t: ...
@overload
def memreg_infos_t_erase(self, it) -> memreg_info_t: ...
@overload
def memreg_infos_t_erase(self, first, last) -> memreg_info_t: ...
def memreg_infos_t_extract(self) -> memreg_info_t: ...
def memreg_infos_t_grow(self, x=...) -> Any: ...
def memreg_infos_t_inject(self, s, len) -> Any: ...
def memreg_infos_t_insert(self, it, x) -> memreg_info_t: ...
def memreg_infos_t_pop_back(self) -> Any: ...
@overload
def memreg_infos_t_push_back(self, x) -> Any: ...
@overload
def memreg_infos_t_push_back(self) -> memreg_info_t: ...
def memreg_infos_t_qclear(self) -> Any: ...
def memreg_infos_t_reserve(self, cnt) -> Any: ...
@overload
def memreg_infos_t_resize(self, _newsize, x) -> Any: ...
@overload
def memreg_infos_t_resize(self, _newsize) -> Any: ...
def memreg_infos_t_size(self) -> size_t: ...
def memreg_infos_t_swap(self, r) -> Any: ...
def memreg_infos_t_swiginit(*args, **kwargs): ...
def memreg_infos_t_swigregister(*args, **kwargs): ...
def memreg_infos_t_truncate(self) -> Any: ...
def new_DBG_Hooks(_self, _flags=..., _hkcb_flags=...) -> DBG_Hooks: ...
def new_bpt_location_t() -> bpt_location_t: ...
def new_bpt_t() -> bpt_t: ...
def new_bpt_vec_t(x) -> bpt_vec_t: ...
def new_bptaddrs_t() -> bptaddrs_t: ...
def new_eval_ctx_t(_ea) -> eval_ctx_t: ...
def new_memreg_info_t() -> memreg_info_t: ...
def new_memreg_infos_t(x) -> memreg_infos_t: ...
def new_tev_info_reg_t() -> tev_info_reg_t: ...
def new_tev_info_t() -> tev_info_t: ...
def new_tev_reg_value_t(_reg_idx=..., _value=...) -> tev_reg_value_t: ...
def new_tev_reg_values_t(x) -> tev_reg_values_t: ...
def new_tevinforeg_vec_t(x) -> tevinforeg_vec_t: ...
def put_dbg_byte(ea, x) -> bool: ...
def read_dbg_memory(ea, buffer, size) -> ssize_t: ...
def refresh_debugger_memory(*args, **kwargs): ...
def rename_bptgrp(old_name, new_name) -> bool: ...
@overload
def request_add_bpt(ea, size=..., type=...) -> bool: ...
@overload
def request_add_bpt(bpt) -> bool: ...
def request_attach_process(pid, event_id) -> int: ...
def request_clear_trace() -> Any: ...
def request_continue_process() -> bool: ...
@overload
def request_del_bpt(ea) -> bool: ...
@overload
def request_del_bpt(bptloc) -> bool: ...
def request_detach_process() -> bool: ...
def request_disable_bblk_trace() -> bool: ...
@overload
def request_disable_bpt(ea) -> bool: ...
@overload
def request_disable_bpt(bptloc) -> bool: ...
def request_disable_func_trace() -> bool: ...
def request_disable_insn_trace() -> bool: ...
def request_disable_step_trace() -> bool: ...
def request_enable_bblk_trace(enable=...) -> bool: ...
@overload
def request_enable_bpt(ea, enable=...) -> bool: ...
@overload
def request_enable_bpt(bptloc, enable=...) -> bool: ...
def request_enable_func_trace(enable=...) -> bool: ...
def request_enable_insn_trace(enable=...) -> bool: ...
def request_enable_step_trace(enable=...) -> bool: ...
def request_exit_process() -> bool: ...
def request_resume_thread(tid) -> int: ...
def request_run_to(ea, pid=..., tid=...) -> bool: ...
def request_select_thread(tid) -> bool: ...
def request_set_bblk_trace_options(options) -> Any: ...
def request_set_func_trace_options(options) -> Any: ...
def request_set_insn_trace_options(options) -> Any: ...
def request_set_reg_val(*args, **kwargs): ...
def request_set_resume_mode(tid, mode) -> bool: ...
def request_set_step_trace_options(options) -> Any: ...
def request_start_process(path=..., args=..., sdir=...) -> int: ...
def request_step_into() -> bool: ...
def request_step_over() -> bool: ...
def request_step_until_ret() -> bool: ...
def request_suspend_process() -> bool: ...
def request_suspend_thread(tid) -> int: ...
def resume_thread(tid) -> int: ...
def retrieve_exceptions() -> excvec_t: ...
def run_requests() -> bool: ...
def run_to(ea, pid=..., tid=...) -> bool: ...
def save_trace_file(filename, description) -> bool: ...
def select_thread(tid) -> bool: ...
def set_bblk_trace_options(options) -> Any: ...
def set_bpt_group(bpt, grp_name) -> bool: ...
def set_bptloc_group(bptloc, grp_name) -> bool: ...
def set_bptloc_string(s) -> int: ...
def set_debugger_event_cond(NONNULL_evcond) -> Any: ...
def set_debugger_options(options) -> uint: ...
def set_func_trace_options(options) -> Any: ...
def set_highlight_trace_options(hilight, color, diff) -> Any: ...
def set_insn_trace_options(options) -> Any: ...
def set_manual_regions(ranges) -> Any: ...
def set_process_options(path, args, sdir, host, _pass, port) -> Any: ...
def set_process_state(newstate, p_thid, dbginv) -> int: ...
def set_reg_val(regname, o) -> PyObject: ...
def set_remote_debugger(host, _pass, port=...) -> Any: ...
def set_resume_mode(tid, mode) -> bool: ...
def set_step_trace_options(options) -> Any: ...
def set_trace_base_address(ea) -> Any: ...
def set_trace_dynamic_register_set(idaregs) -> Any: ...
def set_trace_file_desc(filename, description) -> bool: ...
def set_trace_platform(platform) -> Any: ...
def set_trace_size(size) -> bool: ...
def srcdbg_request_step_into() -> bool: ...
def srcdbg_request_step_over() -> bool: ...
def srcdbg_request_step_until_ret() -> bool: ...
def srcdbg_step_into() -> bool: ...
def srcdbg_step_over() -> bool: ...
def srcdbg_step_until_ret() -> bool: ...
def start_process(path=..., args=..., sdir=...) -> int: ...
def step_into() -> bool: ...
def step_over() -> bool: ...
def step_until_ret() -> bool: ...
def store_exceptions() -> bool: ...
def suspend_process() -> bool: ...
def suspend_thread(tid) -> int: ...
def tev_info_reg_t_info_get(self) -> tev_info_t: ...
def tev_info_reg_t_info_set(self, info) -> Any: ...
def tev_info_reg_t_registers_get(self) -> tev_reg_values_t: ...
def tev_info_reg_t_registers_set(self, registers) -> Any: ...
def tev_info_reg_t_swiginit(*args, **kwargs): ...
def tev_info_reg_t_swigregister(*args, **kwargs): ...
def tev_info_t_ea_get(self) -> ea_t: ...
def tev_info_t_ea_set(self, ea) -> Any: ...
def tev_info_t_swiginit(*args, **kwargs): ...
def tev_info_t_swigregister(*args, **kwargs): ...
def tev_info_t_tid_get(self) -> thid_t: ...
def tev_info_t_tid_set(self, tid) -> Any: ...
def tev_info_t_type_get(self) -> tev_type_t: ...
def tev_info_t_type_set(self, type) -> Any: ...
def tev_reg_value_t_reg_idx_get(self) -> int: ...
def tev_reg_value_t_reg_idx_set(self, reg_idx) -> Any: ...
def tev_reg_value_t_swiginit(*args, **kwargs): ...
def tev_reg_value_t_swigregister(*args, **kwargs): ...
def tev_reg_value_t_value_get(self) -> regval_t: ...
def tev_reg_value_t_value_set(self, value) -> Any: ...
def tev_reg_values_t___getitem__(self, i) -> tev_reg_value_t: ...
def tev_reg_values_t___len__(self) -> size_t: ...
def tev_reg_values_t___setitem__(self, i, v) -> Any: ...
def tev_reg_values_t_at(self, _idx) -> tev_reg_value_t: ...
@overload
def tev_reg_values_t_begin(self) -> tev_reg_value_t: ...
@overload
def tev_reg_values_t_begin(self) -> tev_reg_value_t: ...
def tev_reg_values_t_capacity(self) -> size_t: ...
def tev_reg_values_t_clear(self) -> Any: ...
def tev_reg_values_t_empty(self) -> bool: ...
@overload
def tev_reg_values_t_end(self) -> tev_reg_value_t: ...
@overload
def tev_reg_values_t_end(self) -> tev_reg_value_t: ...
@overload
def tev_reg_values_t_erase(self, it) -> tev_reg_value_t: ...
@overload
def tev_reg_values_t_erase(self, first, last) -> tev_reg_value_t: ...
def tev_reg_values_t_extract(self) -> tev_reg_value_t: ...
def tev_reg_values_t_grow(self, x=...) -> Any: ...
def tev_reg_values_t_inject(self, s, len) -> Any: ...
def tev_reg_values_t_insert(self, it, x) -> tev_reg_value_t: ...
def tev_reg_values_t_pop_back(self) -> Any: ...
@overload
def tev_reg_values_t_push_back(self, x) -> Any: ...
@overload
def tev_reg_values_t_push_back(self) -> tev_reg_value_t: ...
def tev_reg_values_t_qclear(self) -> Any: ...
def tev_reg_values_t_reserve(self, cnt) -> Any: ...
@overload
def tev_reg_values_t_resize(self, _newsize, x) -> Any: ...
@overload
def tev_reg_values_t_resize(self, _newsize) -> Any: ...
def tev_reg_values_t_size(self) -> size_t: ...
def tev_reg_values_t_swap(self, r) -> Any: ...
def tev_reg_values_t_swiginit(*args, **kwargs): ...
def tev_reg_values_t_swigregister(*args, **kwargs): ...
def tev_reg_values_t_truncate(self) -> Any: ...
def tevinforeg_vec_t___getitem__(self, i) -> tev_info_reg_t: ...
def tevinforeg_vec_t___len__(self) -> size_t: ...
def tevinforeg_vec_t___setitem__(self, i, v) -> Any: ...
def tevinforeg_vec_t_at(self, _idx) -> tev_info_reg_t: ...
@overload
def tevinforeg_vec_t_begin(self) -> tev_info_reg_t: ...
@overload
def tevinforeg_vec_t_begin(self) -> tev_info_reg_t: ...
def tevinforeg_vec_t_capacity(self) -> size_t: ...
def tevinforeg_vec_t_clear(self) -> Any: ...
def tevinforeg_vec_t_empty(self) -> bool: ...
@overload
def tevinforeg_vec_t_end(self) -> tev_info_reg_t: ...
@overload
def tevinforeg_vec_t_end(self) -> tev_info_reg_t: ...
@overload
def tevinforeg_vec_t_erase(self, it) -> tev_info_reg_t: ...
@overload
def tevinforeg_vec_t_erase(self, first, last) -> tev_info_reg_t: ...
def tevinforeg_vec_t_extract(self) -> tev_info_reg_t: ...
def tevinforeg_vec_t_grow(self, x=...) -> Any: ...
def tevinforeg_vec_t_inject(self, s, len) -> Any: ...
def tevinforeg_vec_t_insert(self, it, x) -> tev_info_reg_t: ...
def tevinforeg_vec_t_pop_back(self) -> Any: ...
@overload
def tevinforeg_vec_t_push_back(self, x) -> Any: ...
@overload
def tevinforeg_vec_t_push_back(self) -> tev_info_reg_t: ...
def tevinforeg_vec_t_qclear(self) -> Any: ...
def tevinforeg_vec_t_reserve(self, cnt) -> Any: ...
@overload
def tevinforeg_vec_t_resize(self, _newsize, x) -> Any: ...
@overload
def tevinforeg_vec_t_resize(self, _newsize) -> Any: ...
def tevinforeg_vec_t_size(self) -> size_t: ...
def tevinforeg_vec_t_swap(self, r) -> Any: ...
def tevinforeg_vec_t_swiginit(*args, **kwargs): ...
def tevinforeg_vec_t_swigregister(*args, **kwargs): ...
def tevinforeg_vec_t_truncate(self) -> Any: ...
def update_bpt(bpt) -> bool: ...
def wait_for_next_event(wfne, timeout) -> dbg_event_code_t: ...
def write_dbg_memory(ea, py_buf, size=...) -> ssize_t: ...
