# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any

AFL_ALIGNFLOW: int
AFL_BNOT0: int
AFL_BNOT1: int
AFL_COLORED: int
AFL_FIXEDSPD: int
AFL_HIDDEN: int
AFL_HR_DETERMINED: int
AFL_HR_GUESSED_DATA: int
AFL_HR_GUESSED_FUNC: int
AFL_IDA_GUESSED: int
AFL_LIB: int
AFL_LINNUM: int
AFL_LNAME: int
AFL_LZERO0: int
AFL_LZERO1: int
AFL_MANUAL: int
AFL_NOBRD: int
AFL_NORET: int
AFL_NOTCODE: int
AFL_NOTPROC: int
AFL_PUBNAM: int
AFL_RETFP: int
AFL_SIGN0: int
AFL_SIGN1: int
AFL_TERSESTR: int
AFL_TI: int
AFL_TI0: int
AFL_TI1: int
AFL_TILCMT: int
AFL_TYPE_GUESSED: int
AFL_USEMODSP: int
AFL_USERSP: int
AFL_USERTI: int
AFL_WEAKNAM: int
AFL_ZSTROFF: int
AP_ALLOWDUPS: int
AP_ARRAY: int
AP_IDXBASEMASK: int
AP_IDXBIN: int
AP_IDXDEC: int
AP_IDXHEX: int
AP_IDXOCT: int
AP_INDEX: int
AP_SIGNED: int
BPU_1B: int
BPU_2B: int
BPU_4B: int
IDB_DESKTOPS_NODE_NAME: str
IDB_DESKTOPS_TAG: str
MAXSTRUCPATH: int
NALT_ABSBASE: int
NALT_AFLAGS: int
NALT_ALIGN: int
NALT_COLOR: int
NALT_CREF_FROM: str
NALT_CREF_TO: str
NALT_DREF_FROM: str
NALT_DREF_TO: str
NALT_ENUM0: int
NALT_ENUM1: int
NALT_GR_LAYX: str
NALT_LINNUM: int
NALT_PURGE: int
NALT_STRTYPE: int
NALT_STRUCT: int
NALT_SWITCH: int
NSUP_ARGEAS: int
NSUP_ARRAY: int
NSUP_CMT: int
NSUP_CUSTDT: int
NSUP_EX_FLAGS: int
NSUP_FOP1: int
NSUP_FOP2: int
NSUP_FOP3: int
NSUP_FOP4: int
NSUP_FOP5: int
NSUP_FOP6: int
NSUP_FOP7: int
NSUP_FOP8: int
NSUP_FTAILS: int
NSUP_GROUP: int
NSUP_GROUPS: int
NSUP_GR_INFO: str
NSUP_GR_LAYT: str
NSUP_JINFO: int
NSUP_LLABEL: int
NSUP_MANUAL: int
NSUP_OMFGRP: int
NSUP_OPTYPES: int
NSUP_OREF0: int
NSUP_OREF1: int
NSUP_OREF2: int
NSUP_OREF3: int
NSUP_OREF4: int
NSUP_OREF5: int
NSUP_OREF6: int
NSUP_OREF7: int
NSUP_ORIGFMD: int
NSUP_POINTS: int
NSUP_REF0: int
NSUP_REF1: int
NSUP_REF2: int
NSUP_REF3: int
NSUP_REF4: int
NSUP_REF5: int
NSUP_REF6: int
NSUP_REF7: int
NSUP_REGARG: int
NSUP_REGVAR: int
NSUP_REPCMT: int
NSUP_SEGTRANS: int
NSUP_STROFF0: int
NSUP_STROFF1: int
NSUP_SWITCH: int
NSUP_TYPEINFO: int
NSUP_XREFPOS: int
PATCH_TAG: str
POF_IS_F64: int
POF_VALID_AFLAGS: int
POF_VALID_TI: int
REFINFO_CUSTOM: int
REFINFO_NOBASE: int
REFINFO_NO_ONES: int
REFINFO_NO_ZEROS: int
REFINFO_PASTEND: int
REFINFO_RVAOFF: int
REFINFO_SELFREF: int
REFINFO_SIGNEDOP: int
REFINFO_SUBTRACT: int
REFINFO_TYPE: int
RIDX_ABINAME: int
RIDX_ARCHIVE_PATH: int
RIDX_C_MACROS: int
RIDX_DBG_BINPATHS: int
RIDX_DUALOP_GRAPH: int
RIDX_DUALOP_TEXT: int
RIDX_FILE_FORMAT_NAME: int
RIDX_GROUPS: int
RIDX_H_PATH: int
RIDX_IDA_VERSION: int
RIDX_INCLUDE: int
RIDX_MD5: int
RIDX_NOTEPAD: int
RIDX_PROBLEMS: int
RIDX_SELECTORS: int
RIDX_SHA256: int
RIDX_SMALL_IDC: int
RIDX_SMALL_IDC_OLD: int
RIDX_SRCDBG_PATHS: int
RIDX_SRCDBG_UNDESIRED: int
RIDX_STR_ENCODINGS: int
STRENC_DEFAULT: int
STRENC_NONE: int
STRLYT_MASK: int
STRLYT_PASCAL1: int
STRLYT_PASCAL2: int
STRLYT_PASCAL4: int
STRLYT_SHIFT: int
STRLYT_TERMCHR: int
STRTYPE_C: int
STRTYPE_C_16: int
STRTYPE_C_32: int
STRTYPE_LEN2: int
STRTYPE_LEN2_16: int
STRTYPE_LEN2_32: int
STRTYPE_LEN4: int
STRTYPE_LEN4_16: int
STRTYPE_LEN4_32: int
STRTYPE_PASCAL: int
STRTYPE_PASCAL_16: int
STRTYPE_PASCAL_32: int
STRTYPE_TERMCHR: int
STRWIDTH_1B: int
STRWIDTH_2B: int
STRWIDTH_4B: int
STRWIDTH_MASK: int
SWIG_PYTHON_LEGACY_BOOL: int
SWI_CUSTOM: int
SWI_DEFRET: int
SWI_DEF_IN_TBL: int
SWI_ELBASE: int
SWI_HXNOLOWCASE: int
SWI_INDIRECT: int
SWI_J32: int
SWI_JMPINSN: int
SWI_JMP_INV: int
SWI_JSIZE: int
SWI_SELFREL: int
SWI_SEPARATE: int
SWI_SHIFT_MASK: int
SWI_SIGNED: int
SWI_SPARSE: int
SWI_STDTBL: int
SWI_SUBTRACT: int
SWI_USER: int
SWI_V32: int
SWI_VERSION: int
SWI_VSIZE: int
SWI_VSPLIT: int
cvar: Any
switch_info_t_SWITCH_INFO_VERSION: int

def add_encoding(encname) -> int: ...
def array_parameters_t_alignment_get(self) -> int32: ...
def array_parameters_t_alignment_set(self, alignment) -> Any: ...
def array_parameters_t_flags_get(self) -> int32: ...
def array_parameters_t_flags_set(self, flags) -> Any: ...
def array_parameters_t_is_default(self) -> bool: ...
def array_parameters_t_lineitems_get(self) -> int32: ...
def array_parameters_t_lineitems_set(self, lineitems) -> Any: ...
def array_parameters_t_swiginit(*args, **kwargs): ...
def array_parameters_t_swigregister(*args, **kwargs): ...
def clr__bnot0(ea) -> Any: ...
def clr__bnot1(ea) -> Any: ...
def clr__invsign0(ea) -> Any: ...
def clr__invsign1(ea) -> Any: ...
def clr_abits(ea, bits) -> Any: ...
def clr_align_flow(ea) -> Any: ...
def clr_colored_item(ea) -> Any: ...
def clr_fixed_spd(ea) -> Any: ...
def clr_has_lname(ea) -> Any: ...
def clr_has_ti(ea) -> Any: ...
def clr_has_ti0(ea) -> Any: ...
def clr_has_ti1(ea) -> Any: ...
def clr_libitem(ea) -> Any: ...
def clr_lzero0(ea) -> Any: ...
def clr_lzero1(ea) -> Any: ...
def clr_noret(ea) -> Any: ...
def clr_notcode(ea) -> Any: ...
def clr_notproc(ea) -> Any: ...
def clr_retfp(ea) -> Any: ...
def clr_terse_struc(ea) -> Any: ...
def clr_tilcmt(ea) -> Any: ...
def clr_usemodsp(ea) -> Any: ...
def clr_usersp(ea) -> Any: ...
def clr_userti(ea) -> Any: ...
def clr_zstroff(ea) -> Any: ...
def custom_data_type_ids_fids_array___getitem__(*args, **kwargs): ...
def custom_data_type_ids_fids_array___len__(self) -> size_t: ...
def custom_data_type_ids_fids_array___setitem__(self, i, v) -> Any: ...
def custom_data_type_ids_fids_array__get_bytes(self) -> bytevec_t: ...
def custom_data_type_ids_fids_array__set_bytes(self, bts) -> Any: ...
def custom_data_type_ids_fids_array_data_get(*args, **kwargs): ...
def custom_data_type_ids_fids_array_swiginit(*args, **kwargs): ...
def custom_data_type_ids_fids_array_swigregister(*args, **kwargs): ...
def custom_data_type_ids_t___getFids(self) -> custom_data_type_ids_fids_array: ...
def custom_data_type_ids_t_dtid_get(self) -> int16: ...
def custom_data_type_ids_t_dtid_set(self, dtid) -> Any: ...
def custom_data_type_ids_t_fids_get(self) -> int16[8]: ...
def custom_data_type_ids_t_fids_set(self, fids) -> Any: ...
def custom_data_type_ids_t_get_dtid(self) -> tid_t: ...
def custom_data_type_ids_t_set(self, tid) -> Any: ...
def custom_data_type_ids_t_swiginit(*args, **kwargs): ...
def custom_data_type_ids_t_swigregister(*args, **kwargs): ...
def dbg_get_input_path() -> ssize_t: ...
def del_absbase(ea) -> Any: ...
def del_aflags(ea) -> Any: ...
def del_alignment(ea) -> Any: ...
def del_array_parameters(ea) -> Any: ...
def del_custom_data_type_ids(ea) -> Any: ...
def del_encoding(idx) -> bool: ...
def del_ind_purged(ea) -> Any: ...
def del_item_color(ea) -> bool: ...
def del_op_tinfo(ea, n) -> Any: ...
def del_refinfo(ea, n) -> bool: ...
def del_source_linnum(ea) -> Any: ...
def del_str_type(ea) -> Any: ...
def del_switch_info(ea) -> Any: ...
def del_switch_parent(ea) -> Any: ...
def del_tinfo(ea) -> Any: ...
def delete_array_parameters_t(self) -> Any: ...
def delete_custom_data_type_ids_fids_array(self) -> Any: ...
def delete_custom_data_type_ids_t(self) -> Any: ...
def delete_enum_const_t(self) -> Any: ...
def delete_imports() -> Any: ...
def delete_opinfo_t(self) -> Any: ...
def delete_printop_t(self) -> Any: ...
def delete_refinfo_t(self) -> Any: ...
def delete_strpath_ids_array(self) -> Any: ...
def delete_strpath_t(self) -> Any: ...
def delete_switch_info_t(self) -> Any: ...
def ea2node(ea) -> nodeidx_t: ...
def encoding_from_strtype(*args, **kwargs): ...
def end_ea2node(ea) -> nodeidx_t: ...
def enum_const_t_serial_get(self) -> uchar: ...
def enum_const_t_serial_set(self, serial) -> Any: ...
def enum_const_t_swiginit(*args, **kwargs): ...
def enum_const_t_swigregister(*args, **kwargs): ...
def enum_const_t_tid_get(self) -> tid_t: ...
def enum_const_t_tid_set(self, tid) -> Any: ...
def enum_import_names(mod_index, py_cb) -> int: ...
def find_custom_refinfo(name) -> int: ...
def get_absbase(ea) -> ea_t: ...
def get_aflags(ea) -> aflags_t: ...
def get_alignment(ea) -> uint32: ...
def get_archive_path() -> ssize_t: ...
def get_array_parameters(out, ea) -> ssize_t: ...
def get_asm_inc_file() -> ssize_t: ...
def get_custom_data_type_ids(cdis, ea) -> int: ...
def get_custom_refinfo(*args, **kwargs): ...
def get_default_encoding_idx(bpu) -> int: ...
def get_elapsed_secs() -> size_t: ...
def get_encoding_bpu(idx) -> int: ...
def get_encoding_bpu_by_name(encname) -> int: ...
def get_encoding_name(*args, **kwargs): ...
def get_encoding_qty() -> int: ...
def get_gotea() -> ea_t: ...
def get_ida_notepad_text() -> ssize_t: ...
def get_idb_ctime() -> time_t: ...
def get_idb_nopens() -> size_t: ...
def get_ids_modnode() -> netnode: ...
def get_imagebase() -> ea_t: ...
def get_import_module_name(*args, **kwargs): ...
def get_import_module_qty() -> uint: ...
def get_ind_purged(ea) -> ea_t: ...
def get_initial_ida_version() -> ssize_t: ...
def get_initial_idb_version() -> ushort: ...
def get_input_file_path() -> ssize_t: ...
def get_item_color(ea) -> bgcolor_t: ...
def get_loader_format_name() -> ssize_t: ...
def get_op_tinfo(tif, ea, n) -> bool: ...
def get_outfile_encoding_idx() -> int: ...
def get_refinfo(ri, ea, n) -> bool: ...
def get_reftype_by_size(size) -> reftype_t: ...
def get_root_filename() -> ssize_t: ...
def get_source_linnum(ea) -> uval_t: ...
def get_srcdbg_paths() -> ssize_t: ...
def get_srcdbg_undesired_paths() -> ssize_t: ...
def get_str_encoding_idx(strtype) -> uchar: ...
def get_str_term1(strtype) -> char: ...
def get_str_term2(strtype) -> char: ...
def get_str_type(ea) -> uint32: ...
def get_str_type_code(strtype) -> uchar: ...
def get_str_type_prefix_length(strtype) -> size_t: ...
def get_strid(ea) -> tid_t: ...
def get_strtype_bpu(strtype) -> int: ...
def get_switch_info(out, ea) -> ssize_t: ...
def get_switch_parent(ea) -> ea_t: ...
def get_tinfo(tif, ea) -> bool: ...
def getnode(ea) -> netnode: ...
def has_aflag_linnum(flags) -> bool: ...
def has_aflag_lname(flags) -> bool: ...
def has_aflag_ti(flags) -> bool: ...
def has_aflag_ti0(flags) -> bool: ...
def has_aflag_ti1(flags) -> bool: ...
def has_lname(ea) -> bool: ...
def has_ti(ea) -> bool: ...
def has_ti0(ea) -> bool: ...
def has_ti1(ea) -> bool: ...
def hide_border(ea) -> Any: ...
def hide_item(ea) -> Any: ...
def is__bnot0(ea) -> bool: ...
def is__bnot1(ea) -> bool: ...
def is__invsign0(ea) -> bool: ...
def is__invsign1(ea) -> bool: ...
def is_aflag__bnot0(flags) -> bool: ...
def is_aflag__bnot1(flags) -> bool: ...
def is_aflag__invsign0(flags) -> bool: ...
def is_aflag__invsign1(flags) -> bool: ...
def is_aflag_align_flow(flags) -> bool: ...
def is_aflag_colored_item(flags) -> bool: ...
def is_aflag_data_guessed_by_hexrays(flags) -> bool: ...
def is_aflag_fixed_spd(flags) -> bool: ...
def is_aflag_func_guessed_by_hexrays(flags) -> bool: ...
def is_aflag_hidden_border(flags) -> bool: ...
def is_aflag_hidden_item(flags) -> bool: ...
def is_aflag_libitem(flags) -> bool: ...
def is_aflag_lzero0(flags) -> bool: ...
def is_aflag_lzero1(flags) -> bool: ...
def is_aflag_manual_insn(flags) -> bool: ...
def is_aflag_noret(flags) -> bool: ...
def is_aflag_notcode(flags) -> bool: ...
def is_aflag_notproc(flags) -> bool: ...
def is_aflag_public_name(flags) -> bool: ...
def is_aflag_retfp(flags) -> bool: ...
def is_aflag_terse_struc(flags) -> bool: ...
def is_aflag_tilcmt(flags) -> bool: ...
def is_aflag_type_determined_by_hexrays(flags) -> bool: ...
def is_aflag_type_guessed_by_hexrays(flags) -> bool: ...
def is_aflag_type_guessed_by_ida(flags) -> bool: ...
def is_aflag_usersp(flags) -> bool: ...
def is_aflag_userti(flags) -> bool: ...
def is_aflag_weak_name(flags) -> bool: ...
def is_aflag_zstroff(flags) -> bool: ...
def is_align_flow(ea) -> bool: ...
def is_colored_item(ea) -> bool: ...
def is_data_guessed_by_hexrays(ea) -> bool: ...
def is_finally_visible_item(ea) -> bool: ...
def is_fixed_spd(ea) -> bool: ...
def is_func_guessed_by_hexrays(ea) -> bool: ...
def is_hidden_border(ea) -> bool: ...
def is_hidden_item(ea) -> bool: ...
def is_libitem(ea) -> bool: ...
def is_lzero0(ea) -> bool: ...
def is_lzero1(ea) -> bool: ...
def is_noret(ea) -> bool: ...
def is_notcode(ea) -> bool: ...
def is_notproc(ea) -> bool: ...
def is_pascal(strtype) -> bool: ...
def is_reftype_target_optional(type) -> bool: ...
def is_retfp(ea) -> bool: ...
def is_terse_struc(ea) -> bool: ...
def is_tilcmt(ea) -> bool: ...
def is_type_determined_by_hexrays(ea) -> bool: ...
def is_type_guessed_by_hexrays(ea) -> bool: ...
def is_type_guessed_by_ida(ea) -> bool: ...
def is_usersp(ea) -> bool: ...
def is_userti(ea) -> bool: ...
def is_visible_item(ea) -> bool: ...
def is_zstroff(ea) -> bool: ...
def make_str_type(type_code, encoding_idx, term1=..., term2=...) -> int32: ...
def new_array_parameters_t(_f=..., _l=..., _a=...) -> array_parameters_t: ...
def new_custom_data_type_ids_fids_array(data) -> custom_data_type_ids_fids_array: ...
def new_custom_data_type_ids_t() -> custom_data_type_ids_t: ...
def new_enum_const_t() -> enum_const_t: ...
def new_opinfo_t() -> opinfo_t: ...
def new_printop_t() -> printop_t: ...
def new_refinfo_t() -> refinfo_t: ...
def new_strpath_ids_array(data) -> strpath_ids_array: ...
def new_strpath_t() -> strpath_t: ...
def new_switch_info_t() -> switch_info_t: ...
def node2ea(ndx) -> ea_t: ...
def opinfo_t_cd_get(self) -> custom_data_type_ids_t: ...
def opinfo_t_cd_set(self, cd) -> Any: ...
def opinfo_t_ec_get(self) -> enum_const_t: ...
def opinfo_t_ec_set(self, ec) -> Any: ...
def opinfo_t_path_get(self) -> strpath_t: ...
def opinfo_t_path_set(self, path) -> Any: ...
def opinfo_t_ri_get(self) -> refinfo_t: ...
def opinfo_t_ri_set(self, ri) -> Any: ...
def opinfo_t_strtype_get(self) -> int32: ...
def opinfo_t_strtype_set(self, strtype) -> Any: ...
def opinfo_t_swiginit(*args, **kwargs): ...
def opinfo_t_swigregister(*args, **kwargs): ...
def opinfo_t_tid_get(self) -> tid_t: ...
def opinfo_t_tid_set(self, tid) -> Any: ...
def printop_t_aflags_get(self) -> aflags_t: ...
def printop_t_aflags_set(self, aflags) -> Any: ...
def printop_t_features_get(self) -> uchar: ...
def printop_t_features_set(self, features) -> Any: ...
def printop_t_flags_get(self) -> flags64_t: ...
def printop_t_flags_set(self, flags) -> Any: ...
def printop_t_get_ti(self) -> opinfo_t: ...
def printop_t_is_aflags_initialized(self) -> bool: ...
def printop_t_is_f64(self) -> bool: ...
def printop_t_is_ti_initialized(self) -> bool: ...
def printop_t_set_aflags_initialized(self, v=...) -> Any: ...
def printop_t_set_ti_initialized(self, v=...) -> Any: ...
def printop_t_suspop_get(self) -> int: ...
def printop_t_suspop_set(self, suspop) -> Any: ...
def printop_t_swiginit(*args, **kwargs): ...
def printop_t_swigregister(*args, **kwargs): ...
def printop_t_ti_get(self) -> opinfo_t: ...
def printop_t_ti_set(self, ti) -> Any: ...
def refinfo_t_base_get(self) -> ea_t: ...
def refinfo_t_base_set(self, base) -> Any: ...
def refinfo_t_flags_get(self) -> uint32: ...
def refinfo_t_flags_set(self, flags) -> Any: ...
def refinfo_t_init(self, reft_and_flags, _base=..., _target=..., _tdelta=...) -> Any: ...
def refinfo_t_is_custom(self) -> bool: ...
def refinfo_t_is_no_ones(self) -> bool: ...
def refinfo_t_is_no_zeros(self) -> bool: ...
def refinfo_t_is_pastend(self) -> bool: ...
def refinfo_t_is_rvaoff(self) -> bool: ...
def refinfo_t_is_selfref(self) -> bool: ...
def refinfo_t_is_signed(self) -> bool: ...
def refinfo_t_is_subtract(self) -> bool: ...
def refinfo_t_is_target_optional(self) -> bool: ...
def refinfo_t_no_base_xref(self) -> bool: ...
def refinfo_t_set_type(self, rt) -> Any: ...
def refinfo_t_swiginit(*args, **kwargs): ...
def refinfo_t_swigregister(*args, **kwargs): ...
def refinfo_t_target_get(self) -> ea_t: ...
def refinfo_t_target_set(self, target) -> Any: ...
def refinfo_t_tdelta_get(self) -> adiff_t: ...
def refinfo_t_tdelta_set(self, tdelta) -> Any: ...
def refinfo_t_type(self) -> reftype_t: ...
def rename_encoding(idx, encname) -> bool: ...
def retrieve_input_file_crc32() -> uint32: ...
def retrieve_input_file_md5() -> bool: ...
def retrieve_input_file_sha256() -> bool: ...
def retrieve_input_file_size() -> size_t: ...
def set__bnot0(ea) -> Any: ...
def set__bnot1(ea) -> Any: ...
def set__invsign0(ea) -> Any: ...
def set__invsign1(ea) -> Any: ...
def set_abits(ea, bits) -> Any: ...
def set_absbase(ea, x) -> Any: ...
def set_aflags(ea, flags) -> Any: ...
def set_align_flow(ea) -> Any: ...
def set_alignment(ea, x) -> Any: ...
def set_archive_path(file) -> bool: ...
def set_array_parameters(ea, _in) -> Any: ...
def set_asm_inc_file(file) -> bool: ...
def set_colored_item(ea) -> Any: ...
def set_custom_data_type_ids(ea, cdis) -> Any: ...
def set_data_guessed_by_hexrays(ea) -> Any: ...
def set_default_encoding_idx(bpu, idx) -> bool: ...
def set_fixed_spd(ea) -> Any: ...
def set_func_guessed_by_hexrays(ea) -> Any: ...
def set_gotea(gotea) -> Any: ...
def set_has_lname(ea) -> Any: ...
def set_has_ti(ea) -> Any: ...
def set_has_ti0(ea) -> Any: ...
def set_has_ti1(ea) -> Any: ...
def set_ida_notepad_text(text, size=...) -> Any: ...
def set_ids_modnode(id) -> Any: ...
def set_imagebase(base) -> Any: ...
def set_item_color(ea, color) -> Any: ...
def set_libitem(ea) -> Any: ...
def set_loader_format_name(name) -> Any: ...
def set_lzero0(ea) -> Any: ...
def set_lzero1(ea) -> Any: ...
def set_noret(ea) -> Any: ...
def set_notcode(ea) -> Any: ...
def set_notproc(ea) -> Any: ...
def set_op_tinfo(ea, n, tif) -> bool: ...
def set_outfile_encoding_idx(idx) -> bool: ...
def set_refinfo(ea, n, type, target=..., base=..., tdelta=...) -> bool: ...
def set_refinfo_ex(ea, n, ri) -> bool: ...
def set_retfp(ea) -> Any: ...
def set_root_filename(file) -> Any: ...
def set_source_linnum(ea, lnnum) -> Any: ...
def set_srcdbg_paths(paths) -> Any: ...
def set_srcdbg_undesired_paths(paths) -> Any: ...
def set_str_encoding_idx(strtype, encoding_idx) -> int32: ...
def set_str_type(ea, x) -> Any: ...
def set_switch_info(ea, _in) -> Any: ...
def set_switch_parent(ea, x) -> Any: ...
def set_terse_struc(ea) -> Any: ...
def set_tilcmt(ea) -> Any: ...
def set_tinfo(ea, tif) -> bool: ...
def set_type_determined_by_hexrays(ea) -> Any: ...
def set_type_guessed_by_ida(ea) -> Any: ...
def set_usemodsp(ea) -> Any: ...
def set_usersp(ea) -> Any: ...
def set_userti(ea) -> Any: ...
def set_visible_item(ea, visible) -> Any: ...
def set_zstroff(ea) -> Any: ...
def strpath_ids_array___getitem__(*args, **kwargs): ...
def strpath_ids_array___len__(self) -> size_t: ...
def strpath_ids_array___setitem__(self, i, v) -> Any: ...
def strpath_ids_array__get_bytes(self) -> bytevec_t: ...
def strpath_ids_array__set_bytes(self, bts) -> Any: ...
def strpath_ids_array_data_get(*args, **kwargs): ...
def strpath_ids_array_swiginit(*args, **kwargs): ...
def strpath_ids_array_swigregister(*args, **kwargs): ...
def strpath_t___getIds(self) -> strpath_ids_array: ...
def strpath_t_delta_get(self) -> adiff_t: ...
def strpath_t_delta_set(self, delta) -> Any: ...
def strpath_t_ids_get(self) -> tid_t[32]: ...
def strpath_t_ids_set(self, ids) -> Any: ...
def strpath_t_len_get(self) -> int: ...
def strpath_t_len_set(self, len) -> Any: ...
def strpath_t_swiginit(*args, **kwargs): ...
def strpath_t_swigregister(*args, **kwargs): ...
def switch_info_t__from_ptrval__(ptrval) -> switch_info_t: ...
def switch_info_t__get_values_lowcase(self) -> ea_t: ...
def switch_info_t__set_values_lowcase(self, values) -> Any: ...
def switch_info_t_assign(self, other) -> Any: ...
def switch_info_t_clear(self) -> Any: ...
def switch_info_t_custom_get(self) -> uval_t: ...
def switch_info_t_custom_set(self, custom) -> Any: ...
def switch_info_t_defjump_get(self) -> ea_t: ...
def switch_info_t_defjump_set(self, defjump) -> Any: ...
def switch_info_t_elbase_get(self) -> ea_t: ...
def switch_info_t_elbase_set(self, elbase) -> Any: ...
def switch_info_t_expr_ea_get(self) -> ea_t: ...
def switch_info_t_expr_ea_set(self, expr_ea) -> Any: ...
def switch_info_t_flags_get(self) -> uint32: ...
def switch_info_t_flags_set(self, flags) -> Any: ...
def switch_info_t_get_jrange_vrange(self, jrange=..., vrange=...) -> bool: ...
def switch_info_t_get_jtable_element_size(self) -> int: ...
def switch_info_t_get_jtable_size(self) -> int: ...
def switch_info_t_get_lowcase(self) -> sval_t: ...
def switch_info_t_get_shift(self) -> int: ...
def switch_info_t_get_version(self) -> int: ...
def switch_info_t_get_vtable_element_size(self) -> int: ...
def switch_info_t_has_default(self) -> bool: ...
def switch_info_t_has_elbase(self) -> bool: ...
def switch_info_t_ind_lowcase_get(self) -> sval_t: ...
def switch_info_t_ind_lowcase_set(self, ind_lowcase) -> Any: ...
def switch_info_t_is_custom(self) -> bool: ...
def switch_info_t_is_indirect(self) -> bool: ...
def switch_info_t_is_nolowcase(self) -> bool: ...
def switch_info_t_is_sparse(self) -> bool: ...
def switch_info_t_is_subtract(self) -> bool: ...
def switch_info_t_is_user_defined(self) -> bool: ...
def switch_info_t_jcases_get(self) -> int: ...
def switch_info_t_jcases_set(self, jcases) -> Any: ...
def switch_info_t_jumps_get(self) -> ea_t: ...
def switch_info_t_jumps_set(self, jumps) -> Any: ...
def switch_info_t_lowcase_get(self) -> uval_t: ...
def switch_info_t_lowcase_set(self, lowcase) -> Any: ...
def switch_info_t_marks_get(*args, **kwargs): ...
def switch_info_t_marks_set(self, marks) -> Any: ...
def switch_info_t_ncases_get(self) -> ushort: ...
def switch_info_t_ncases_set(self, ncases) -> Any: ...
def switch_info_t_regdtype_get(self) -> op_dtype_t: ...
def switch_info_t_regdtype_set(self, regdtype) -> Any: ...
def switch_info_t_regnum_get(self) -> int: ...
def switch_info_t_regnum_set(self, regnum) -> Any: ...
def switch_info_t_set_elbase(self, base) -> Any: ...
def switch_info_t_set_expr(self, r, dt) -> Any: ...
def switch_info_t_set_jtable_element_size(self, size) -> Any: ...
def switch_info_t_set_jtable_size(self, size) -> Any: ...
def switch_info_t_set_shift(self, shift) -> Any: ...
def switch_info_t_set_vtable_element_size(self, size) -> Any: ...
def switch_info_t_startea_get(self) -> ea_t: ...
def switch_info_t_startea_set(self, startea) -> Any: ...
def switch_info_t_swiginit(*args, **kwargs): ...
def switch_info_t_swigregister(*args, **kwargs): ...
def switch_info_t_use_std_table(self) -> bool: ...
def switch_info_t_values_get(self) -> ea_t: ...
def switch_info_t_values_set(self, values) -> Any: ...
def unhide_border(ea) -> Any: ...
def unhide_item(ea) -> Any: ...
def upd_abits(ea, clr_bits, set_bits) -> Any: ...
def uses_aflag_modsp(flags) -> bool: ...
def uses_modsp(ea) -> bool: ...
def validate_idb_names(do_repair) -> int: ...
