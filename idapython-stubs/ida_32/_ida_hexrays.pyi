# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any, overload

ACFL_BLKOPT: int
ACFL_GLBDEL: int
ACFL_GLBPROP: int
ACFL_GUESS: int
ACFL_LOCOPT: int
ALLOW_UNUSED_LABELS: int
ANCHOR_BLKCMT: int
ANCHOR_CITEM: int
ANCHOR_INDEX: int
ANCHOR_ITP: int
ANCHOR_LVAR: int
ANCHOR_MASK: int
ANY_FPSIZE: int
ANY_REGSIZE: int
BLT_0WAY: int
BLT_1WAY: int
BLT_2WAY: int
BLT_NONE: int
BLT_NWAY: int
BLT_STOP: int
BLT_XTRN: int
CALC_CURLY_BRACES: int
CFL_FINAL: int
CFL_HELPER: int
CFL_NORET: int
CFS_BOUNDS: int
CFS_LOCKED: int
CFS_LVARS_HIDDEN: int
CFS_TEXT: int
CHF_FAKE: int
CHF_INITED: int
CHF_OVER: int
CHF_PASSTHRU: int
CHF_REPLACED: int
CHF_TERM: int
CIT_COLLAPSED: int
CMAT_BUILT: int
CMAT_CASTED: int
CMAT_CPA: int
CMAT_FINAL: int
CMAT_NICE: int
CMAT_TRANS1: int
CMAT_TRANS2: int
CMAT_TRANS3: int
CMAT_ZERO: int
CMP_A: int
CMP_AE: int
CMP_B: int
CMP_BE: int
CMP_GE: int
CMP_GT: int
CMP_LE: int
CMP_LT: int
CMP_NZ: int
CMP_Z: int
CPBLK_FAST: int
CPBLK_MINREF: int
CPBLK_OPTJMP: int
CV_FAST: int
CV_INSNS: int
CV_PARENTS: int
CV_POST: int
CV_PRUNE: int
CV_RESTART: int
DECOMP_ALL_BLKS: int
DECOMP_GXREFS_DEFLT: int
DECOMP_GXREFS_FORCE: int
DECOMP_GXREFS_NOUPD: int
DECOMP_NO_CACHE: int
DECOMP_NO_FRAME: int
DECOMP_NO_HIDE: int
DECOMP_NO_WAIT: int
DECOMP_NO_XREFS: int
DECOMP_VOID_MBA: int
DECOMP_WARNINGS: int
EQ_CMPDEST: int
EQ_IGNCODE: int
EQ_IGNSIZE: int
EQ_OPTINSN: int
EXFL_ALL: int
EXFL_ALONE: int
EXFL_CPADONE: int
EXFL_CSTR: int
EXFL_FPOP: int
EXFL_JUMPOUT: int
EXFL_LVALUE: int
EXFL_PARTIAL: int
EXFL_UNDEF: int
EXFL_VFTABLE: int
FCI_DEAD: int
FCI_EXPLOCS: int
FCI_FINAL: int
FCI_HASCALL: int
FCI_HASFMT: int
FCI_NORET: int
FCI_NOSIDE: int
FCI_PROP: int
FCI_PURE: int
FCI_SPLOK: int
FD_BACKWARD: int
FD_DEF: int
FD_DIRTY: int
FD_FORWARD: int
FD_USE: int
FORBID_UNUSED_LABELS: int
FUNC_NAME_CONTAINING_RECORD: str
FUNC_NAME_EMPTY: str
FUNC_NAME_MEMCPY: str
FUNC_NAME_MEMSET: str
FUNC_NAME_MEMSET32: str
FUNC_NAME_MEMSET64: str
FUNC_NAME_MORESTACK: str
FUNC_NAME_PRESENT: str
FUNC_NAME_STRCAT: str
FUNC_NAME_STRCPY: str
FUNC_NAME_STRLEN: str
FUNC_NAME_TAIL: str
FUNC_NAME_VA_ARG: str
FUNC_NAME_WCSCAT: str
FUNC_NAME_WCSCPY: str
FUNC_NAME_WCSLEN: str
FUNC_NAME_WMEMCPY: str
FUNC_NAME_WMEMSET: str
GCA_ALLOC: int
GCA_EMPTY: int
GCA_NALLOC: int
GCA_OFIRST: int
GCA_OLAST: int
GCA_SPEC: int
GCO_DEF: int
GCO_REG: int
GCO_STK: int
GCO_USE: int
GC_ASR: int
GC_DIRTY_ALL: int
GC_END: int
GC_REGS_AND_STKVARS: int
GC_XDSU: int
GLN_ALL: int
GLN_CURRENT: int
GLN_GOTO_TARGET: int
GUESSED_DATA: int
GUESSED_FUNC: int
GUESSED_NONE: int
GUESSED_WEAK: int
IPROP_ASSERT: int
IPROP_CLNPOP: int
IPROP_COMBINED: int
IPROP_DONT_COMB: int
IPROP_DONT_PROP: int
IPROP_EXTSTX: int
IPROP_FARCALL: int
IPROP_FPINSN: int
IPROP_IGNLOWSRC: int
IPROP_INV_JX: int
IPROP_MBARRIER: int
IPROP_MULTI_MOV: int
IPROP_OPTIONAL: int
IPROP_PERSIST: int
IPROP_SPLIT: int
IPROP_SPLIT1: int
IPROP_SPLIT2: int
IPROP_SPLIT4: int
IPROP_SPLIT8: int
IPROP_TAILCALL: int
IPROP_UNMERGED: int
IPROP_WAS_NORET: int
IPROP_WILDMATCH: int
ITP_ARG1: int
ITP_ARG64: int
ITP_ASM: int
ITP_BLOCK1: int
ITP_BLOCK2: int
ITP_BRACE1: int
ITP_BRACE2: int
ITP_CASE: int
ITP_COLON: int
ITP_CURLY1: int
ITP_CURLY2: int
ITP_DO: int
ITP_ELSE: int
ITP_EMPTY: int
ITP_INNER_LAST: int
ITP_SEMI: int
ITP_SIGN: int
LOCOPT_ALL: int
LOCOPT_REFINE: int
LOCOPT_REFINE2: int
LVINF_KEEP: int
LVINF_NOMAP: int
LVINF_NOPTR: int
LVINF_SPLIT: int
LVINF_UNUSED: int
MAX_SUPPORTED_STACK_SIZE: int
MAX_VLR_SIZE: int
MBA2_ALL_FLAGS: int
MBA2_ARGIDX_OK: int
MBA2_ARGIDX_SORTED: int
MBA2_CODE16_BIT: int
MBA2_DONT_VERIFY: int
MBA2_HAS_OUTLINES: int
MBA2_INITIAL_FLAGS: int
MBA2_IS_CTR: int
MBA2_IS_DTR: int
MBA2_LVARNAMES_OK: int
MBA2_LVARS_RENAMED: int
MBA2_NO_DUP_CALLS: int
MBA2_NO_DUP_LVARS: int
MBA2_NO_FRAME: int
MBA2_OVER_CHAINS: int
MBA2_PROP_COMPLEX: int
MBA2_STACK_RETVAL: int
MBA2_UNDEF_RETVAR: int
MBA2_VALRNG_DONE: int
MBA_ASRPROP: int
MBA_ASRTOK: int
MBA_CALLS: int
MBA_CHVARS: int
MBA_CMBBLK: int
MBA_CMNSTK: int
MBA_COLGDL: int
MBA_DELPAIRS: int
MBA_GLBOPT: int
MBA_INITIAL_FLAGS: int
MBA_INSGDL: int
MBA_LOADED: int
MBA_LVARS0: int
MBA_LVARS1: int
MBA_NICE: int
MBA_NOFUNC: int
MBA_NUMADDR: int
MBA_PASSREGS: int
MBA_PATTERN: int
MBA_PRCDEFS: int
MBA_PREOPT: int
MBA_REFINE: int
MBA_RETFP: int
MBA_RETREF: int
MBA_SAVRST: int
MBA_SHORT: int
MBA_SPLINFO: int
MBA_THUNK: int
MBA_VALNUM: int
MBA_WINGR32: int
MBL_BACKPROP: int
MBL_CALL: int
MBL_COMB: int
MBL_DEAD: int
MBL_DMT64: int
MBL_DSLOT: int
MBL_FAKE: int
MBL_GOTO: int
MBL_INCONST: int
MBL_KEEP: int
MBL_LIST: int
MBL_NONFAKE: int
MBL_NORET: int
MBL_PRIV: int
MBL_PROP: int
MBL_PUSH: int
MBL_TCAL: int
MBL_VALRANGES: int
MERR_BADARCH: int
MERR_BADBLK: int
MERR_BADCALL: int
MERR_BADFRAME: int
MERR_BADIDB: int
MERR_BADRANGES: int
MERR_BADSP: int
MERR_BITNESS: int
MERR_BLOCK: int
MERR_BUSY: int
MERR_CANCELED: int
MERR_CLOUD: int
MERR_COMPLEX: int
MERR_DSLOT: int
MERR_EXCEPTION: int
MERR_EXTERN: int
MERR_FARPTR: int
MERR_FUNCSIZE: int
MERR_HUGESTACK: int
MERR_INSN: int
MERR_INTERR: int
MERR_LICENSE: int
MERR_LOOP: int
MERR_LVARS: int
MERR_MAX_ERR: int
MERR_MEM: int
MERR_OK: int
MERR_ONLY32: int
MERR_ONLY64: int
MERR_OVERLAP: int
MERR_PARTINIT: int
MERR_PROLOG: int
MERR_RECDEPTH: int
MERR_REDO: int
MERR_SIZEOF: int
MERR_STOP: int
MERR_SWITCH: int
MERR_UNKTYPE: int
MLI_CLR_FLAGS: int
MLI_CMT: int
MLI_NAME: int
MLI_SET_FLAGS: int
MLI_TYPE: int
MMAT_CALLS: int
MMAT_GENERATED: int
MMAT_GLBOPT1: int
MMAT_GLBOPT2: int
MMAT_GLBOPT3: int
MMAT_LOCOPT: int
MMAT_LVARS: int
MMAT_PREOPTIMIZED: int
MMAT_ZERO: int
MMIDX_ARGS: int
MMIDX_GLBHIGH: int
MMIDX_GLBLOW: int
MMIDX_LVARS: int
MMIDX_RETADDR: int
MMIDX_SHADOW: int
NALT_VD: int
NF_BINVDONE: int
NF_BITNOT: int
NF_FIXED: int
NF_NEGATE: int
NF_NEGDONE: int
NF_VALID: int
NORET_FORBID_ANALYSIS: int
NORET_IGNORE_WAS_NORET_ICALL: int
NO_CURLY_BRACES: int
NO_SIDEFF: int
ONLY_SIDEFF: int
OPF_NEW_WINDOW: int
OPF_NO_WAIT: int
OPF_REUSE: int
OPF_REUSE_ACTIVE: int
OPF_WINDOW_MGMT_MASK: int
OPROP_CCFLAGS: int
OPROP_FLOAT: int
OPROP_IMPDONE: int
OPROP_LOWADDR: int
OPROP_UDEFVAL: int
OPROP_UDT: int
OPTI_ADDREXPRS: int
OPTI_COMBINSNS: int
OPTI_MINSTKREF: int
OPTI_NO_LDXOPT: int
RETRIEVE_ALWAYS: int
RETRIEVE_ONCE: int
ROLE_3WAYCMP0: int
ROLE_3WAYCMP1: int
ROLE_ABS: int
ROLE_ALLOCA: int
ROLE_BITTEST: int
ROLE_BITTESTANDCOMPLEMENT: int
ROLE_BITTESTANDRESET: int
ROLE_BITTESTANDSET: int
ROLE_BSWAP: int
ROLE_BUG: int
ROLE_CFSUB3: int
ROLE_CONTAINING_RECORD: int
ROLE_EMPTY: int
ROLE_FASTFAIL: int
ROLE_IS_MUL_OK: int
ROLE_MEMCPY: int
ROLE_MEMSET: int
ROLE_MEMSET32: int
ROLE_MEMSET64: int
ROLE_OFSUB3: int
ROLE_PRESENT: int
ROLE_READFLAGS: int
ROLE_ROL: int
ROLE_ROR: int
ROLE_SATURATED_MUL: int
ROLE_SSE_CMP4: int
ROLE_SSE_CMP8: int
ROLE_STRCAT: int
ROLE_STRCPY: int
ROLE_STRLEN: int
ROLE_TAIL: int
ROLE_UNK: int
ROLE_VA_ARG: int
ROLE_VA_COPY: int
ROLE_VA_END: int
ROLE_VA_START: int
ROLE_WCSCAT: int
ROLE_WCSCPY: int
ROLE_WCSLEN: int
ROLE_WMEMCPY: int
ROLE_WMEMSET: int
SHINS_LDXEA: int
SHINS_NUMADDR: int
SHINS_SHORT: int
SHINS_VALNUM: int
SIZEOF_BLOCK_CHAINS: int
SVW_FLOAT: int
SVW_INT: int
SVW_SOFT: int
SWIG_PYTHON_LEGACY_BOOL: int
TS_DONTREF: int
TS_MASK: int
TS_NOELL: int
TS_SHRINK: int
ULV_PRECISE_DEFEA: int
USE_CURLY_BRACES: int
USE_KEYBOARD: int
USE_MOUSE: int
VDI_EXPR: int
VDI_FUNC: int
VDI_LVAR: int
VDI_NONE: int
VDI_TAIL: int
VDRUN_APPEND: int
VDRUN_CMDLINE: int
VDRUN_LUMINA: int
VDRUN_MAYSTOP: int
VDRUN_NEWFILE: int
VDRUN_ONLYNEW: int
VDRUN_SENDIDB: int
VDRUN_SILENT: int
VDRUN_STATS: int
VDUI_VALID: int
VDUI_VISIBLE: int
VR_AT_END: int
VR_AT_START: int
VR_EXACT: int
WARN_ADDR_OUTARGS: int
WARN_ARRAY_INARG: int
WARN_BAD_CALL_SP: int
WARN_BAD_FIELD_TYPE: int
WARN_BAD_INSN: int
WARN_BAD_MAPDST: int
WARN_BAD_PURGED: int
WARN_BAD_RETVAR: int
WARN_BAD_SHADOW: int
WARN_BAD_SP: int
WARN_BAD_STD_TYPE: int
WARN_BAD_STKPNT: int
WARN_BAD_STROFF: int
WARN_BAD_VALRNG: int
WARN_BAD_VARSIZE: int
WARN_CBUILD_LOOPS: int
WARN_CR_BADOFF: int
WARN_CR_NOFIELD: int
WARN_DEP_UNK_CALLS: int
WARN_EXP_LINVAR: int
WARN_FIXED_MACRO: int
WARN_FRAG_LVAR: int
WARN_GUESSED_TYPE: int
WARN_HUGE_STKOFF: int
WARN_ILL_ELLIPSIS: int
WARN_ILL_FPU_STACK: int
WARN_ILL_FUNCTYPE: int
WARN_ILL_PURGED: int
WARN_JUMPOUT: int
WARN_MAX: int
WARN_MAX_ARGS: int
WARN_MISSED_SWITCH: int
WARN_MUST_RET_FP: int
WARN_NO_SAVE_REST: int
WARN_ODD_ABI: int
WARN_ODD_ADDR_USE: int
WARN_ODD_INPUT_REG: int
WARN_OPT_USELESS_JCND: int
WARN_OPT_VALRNG: int
WARN_OPT_VALRNG2: int
WARN_OPT_VALRNG3: int
WARN_RET_LOCREF: int
WARN_SELFREF_PROP: int
WARN_UNALIGNED_ARG: int
WARN_UNBALANCED_STACK: int
WARN_UNDEF_LVAR: int
WARN_UNINITED_REG: int
WARN_UNSUPP_REG: int
WARN_VARARG_MANY: int
WARN_VARARG_NOSTK: int
WARN_VARARG_REGS: int
WARN_VARARG_TCAL: int
WARN_WIDEN_CHAINS: int
WARN_WOULD_OVERLAP: int
WARN_WRITE_CONST: int
WARN_WRONG_VA_OFF: int
WITH_SIDEFF: int
cit_asm: int
cit_block: int
cit_break: int
cit_continue: int
cit_do: int
cit_empty: int
cit_end: int
cit_expr: int
cit_for: int
cit_goto: int
cit_if: int
cit_return: int
cit_switch: int
cit_while: int
cot_add: int
cot_asg: int
cot_asgadd: int
cot_asgband: int
cot_asgbor: int
cot_asgmul: int
cot_asgsdiv: int
cot_asgshl: int
cot_asgsmod: int
cot_asgsshr: int
cot_asgsub: int
cot_asgudiv: int
cot_asgumod: int
cot_asgushr: int
cot_asgxor: int
cot_band: int
cot_bnot: int
cot_bor: int
cot_call: int
cot_cast: int
cot_comma: int
cot_empty: int
cot_eq: int
cot_fadd: int
cot_fdiv: int
cot_fmul: int
cot_fneg: int
cot_fnum: int
cot_fsub: int
cot_helper: int
cot_idx: int
cot_insn: int
cot_land: int
cot_last: int
cot_lnot: int
cot_lor: int
cot_memptr: int
cot_memref: int
cot_mul: int
cot_ne: int
cot_neg: int
cot_num: int
cot_obj: int
cot_postdec: int
cot_postinc: int
cot_predec: int
cot_preinc: int
cot_ptr: int
cot_ref: int
cot_sdiv: int
cot_sge: int
cot_sgt: int
cot_shl: int
cot_sizeof: int
cot_sle: int
cot_slt: int
cot_smod: int
cot_sshr: int
cot_str: int
cot_sub: int
cot_tern: int
cot_type: int
cot_udiv: int
cot_uge: int
cot_ugt: int
cot_ule: int
cot_ult: int
cot_umod: int
cot_ushr: int
cot_var: int
cot_xor: int
cvar: Any
hx_arglocs_overlap: int
hx_asgop: int
hx_asgop_revert: int
hx_bitset_t_add: int
hx_bitset_t_add_: int
hx_bitset_t_add__: int
hx_bitset_t_bitset_t: int
hx_bitset_t_compare: int
hx_bitset_t_copy: int
hx_bitset_t_count: int
hx_bitset_t_count_: int
hx_bitset_t_cut_at: int
hx_bitset_t_dstr: int
hx_bitset_t_empty: int
hx_bitset_t_fill_gaps: int
hx_bitset_t_fill_with_ones: int
hx_bitset_t_goup: int
hx_bitset_t_has: int
hx_bitset_t_has_all: int
hx_bitset_t_has_any: int
hx_bitset_t_has_common: int
hx_bitset_t_intersect: int
hx_bitset_t_is_subset_of: int
hx_bitset_t_last: int
hx_bitset_t_shift_down: int
hx_bitset_t_sub: int
hx_bitset_t_sub_: int
hx_bitset_t_sub__: int
hx_block_chains_begin: int
hx_block_chains_clear: int
hx_block_chains_end: int
hx_block_chains_erase: int
hx_block_chains_find: int
hx_block_chains_free: int
hx_block_chains_get: int
hx_block_chains_insert: int
hx_block_chains_new: int
hx_block_chains_next: int
hx_block_chains_prev: int
hx_block_chains_size: int
hx_block_chains_t_dstr: int
hx_block_chains_t_get_chain: int
hx_block_chains_t_print: int
hx_boundaries_begin: int
hx_boundaries_clear: int
hx_boundaries_end: int
hx_boundaries_erase: int
hx_boundaries_find: int
hx_boundaries_first: int
hx_boundaries_free: int
hx_boundaries_insert: int
hx_boundaries_new: int
hx_boundaries_next: int
hx_boundaries_prev: int
hx_boundaries_second: int
hx_boundaries_size: int
hx_carglist_t_compare: int
hx_casm_t_compare: int
hx_cblock_t_compare: int
hx_ccase_t_compare: int
hx_ccases_t_compare: int
hx_cdg_insn_iterator_t_next: int
hx_cdo_t_compare: int
hx_cexpr_t_assign: int
hx_cexpr_t_calc_type: int
hx_cexpr_t_cleanup: int
hx_cexpr_t_compare: int
hx_cexpr_t_contains_operator: int
hx_cexpr_t_dstr: int
hx_cexpr_t_equal_effect: int
hx_cexpr_t_get_high_nbit_bound: int
hx_cexpr_t_get_low_nbit_bound: int
hx_cexpr_t_has_side_effects: int
hx_cexpr_t_is_child_of: int
hx_cexpr_t_maybe_ptr: int
hx_cexpr_t_print1: int
hx_cexpr_t_put_number: int
hx_cexpr_t_replace_by: int
hx_cexpr_t_requires_lvalue: int
hx_cfor_t_compare: int
hx_cfunc_parentee_t_calc_rvalue_type: int
hx_cfunc_t_build_c_tree: int
hx_cfunc_t_cleanup: int
hx_cfunc_t_del_orphan_cmts: int
hx_cfunc_t_find_item_coords: int
hx_cfunc_t_find_label: int
hx_cfunc_t_gather_derefs: int
hx_cfunc_t_get_boundaries: int
hx_cfunc_t_get_eamap: int
hx_cfunc_t_get_func_type: int
hx_cfunc_t_get_line_item: int
hx_cfunc_t_get_lvars: int
hx_cfunc_t_get_pseudocode: int
hx_cfunc_t_get_stkoff_delta: int
hx_cfunc_t_get_user_cmt: int
hx_cfunc_t_get_user_iflags: int
hx_cfunc_t_get_user_union_selection: int
hx_cfunc_t_get_warnings: int
hx_cfunc_t_has_orphan_cmts: int
hx_cfunc_t_print_dcl: int
hx_cfunc_t_print_func: int
hx_cfunc_t_refresh_func_ctext: int
hx_cfunc_t_remove_unused_labels: int
hx_cfunc_t_save_user_cmts: int
hx_cfunc_t_save_user_iflags: int
hx_cfunc_t_save_user_labels: int
hx_cfunc_t_save_user_numforms: int
hx_cfunc_t_save_user_unions: int
hx_cfunc_t_set_user_cmt: int
hx_cfunc_t_set_user_iflags: int
hx_cfunc_t_set_user_union_selection: int
hx_cfunc_t_verify: int
hx_cgoto_t_compare: int
hx_chain_t_append_list: int
hx_chain_t_append_list_: int
hx_chain_t_dstr: int
hx_chain_t_print: int
hx_change_hexrays_config: int
hx_checkout_hexrays_license: int
hx_cif_t_assign: int
hx_cif_t_compare: int
hx_cinsn_t_assign: int
hx_cinsn_t_cleanup: int
hx_cinsn_t_collect_free_breaks: int
hx_cinsn_t_collect_free_continues: int
hx_cinsn_t_compare: int
hx_cinsn_t_contains_insn: int
hx_cinsn_t_create_if: int
hx_cinsn_t_dstr: int
hx_cinsn_t_is_ordinary_flow: int
hx_cinsn_t_new_insn: int
hx_cinsn_t_print: int
hx_cinsn_t_print1: int
hx_cinsn_t_replace_by: int
hx_citem_locator_t_compare: int
hx_citem_t_contains_expr: int
hx_citem_t_contains_label: int
hx_citem_t_find_closest_addr: int
hx_citem_t_find_parent_of: int
hx_clear_cached_cfuncs: int
hx_cloop_t_assign: int
hx_close_hexrays_waitbox: int
hx_close_pseudocode: int
hx_cnumber_t_assign: int
hx_cnumber_t_compare: int
hx_cnumber_t_print: int
hx_cnumber_t_value: int
hx_codegen_t_emit: int
hx_codegen_t_emit_: int
hx_convert_to_user_call: int
hx_create_cfunc: int
hx_create_field_name: int
hx_create_typedef: int
hx_creturn_t_compare: int
hx_cswitch_t_compare: int
hx_ctree_item_t_dstr: int
hx_ctree_item_t_get_ea: int
hx_ctree_item_t_get_edm: int
hx_ctree_item_t_get_label_num: int
hx_ctree_item_t_get_lvar: int
hx_ctree_item_t_get_memptr: int
hx_ctree_item_t_get_udm: int
hx_ctree_item_t_print: int
hx_ctree_parentee_t_recalc_parent_types: int
hx_ctree_visitor_t_apply_to: int
hx_ctree_visitor_t_apply_to_exprs: int
hx_cwhile_t_compare: int
hx_decompile: int
hx_decompile_many: int
hx_dereference: int
hx_dstr: int
hx_dummy_ptrtype: int
hx_eamap_begin: int
hx_eamap_clear: int
hx_eamap_end: int
hx_eamap_erase: int
hx_eamap_find: int
hx_eamap_first: int
hx_eamap_free: int
hx_eamap_insert: int
hx_eamap_new: int
hx_eamap_next: int
hx_eamap_prev: int
hx_eamap_second: int
hx_eamap_size: int
hx_file_printer_t_print: int
hx_fnumber_t_dstr: int
hx_fnumber_t_print: int
hx_gco_info_t_append_to_list: int
hx_gen_microcode: int
hx_get_ctype_name: int
hx_get_current_operand: int
hx_get_float_type: int
hx_get_hexrays_version: int
hx_get_int_type_by_width_and_sign: int
hx_get_member_type: int
hx_get_merror_desc: int
hx_get_mreg_name: int
hx_get_op_signness: int
hx_get_signed_mcode: int
hx_get_temp_regs: int
hx_get_type: int
hx_get_unk_type: int
hx_get_unsigned_mcode: int
hx_get_widget_vdui: int
hx_getb_reginsn: int
hx_getf_reginsn: int
hx_graph_chains_t_for_all_chains: int
hx_graph_chains_t_release: int
hx_has_cached_cfunc: int
hx_hexrays_alloc: int
hx_hexrays_failure_t_desc: int
hx_hexrays_free: int
hx_install_hexrays_callback: int
hx_install_microcode_filter: int
hx_install_optblock_handler: int
hx_install_optinsn_handler: int
hx_is_bool_type: int
hx_is_kreg: int
hx_is_mcode_propagatable: int
hx_is_nonbool_type: int
hx_is_small_udt: int
hx_is_type_correct: int
hx_ivl_t_compare: int
hx_ivl_t_dstr: int
hx_ivlset_t_add: int
hx_ivlset_t_add_: int
hx_ivlset_t_addmasked: int
hx_ivlset_t_compare: int
hx_ivlset_t_contains: int
hx_ivlset_t_count: int
hx_ivlset_t_dstr: int
hx_ivlset_t_has_common: int
hx_ivlset_t_has_common_: int
hx_ivlset_t_includes: int
hx_ivlset_t_intersect: int
hx_ivlset_t_print: int
hx_ivlset_t_sub: int
hx_ivlset_t_sub_: int
hx_lnot: int
hx_locate_lvar: int
hx_lvar_locator_t_compare: int
hx_lvar_locator_t_dstr: int
hx_lvar_mapping_begin: int
hx_lvar_mapping_clear: int
hx_lvar_mapping_end: int
hx_lvar_mapping_erase: int
hx_lvar_mapping_find: int
hx_lvar_mapping_first: int
hx_lvar_mapping_free: int
hx_lvar_mapping_insert: int
hx_lvar_mapping_new: int
hx_lvar_mapping_next: int
hx_lvar_mapping_prev: int
hx_lvar_mapping_second: int
hx_lvar_mapping_size: int
hx_lvar_ref_t_compare: int
hx_lvar_ref_t_var: int
hx_lvar_t_accepts_type: int
hx_lvar_t_append_list: int
hx_lvar_t_append_list_: int
hx_lvar_t_dstr: int
hx_lvar_t_is_promoted_arg: int
hx_lvar_t_set_lvar_type: int
hx_lvar_t_set_width: int
hx_lvars_t_find: int
hx_lvars_t_find_lvar: int
hx_lvars_t_find_stkvar: int
hx_make_num: int
hx_make_pointer: int
hx_make_ref: int
hx_mark_cfunc_dirty: int
hx_mba_ranges_t_range_contains: int
hx_mba_t_alloc_fict_ea: int
hx_mba_t_alloc_kreg: int
hx_mba_t_alloc_lvars: int
hx_mba_t_analyze_calls: int
hx_mba_t_arg: int
hx_mba_t_build_graph: int
hx_mba_t_combine_blocks: int
hx_mba_t_copy_block: int
hx_mba_t_create_helper_call: int
hx_mba_t_deserialize: int
hx_mba_t_dump: int
hx_mba_t_find_mop: int
hx_mba_t_for_all_insns: int
hx_mba_t_for_all_ops: int
hx_mba_t_for_all_topinsns: int
hx_mba_t_free_kreg: int
hx_mba_t_get_curfunc: int
hx_mba_t_get_func_output_lists: int
hx_mba_t_get_graph: int
hx_mba_t_idaloc2vd: int
hx_mba_t_idaloc2vd_: int
hx_mba_t_insert_block: int
hx_mba_t_map_fict_ea: int
hx_mba_t_mark_chains_dirty: int
hx_mba_t_optimize_global: int
hx_mba_t_optimize_local: int
hx_mba_t_print: int
hx_mba_t_remove_block: int
hx_mba_t_remove_empty_and_unreachable_blocks: int
hx_mba_t_save_snapshot: int
hx_mba_t_serialize: int
hx_mba_t_set_lvar_name: int
hx_mba_t_set_maturity: int
hx_mba_t_stkoff_ida2vd: int
hx_mba_t_stkoff_vd2ida: int
hx_mba_t_term: int
hx_mba_t_vd2idaloc: int
hx_mba_t_vd2idaloc_: int
hx_mba_t_vdump_mba: int
hx_mba_t_verify: int
hx_mbl_graph_t_get_du: int
hx_mbl_graph_t_get_ud: int
hx_mbl_graph_t_is_accessed_globally: int
hx_mblock_t_append_def_list: int
hx_mblock_t_append_use_list: int
hx_mblock_t_build_def_list: int
hx_mblock_t_build_lists: int
hx_mblock_t_build_use_list: int
hx_mblock_t_dump: int
hx_mblock_t_find_access: int
hx_mblock_t_find_first_use: int
hx_mblock_t_find_redefinition: int
hx_mblock_t_for_all_insns: int
hx_mblock_t_for_all_ops: int
hx_mblock_t_for_all_uses: int
hx_mblock_t_get_reginsn_qty: int
hx_mblock_t_get_valranges: int
hx_mblock_t_get_valranges_: int
hx_mblock_t_init: int
hx_mblock_t_insert_into_block: int
hx_mblock_t_is_rhs_redefined: int
hx_mblock_t_optimize_block: int
hx_mblock_t_optimize_insn: int
hx_mblock_t_optimize_useless_jump: int
hx_mblock_t_print: int
hx_mblock_t_remove_from_block: int
hx_mblock_t_vdump_block: int
hx_mcallarg_t_dstr: int
hx_mcallarg_t_print: int
hx_mcallarg_t_set_regarg: int
hx_mcallinfo_t_dstr: int
hx_mcallinfo_t_get_type: int
hx_mcallinfo_t_lexcompare: int
hx_mcallinfo_t_print: int
hx_mcallinfo_t_set_type: int
hx_mcases_t_compare: int
hx_mcases_t_dstr: int
hx_mcases_t_print: int
hx_mcode_modifies_d: int
hx_minsn_t__make_nop: int
hx_minsn_t_copy: int
hx_minsn_t_deserialize: int
hx_minsn_t_dstr: int
hx_minsn_t_equal_insns: int
hx_minsn_t_find_call: int
hx_minsn_t_find_ins_op: int
hx_minsn_t_find_num_op: int
hx_minsn_t_find_opcode: int
hx_minsn_t_for_all_insns: int
hx_minsn_t_for_all_ops: int
hx_minsn_t_has_side_effects: int
hx_minsn_t_init: int
hx_minsn_t_is_between: int
hx_minsn_t_is_helper: int
hx_minsn_t_is_noret_call: int
hx_minsn_t_lexcompare: int
hx_minsn_t_may_use_aliased_memory: int
hx_minsn_t_modifies_d: int
hx_minsn_t_optimize_subtree: int
hx_minsn_t_print: int
hx_minsn_t_serialize: int
hx_minsn_t_set_combined: int
hx_minsn_t_setaddr: int
hx_minsn_t_swap: int
hx_mlist_t_addmem: int
hx_mlist_t_compare: int
hx_mlist_t_dstr: int
hx_mlist_t_print: int
hx_modify_user_lvar_info: int
hx_modify_user_lvars: int
hx_mop_t__make_gvar: int
hx_mop_t_apply_ld_mcode: int
hx_mop_t_assign: int
hx_mop_t_change_size: int
hx_mop_t_copy: int
hx_mop_t_create_from_insn: int
hx_mop_t_create_from_ivlset: int
hx_mop_t_create_from_mlist: int
hx_mop_t_create_from_scattered_vdloc: int
hx_mop_t_create_from_vdloc: int
hx_mop_t_dstr: int
hx_mop_t_equal_mops: int
hx_mop_t_erase: int
hx_mop_t_for_all_ops: int
hx_mop_t_for_all_scattered_submops: int
hx_mop_t_get_stkoff: int
hx_mop_t_is01: int
hx_mop_t_is_bit_reg: int
hx_mop_t_is_constant: int
hx_mop_t_is_sign_extended_from: int
hx_mop_t_is_zero_extended_from: int
hx_mop_t_lexcompare: int
hx_mop_t_make_first_half: int
hx_mop_t_make_fpnum: int
hx_mop_t_make_gvar: int
hx_mop_t_make_helper: int
hx_mop_t_make_high_half: int
hx_mop_t_make_low_half: int
hx_mop_t_make_number: int
hx_mop_t_make_reg_pair: int
hx_mop_t_make_second_half: int
hx_mop_t_may_use_aliased_memory: int
hx_mop_t_preserve_side_effects: int
hx_mop_t_print: int
hx_mop_t_shift_mop: int
hx_mop_t_swap: int
hx_mreg2reg: int
hx_must_mcode_close_block: int
hx_negate_mcode_relation: int
hx_negated_relation: int
hx_new_block: int
hx_open_pseudocode: int
hx_operand_locator_t_compare: int
hx_parse_user_call: int
hx_partial_type_num: int
hx_print_vdloc: int
hx_qstring_printer_t_print: int
hx_reg2mreg: int
hx_remitem: int
hx_remove_hexrays_callback: int
hx_remove_optblock_handler: int
hx_remove_optinsn_handler: int
hx_rename_lvar: int
hx_restore_user_cmts: int
hx_restore_user_defined_calls: int
hx_restore_user_iflags: int
hx_restore_user_labels: int
hx_restore_user_labels2: int
hx_restore_user_lvar_settings: int
hx_restore_user_numforms: int
hx_restore_user_unions: int
hx_rlist_t_dstr: int
hx_rlist_t_print: int
hx_save_user_cmts: int
hx_save_user_defined_calls: int
hx_save_user_iflags: int
hx_save_user_labels: int
hx_save_user_labels2: int
hx_save_user_lvar_settings: int
hx_save_user_numforms: int
hx_save_user_unions: int
hx_select_udt_by_offset: int
hx_send_database: int
hx_set_type: int
hx_stkvar_ref_t_compare: int
hx_stkvar_ref_t_get_stkvar: int
hx_swap_mcode_relation: int
hx_swapped_relation: int
hx_udc_filter_t_apply: int
hx_udc_filter_t_cleanup: int
hx_udc_filter_t_init: int
hx_udcall_map_begin: int
hx_udcall_map_clear: int
hx_udcall_map_end: int
hx_udcall_map_erase: int
hx_udcall_map_find: int
hx_udcall_map_first: int
hx_udcall_map_free: int
hx_udcall_map_insert: int
hx_udcall_map_new: int
hx_udcall_map_next: int
hx_udcall_map_prev: int
hx_udcall_map_second: int
hx_udcall_map_size: int
hx_user_cmts_begin: int
hx_user_cmts_clear: int
hx_user_cmts_end: int
hx_user_cmts_erase: int
hx_user_cmts_find: int
hx_user_cmts_first: int
hx_user_cmts_free: int
hx_user_cmts_insert: int
hx_user_cmts_new: int
hx_user_cmts_next: int
hx_user_cmts_prev: int
hx_user_cmts_second: int
hx_user_cmts_size: int
hx_user_iflags_begin: int
hx_user_iflags_clear: int
hx_user_iflags_end: int
hx_user_iflags_erase: int
hx_user_iflags_find: int
hx_user_iflags_first: int
hx_user_iflags_free: int
hx_user_iflags_insert: int
hx_user_iflags_new: int
hx_user_iflags_next: int
hx_user_iflags_prev: int
hx_user_iflags_second: int
hx_user_iflags_size: int
hx_user_labels_begin: int
hx_user_labels_clear: int
hx_user_labels_end: int
hx_user_labels_erase: int
hx_user_labels_find: int
hx_user_labels_first: int
hx_user_labels_free: int
hx_user_labels_insert: int
hx_user_labels_new: int
hx_user_labels_next: int
hx_user_labels_prev: int
hx_user_labels_second: int
hx_user_labels_size: int
hx_user_numforms_begin: int
hx_user_numforms_clear: int
hx_user_numforms_end: int
hx_user_numforms_erase: int
hx_user_numforms_find: int
hx_user_numforms_first: int
hx_user_numforms_free: int
hx_user_numforms_insert: int
hx_user_numforms_new: int
hx_user_numforms_next: int
hx_user_numforms_prev: int
hx_user_numforms_second: int
hx_user_numforms_size: int
hx_user_unions_begin: int
hx_user_unions_clear: int
hx_user_unions_end: int
hx_user_unions_erase: int
hx_user_unions_find: int
hx_user_unions_first: int
hx_user_unions_free: int
hx_user_unions_insert: int
hx_user_unions_new: int
hx_user_unions_next: int
hx_user_unions_prev: int
hx_user_unions_second: int
hx_user_unions_size: int
hx_valrng_t_assign: int
hx_valrng_t_clear: int
hx_valrng_t_compare: int
hx_valrng_t_copy: int
hx_valrng_t_cvt_to_cmp: int
hx_valrng_t_cvt_to_single_value: int
hx_valrng_t_dstr: int
hx_valrng_t_has: int
hx_valrng_t_intersect_with: int
hx_valrng_t_inverse: int
hx_valrng_t_print: int
hx_valrng_t_reduce_size: int
hx_valrng_t_set_cmp: int
hx_valrng_t_set_eq: int
hx_valrng_t_unite_with: int
hx_var_ref_t_compare: int
hx_vcall_helper: int
hx_vcreate_helper: int
hx_vd_printer_t_print: int
hx_vdloc_t_compare: int
hx_vdloc_t_dstr: int
hx_vdloc_t_is_aliasable: int
hx_vdui_t_calc_cmt_type: int
hx_vdui_t_clear: int
hx_vdui_t_collapse_item: int
hx_vdui_t_collapse_lvars: int
hx_vdui_t_ctree_to_disasm: int
hx_vdui_t_del_orphan_cmts: int
hx_vdui_t_edit_cmt: int
hx_vdui_t_edit_func_cmt: int
hx_vdui_t_get_current_item: int
hx_vdui_t_get_current_label: int
hx_vdui_t_get_number: int
hx_vdui_t_invert_bits: int
hx_vdui_t_invert_sign: int
hx_vdui_t_jump_enter: int
hx_vdui_t_map_lvar: int
hx_vdui_t_refresh_cpos: int
hx_vdui_t_refresh_ctext: int
hx_vdui_t_refresh_view: int
hx_vdui_t_rename_global: int
hx_vdui_t_rename_label: int
hx_vdui_t_rename_lvar: int
hx_vdui_t_rename_strmem: int
hx_vdui_t_rename_udm: int
hx_vdui_t_set_global_type: int
hx_vdui_t_set_locked: int
hx_vdui_t_set_lvar_cmt: int
hx_vdui_t_set_lvar_type: int
hx_vdui_t_set_noptr_lvar: int
hx_vdui_t_set_num_enum: int
hx_vdui_t_set_num_radix: int
hx_vdui_t_set_num_stroff: int
hx_vdui_t_set_strmem_type: int
hx_vdui_t_set_udm_type: int
hx_vdui_t_split_item: int
hx_vdui_t_switch_to: int
hx_vdui_t_ui_edit_lvar_cmt: int
hx_vdui_t_ui_map_lvar: int
hx_vdui_t_ui_rename_lvar: int
hx_vdui_t_ui_set_call_type: int
hx_vdui_t_ui_set_lvar_type: int
hx_vdui_t_ui_unmap_lvar: int
hx_vivl_t_dstr: int
hx_vivl_t_extend_to_cover: int
hx_vivl_t_intersect: int
hx_vivl_t_print: int
hxe_build_callinfo: int
hxe_callinfo_built: int
hxe_calls_done: int
hxe_close_pseudocode: int
hxe_cmt_changed: int
hxe_combine: int
hxe_create_hint: int
hxe_curpos: int
hxe_double_click: int
hxe_flowchart: int
hxe_func_printed: int
hxe_glbopt: int
hxe_interr: int
hxe_keyboard: int
hxe_locopt: int
hxe_maturity: int
hxe_microcode: int
hxe_open_pseudocode: int
hxe_populating_popup: int
hxe_prealloc: int
hxe_preoptimized: int
hxe_print_func: int
hxe_prolog: int
hxe_refresh_pseudocode: int
hxe_resolve_stkaddrs: int
hxe_right_click: int
hxe_stkpnts: int
hxe_structural: int
hxe_switch_pseudocode: int
hxe_text_ready: int
lxe_lvar_cmt_changed: int
lxe_lvar_mapping_changed: int
lxe_lvar_name_changed: int
lxe_lvar_type_changed: int
m_add: int
m_and: int
m_bnot: int
m_call: int
m_cfadd: int
m_cfshl: int
m_cfshr: int
m_ext: int
m_f2f: int
m_f2i: int
m_f2u: int
m_fadd: int
m_fdiv: int
m_fmul: int
m_fneg: int
m_fsub: int
m_goto: int
m_high: int
m_i2f: int
m_icall: int
m_ijmp: int
m_ja: int
m_jae: int
m_jb: int
m_jbe: int
m_jcnd: int
m_jg: int
m_jge: int
m_jl: int
m_jle: int
m_jnz: int
m_jtbl: int
m_jz: int
m_ldc: int
m_ldx: int
m_lnot: int
m_low: int
m_mov: int
m_mul: int
m_neg: int
m_nop: int
m_ofadd: int
m_or: int
m_pop: int
m_push: int
m_ret: int
m_sar: int
m_sdiv: int
m_seta: int
m_setae: int
m_setb: int
m_setbe: int
m_setg: int
m_setge: int
m_setl: int
m_setle: int
m_setnz: int
m_seto: int
m_setp: int
m_sets: int
m_setz: int
m_shl: int
m_shr: int
m_smod: int
m_stx: int
m_sub: int
m_u2f: int
m_udiv: int
m_umod: int
m_und: int
m_xds: int
m_xdu: int
m_xor: int

def Hexrays_Hooks_build_callinfo(*args, **kwargs): ...
def Hexrays_Hooks_callinfo_built(self, blk) -> int: ...
def Hexrays_Hooks_calls_done(self, mba) -> int: ...
def Hexrays_Hooks_close_pseudocode(self, vu) -> int: ...
def Hexrays_Hooks_cmt_changed(self, cfunc, loc, cmt) -> int: ...
def Hexrays_Hooks_combine(self, blk, insn) -> int: ...
def Hexrays_Hooks_create_hint(*args, **kwargs): ...
def Hexrays_Hooks_curpos(self, vu) -> int: ...
def Hexrays_Hooks_double_click(self, vu, shift_state) -> int: ...
def Hexrays_Hooks_flowchart(self, fc) -> int: ...
def Hexrays_Hooks_func_printed(self, cfunc) -> int: ...
def Hexrays_Hooks_glbopt(self, mba) -> int: ...
def Hexrays_Hooks_hook(self) -> bool: ...
def Hexrays_Hooks_interr(self, errcode) -> int: ...
def Hexrays_Hooks_keyboard(self, vu, key_code, shift_state) -> int: ...
def Hexrays_Hooks_locopt(self, mba) -> int: ...
def Hexrays_Hooks_lvar_cmt_changed(self, vu, v, cmt) -> int: ...
def Hexrays_Hooks_lvar_mapping_changed(self, vu, frm, to) -> int: ...
def Hexrays_Hooks_lvar_name_changed(self, vu, v, name, is_user_name) -> int: ...
def Hexrays_Hooks_lvar_type_changed(self, vu, v, tinfo) -> int: ...
def Hexrays_Hooks_maturity(self, cfunc, new_maturity) -> int: ...
def Hexrays_Hooks_microcode(self, mba) -> int: ...
def Hexrays_Hooks_open_pseudocode(self, vu) -> int: ...
def Hexrays_Hooks_populating_popup(self, widget, popup_handle, vu) -> int: ...
def Hexrays_Hooks_prealloc(self, mba) -> int: ...
def Hexrays_Hooks_preoptimized(self, mba) -> int: ...
def Hexrays_Hooks_print_func(self, cfunc, vp) -> int: ...
def Hexrays_Hooks_prolog(self, mba, fc, reachable_blocks, decomp_flags) -> int: ...
def Hexrays_Hooks_refresh_pseudocode(self, vu) -> int: ...
def Hexrays_Hooks_resolve_stkaddrs(self, mba) -> int: ...
def Hexrays_Hooks_right_click(self, vu) -> int: ...
def Hexrays_Hooks_stkpnts(self, mba, _sps) -> int: ...
def Hexrays_Hooks_structural(self, ct) -> int: ...
def Hexrays_Hooks_swiginit(*args, **kwargs): ...
def Hexrays_Hooks_swigregister(*args, **kwargs): ...
def Hexrays_Hooks_switch_pseudocode(self, vu) -> int: ...
def Hexrays_Hooks_text_ready(self, vu) -> int: ...
def Hexrays_Hooks_unhook(self) -> bool: ...
def _kludge_force_declare_TPopupMenu(arg1) -> Any: ...
def _ll_call_helper(rettype, args, format) -> cexpr_t: ...
def _ll_create_helper(standalone, type, format) -> cexpr_t: ...
def _ll_dereference(e, ptrsize, is_flt=...) -> cexpr_t: ...
def _ll_lnot(e) -> cexpr_t: ...
def _ll_make_num(n, func=..., ea=..., opnum=..., sign=..., size=...) -> cexpr_t: ...
def _ll_make_ref(e) -> cexpr_t: ...
def _ll_new_block() -> cinsn_t: ...
def accepts_small_udts(op) -> bool: ...
def accepts_udts(op) -> bool: ...
def arglocs_overlap(loc1, w1, loc2, w2) -> bool: ...
def array_of_bitsets___eq__(self, r) -> bool: ...
def array_of_bitsets___getitem__(self, i) -> bitset_t: ...
def array_of_bitsets___len__(self) -> size_t: ...
def array_of_bitsets___ne__(self, r) -> bool: ...
def array_of_bitsets___setitem__(self, i, v) -> Any: ...
def array_of_bitsets__del(self, x) -> bool: ...
def array_of_bitsets_add_unique(self, x) -> bool: ...
def array_of_bitsets_at(self, _idx) -> bitset_t: ...
@overload
def array_of_bitsets_begin(self) -> bitset_t: ...
@overload
def array_of_bitsets_begin(self) -> bitset_t: ...
def array_of_bitsets_capacity(self) -> size_t: ...
def array_of_bitsets_clear(self) -> Any: ...
def array_of_bitsets_empty(self) -> bool: ...
@overload
def array_of_bitsets_end(self) -> bitset_t: ...
@overload
def array_of_bitsets_end(self) -> bitset_t: ...
@overload
def array_of_bitsets_erase(self, it) -> bitset_t: ...
@overload
def array_of_bitsets_erase(self, first, last) -> bitset_t: ...
def array_of_bitsets_extract(self) -> bitset_t: ...
@overload
def array_of_bitsets_find(self, x) -> bitset_t: ...
@overload
def array_of_bitsets_find(self, x) -> bitset_t: ...
def array_of_bitsets_grow(self, x=...) -> Any: ...
def array_of_bitsets_has(self, x) -> bool: ...
def array_of_bitsets_inject(self, s, len) -> Any: ...
def array_of_bitsets_insert(self, it, x) -> bitset_t: ...
def array_of_bitsets_pop_back(self) -> Any: ...
@overload
def array_of_bitsets_push_back(self, x) -> Any: ...
@overload
def array_of_bitsets_push_back(self) -> bitset_t: ...
def array_of_bitsets_qclear(self) -> Any: ...
def array_of_bitsets_reserve(self, cnt) -> Any: ...
@overload
def array_of_bitsets_resize(self, _newsize, x) -> Any: ...
@overload
def array_of_bitsets_resize(self, _newsize) -> Any: ...
def array_of_bitsets_size(self) -> size_t: ...
def array_of_bitsets_swap(self, r) -> Any: ...
def array_of_bitsets_swiginit(*args, **kwargs): ...
def array_of_bitsets_swigregister(*args, **kwargs): ...
def array_of_bitsets_truncate(self) -> Any: ...
def array_of_ivlsets___eq__(self, r) -> bool: ...
def array_of_ivlsets___getitem__(self, i) -> ivlset_t: ...
def array_of_ivlsets___len__(self) -> size_t: ...
def array_of_ivlsets___ne__(self, r) -> bool: ...
def array_of_ivlsets___setitem__(self, i, v) -> Any: ...
def array_of_ivlsets__del(self, x) -> bool: ...
def array_of_ivlsets_add_unique(self, x) -> bool: ...
def array_of_ivlsets_at(self, _idx) -> ivlset_t: ...
@overload
def array_of_ivlsets_begin(self) -> ivlset_t: ...
@overload
def array_of_ivlsets_begin(self) -> ivlset_t: ...
def array_of_ivlsets_capacity(self) -> size_t: ...
def array_of_ivlsets_clear(self) -> Any: ...
def array_of_ivlsets_empty(self) -> bool: ...
@overload
def array_of_ivlsets_end(self) -> ivlset_t: ...
@overload
def array_of_ivlsets_end(self) -> ivlset_t: ...
@overload
def array_of_ivlsets_erase(self, it) -> ivlset_t: ...
@overload
def array_of_ivlsets_erase(self, first, last) -> ivlset_t: ...
def array_of_ivlsets_extract(self) -> ivlset_t: ...
@overload
def array_of_ivlsets_find(self, x) -> ivlset_t: ...
@overload
def array_of_ivlsets_find(self, x) -> ivlset_t: ...
def array_of_ivlsets_grow(self, x=...) -> Any: ...
def array_of_ivlsets_has(self, x) -> bool: ...
def array_of_ivlsets_inject(self, s, len) -> Any: ...
def array_of_ivlsets_insert(self, it, x) -> ivlset_t: ...
def array_of_ivlsets_pop_back(self) -> Any: ...
@overload
def array_of_ivlsets_push_back(self, x) -> Any: ...
@overload
def array_of_ivlsets_push_back(self) -> ivlset_t: ...
def array_of_ivlsets_qclear(self) -> Any: ...
def array_of_ivlsets_reserve(self, cnt) -> Any: ...
@overload
def array_of_ivlsets_resize(self, _newsize, x) -> Any: ...
@overload
def array_of_ivlsets_resize(self, _newsize) -> Any: ...
def array_of_ivlsets_size(self) -> size_t: ...
def array_of_ivlsets_swap(self, r) -> Any: ...
def array_of_ivlsets_swiginit(*args, **kwargs): ...
def array_of_ivlsets_swigregister(*args, **kwargs): ...
def array_of_ivlsets_truncate(self) -> Any: ...
def asgop(cop) -> ctype_t: ...
def asgop_revert(cop) -> ctype_t: ...
def bit_bound_t_nbits_get(self) -> int16: ...
def bit_bound_t_nbits_set(self, nbits) -> Any: ...
def bit_bound_t_sbits_get(self) -> int16: ...
def bit_bound_t_sbits_set(self, sbits) -> Any: ...
def bit_bound_t_swiginit(*args, **kwargs): ...
def bit_bound_t_swigregister(*args, **kwargs): ...
def bitset_t___eq__(self, r) -> bool: ...
def bitset_t___ge__(self, r) -> bool: ...
def bitset_t___gt__(self, r) -> bool: ...
def bitset_t___le__(self, r) -> bool: ...
def bitset_t___lt__(self, r) -> bool: ...
def bitset_t___ne__(self, r) -> bool: ...
@overload
def bitset_t_add(self, bit) -> bool: ...
@overload
def bitset_t_add(self, bit, width) -> bool: ...
@overload
def bitset_t_add(self, ml) -> bool: ...
def bitset_t_back(self) -> int: ...
def bitset_t_begin(self) -> iterator: ...
def bitset_t_clear(self) -> Any: ...
def bitset_t_compare(self, r) -> int: ...
def bitset_t_copy(self, m) -> bitset_t: ...
@overload
def bitset_t_count(self) -> int: ...
@overload
def bitset_t_count(self, bit) -> int: ...
def bitset_t_cut_at(self, maxbit) -> bool: ...
def bitset_t_dstr(*args, **kwargs): ...
def bitset_t_empty(self) -> bool: ...
def bitset_t_end(self) -> iterator: ...
def bitset_t_fill_with_ones(self, maxbit) -> Any: ...
def bitset_t_front(self) -> int: ...
def bitset_t_has(self, bit) -> bool: ...
def bitset_t_has_all(self, bit, width) -> bool: ...
def bitset_t_has_any(self, bit, width) -> bool: ...
def bitset_t_has_common(self, ml) -> bool: ...
def bitset_t_inc(self, p, n=...) -> Any: ...
def bitset_t_includes(self, ml) -> bool: ...
def bitset_t_intersect(self, ml) -> bool: ...
def bitset_t_is_subset_of(self, ml) -> bool: ...
def bitset_t_itat(self, n) -> iterator: ...
def bitset_t_itv(self, it) -> int: ...
def bitset_t_last(self) -> int: ...
def bitset_t_shift_down(self, shift) -> Any: ...
@overload
def bitset_t_sub(self, bit) -> bool: ...
@overload
def bitset_t_sub(self, bit, width) -> bool: ...
@overload
def bitset_t_sub(self, ml) -> bool: ...
def bitset_t_swap(self, r) -> Any: ...
def bitset_t_swiginit(*args, **kwargs): ...
def bitset_t_swigregister(*args, **kwargs): ...
def block_chains_begin(set) -> block_chains_iterator_t: ...
def block_chains_clear(set) -> Any: ...
def block_chains_end(set) -> block_chains_iterator_t: ...
def block_chains_erase(set, p) -> Any: ...
def block_chains_find(set, val) -> block_chains_iterator_t: ...
def block_chains_free(set) -> Any: ...
def block_chains_get(p) -> chain_t: ...
def block_chains_insert(set, val) -> block_chains_iterator_t: ...
def block_chains_iterator_t___eq__(self, p) -> bool: ...
def block_chains_iterator_t___ne__(self, p) -> bool: ...
def block_chains_iterator_t_swiginit(*args, **kwargs): ...
def block_chains_iterator_t_swigregister(*args, **kwargs): ...
def block_chains_iterator_t_x_get(self) -> iterator_word: ...
def block_chains_iterator_t_x_set(self, x) -> Any: ...
def block_chains_new() -> block_chains_t: ...
def block_chains_next(p) -> block_chains_iterator_t: ...
def block_chains_prev(p) -> block_chains_iterator_t: ...
def block_chains_size(set) -> size_t: ...
def block_chains_t__print(self) -> Any: ...
def block_chains_t_dstr(*args, **kwargs): ...
@overload
def block_chains_t_get_chain(self, k, width=...) -> chain_t: ...
@overload
def block_chains_t_get_chain(self, k, width=...) -> chain_t: ...
@overload
def block_chains_t_get_chain(self, ch) -> chain_t: ...
@overload
def block_chains_t_get_chain(self, ch) -> chain_t: ...
@overload
def block_chains_t_get_reg_chain(self, reg, width=...) -> chain_t: ...
@overload
def block_chains_t_get_reg_chain(self, reg, width=...) -> chain_t: ...
@overload
def block_chains_t_get_stk_chain(self, off, width=...) -> chain_t: ...
@overload
def block_chains_t_get_stk_chain(self, off, width=...) -> chain_t: ...
def block_chains_t_swiginit(*args, **kwargs): ...
def block_chains_t_swigregister(*args, **kwargs): ...
def block_chains_vec_t___getitem__(self, i) -> block_chains_t: ...
def block_chains_vec_t___len__(self) -> size_t: ...
def block_chains_vec_t___setitem__(self, i, v) -> Any: ...
def block_chains_vec_t_at(self, _idx) -> block_chains_t: ...
@overload
def block_chains_vec_t_begin(self) -> block_chains_t: ...
@overload
def block_chains_vec_t_begin(self) -> block_chains_t: ...
def block_chains_vec_t_capacity(self) -> size_t: ...
def block_chains_vec_t_clear(self) -> Any: ...
def block_chains_vec_t_empty(self) -> bool: ...
@overload
def block_chains_vec_t_end(self) -> block_chains_t: ...
@overload
def block_chains_vec_t_end(self) -> block_chains_t: ...
@overload
def block_chains_vec_t_erase(self, it) -> block_chains_t: ...
@overload
def block_chains_vec_t_erase(self, first, last) -> block_chains_t: ...
def block_chains_vec_t_extract(self) -> block_chains_t: ...
def block_chains_vec_t_grow(self, x=...) -> Any: ...
def block_chains_vec_t_inject(self, s, len) -> Any: ...
def block_chains_vec_t_insert(self, it, x) -> block_chains_t: ...
def block_chains_vec_t_pop_back(self) -> Any: ...
@overload
def block_chains_vec_t_push_back(self, x) -> Any: ...
@overload
def block_chains_vec_t_push_back(self) -> block_chains_t: ...
def block_chains_vec_t_qclear(self) -> Any: ...
def block_chains_vec_t_reserve(self, cnt) -> Any: ...
@overload
def block_chains_vec_t_resize(self, _newsize, x) -> Any: ...
@overload
def block_chains_vec_t_resize(self, _newsize) -> Any: ...
def block_chains_vec_t_size(self) -> size_t: ...
def block_chains_vec_t_swap(self, r) -> Any: ...
def block_chains_vec_t_swiginit(*args, **kwargs): ...
def block_chains_vec_t_swigregister(*args, **kwargs): ...
def block_chains_vec_t_truncate(self) -> Any: ...
def boundaries_begin(map) -> boundaries_iterator_t: ...
def boundaries_clear(map) -> Any: ...
def boundaries_end(map) -> boundaries_iterator_t: ...
def boundaries_erase(map, p) -> Any: ...
def boundaries_find(map, key) -> boundaries_iterator_t: ...
def boundaries_first(p) -> cinsn_t: ...
def boundaries_free(map) -> Any: ...
def boundaries_insert(map, key, val) -> boundaries_iterator_t: ...
def boundaries_iterator_t___eq__(self, p) -> bool: ...
def boundaries_iterator_t___ne__(self, p) -> bool: ...
def boundaries_iterator_t_swiginit(*args, **kwargs): ...
def boundaries_iterator_t_swigregister(*args, **kwargs): ...
def boundaries_iterator_t_x_get(self) -> iterator_word: ...
def boundaries_iterator_t_x_set(self, x) -> Any: ...
def boundaries_new() -> boundaries_t: ...
def boundaries_next(p) -> boundaries_iterator_t: ...
def boundaries_prev(p) -> boundaries_iterator_t: ...
def boundaries_second(p) -> rangeset_t: ...
def boundaries_size(map) -> size_t: ...
def boundaries_t_at(self, _Keyval) -> rangeset_t: ...
def boundaries_t_size(self) -> size_t: ...
def boundaries_t_swiginit(*args, **kwargs): ...
def boundaries_t_swigregister(*args, **kwargs): ...
def carg_t___eq__(self, r) -> bool: ...
def carg_t___ge__(self, r) -> bool: ...
def carg_t___gt__(self, r) -> bool: ...
def carg_t___le__(self, r) -> bool: ...
def carg_t___lt__(self, r) -> bool: ...
def carg_t___ne__(self, r) -> bool: ...
def carg_t_compare(self, r) -> int: ...
def carg_t_consume_cexpr(self, e) -> Any: ...
def carg_t_formal_type_get(self) -> tinfo_t: ...
def carg_t_formal_type_set(self, formal_type) -> Any: ...
def carg_t_is_vararg_get(self) -> bool: ...
def carg_t_is_vararg_set(self, is_vararg) -> Any: ...
def carg_t_swiginit(*args, **kwargs): ...
def carg_t_swigregister(*args, **kwargs): ...
def carglist_t___eq__(self, r) -> bool: ...
def carglist_t___ge__(self, r) -> bool: ...
def carglist_t___gt__(self, r) -> bool: ...
def carglist_t___le__(self, r) -> bool: ...
def carglist_t___lt__(self, r) -> bool: ...
def carglist_t___ne__(self, r) -> bool: ...
def carglist_t_compare(self, r) -> int: ...
def carglist_t_flags_get(self) -> int: ...
def carglist_t_flags_set(self, flags) -> Any: ...
def carglist_t_functype_get(self) -> tinfo_t: ...
def carglist_t_functype_set(self, functype) -> Any: ...
def carglist_t_swiginit(*args, **kwargs): ...
def carglist_t_swigregister(*args, **kwargs): ...
def casm_t___eq__(self, r) -> bool: ...
def casm_t___ge__(self, r) -> bool: ...
def casm_t___gt__(self, r) -> bool: ...
def casm_t___le__(self, r) -> bool: ...
def casm_t___lt__(self, r) -> bool: ...
def casm_t___ne__(self, r) -> bool: ...
def casm_t_compare(self, r) -> int: ...
def casm_t_one_insn(self) -> bool: ...
def casm_t_swiginit(*args, **kwargs): ...
def casm_t_swigregister(*args, **kwargs): ...
def cblock_t___eq__(self, r) -> bool: ...
def cblock_t___ge__(self, r) -> bool: ...
def cblock_t___gt__(self, r) -> bool: ...
def cblock_t___le__(self, r) -> bool: ...
def cblock_t___lt__(self, r) -> bool: ...
def cblock_t___ne__(self, r) -> bool: ...
def cblock_t__deregister(self) -> Any: ...
def cblock_t_compare(self, r) -> int: ...
def cblock_t_swiginit(*args, **kwargs): ...
def cblock_t_swigregister(*args, **kwargs): ...
def ccase_t___eq__(self, r) -> bool: ...
def ccase_t___ge__(self, r) -> bool: ...
def ccase_t___gt__(self, r) -> bool: ...
def ccase_t___le__(self, r) -> bool: ...
def ccase_t___lt__(self, r) -> bool: ...
def ccase_t___ne__(self, r) -> bool: ...
def ccase_t_compare(self, r) -> int: ...
def ccase_t_size(self) -> size_t: ...
def ccase_t_swiginit(*args, **kwargs): ...
def ccase_t_swigregister(*args, **kwargs): ...
def ccase_t_value(*args, **kwargs): ...
def ccase_t_values_get(self) -> uint64vec_t: ...
def ccase_t_values_set(self, values) -> Any: ...
def ccases_t___eq__(self, r) -> bool: ...
def ccases_t___ge__(self, r) -> bool: ...
def ccases_t___gt__(self, r) -> bool: ...
def ccases_t___le__(self, r) -> bool: ...
def ccases_t___lt__(self, r) -> bool: ...
def ccases_t___ne__(self, r) -> bool: ...
def ccases_t_compare(self, r) -> int: ...
def ccases_t_swiginit(*args, **kwargs): ...
def ccases_t_swigregister(*args, **kwargs): ...
def cdg_insn_iterator_t_dslot_get(self) -> ea_t: ...
def cdg_insn_iterator_t_dslot_insn_get(*args, **kwargs): ...
def cdg_insn_iterator_t_dslot_insn_set(self, dslot_insn) -> Any: ...
def cdg_insn_iterator_t_dslot_set(self, dslot) -> Any: ...
def cdg_insn_iterator_t_dslot_with_xrefs(self) -> bool: ...
def cdg_insn_iterator_t_ea_get(self) -> ea_t: ...
def cdg_insn_iterator_t_ea_set(self, ea) -> Any: ...
def cdg_insn_iterator_t_end_get(self) -> ea_t: ...
def cdg_insn_iterator_t_end_set(self, end) -> Any: ...
def cdg_insn_iterator_t_has_dslot(self) -> bool: ...
def cdg_insn_iterator_t_is_likely_dslot_get(self) -> bool: ...
def cdg_insn_iterator_t_is_likely_dslot_set(self, is_likely_dslot) -> Any: ...
def cdg_insn_iterator_t_is_severed_dslot(self) -> bool: ...
def cdg_insn_iterator_t_mba_get(self) -> mba_t: ...
def cdg_insn_iterator_t_mba_set(self, mba) -> Any: ...
def cdg_insn_iterator_t_next(self, ins) -> merror_t: ...
def cdg_insn_iterator_t_ok(self) -> bool: ...
def cdg_insn_iterator_t_severed_branch_get(self) -> ea_t: ...
def cdg_insn_iterator_t_severed_branch_set(self, severed_branch) -> Any: ...
def cdg_insn_iterator_t_start(self, rng) -> Any: ...
def cdg_insn_iterator_t_swiginit(*args, **kwargs): ...
def cdg_insn_iterator_t_swigregister(*args, **kwargs): ...
def cdo_t___eq__(self, r) -> bool: ...
def cdo_t___ge__(self, r) -> bool: ...
def cdo_t___gt__(self, r) -> bool: ...
def cdo_t___le__(self, r) -> bool: ...
def cdo_t___lt__(self, r) -> bool: ...
def cdo_t___ne__(self, r) -> bool: ...
def cdo_t_compare(self, r) -> int: ...
def cdo_t_swiginit(*args, **kwargs): ...
def cdo_t_swigregister(*args, **kwargs): ...
def ceinsn_t_expr_get(self) -> cexpr_t: ...
def ceinsn_t_expr_set(self, expr) -> Any: ...
def ceinsn_t_swiginit(*args, **kwargs): ...
def ceinsn_t_swigregister(*args, **kwargs): ...
def cexpr_t___eq__(self, r) -> bool: ...
def cexpr_t___ge__(self, r) -> bool: ...
def cexpr_t___gt__(self, r) -> bool: ...
def cexpr_t___le__(self, r) -> bool: ...
def cexpr_t___lt__(self, r) -> bool: ...
def cexpr_t___ne__(self, r) -> bool: ...
def cexpr_t__deregister(self) -> Any: ...
def cexpr_t__get_a(self) -> carglist_t: ...
def cexpr_t__get_fpc(self) -> fnumber_t: ...
def cexpr_t__get_helper(*args, **kwargs): ...
def cexpr_t__get_insn(self) -> cinsn_t: ...
def cexpr_t__get_m(self) -> int: ...
def cexpr_t__get_n(self) -> cnumber_t: ...
def cexpr_t__get_obj_ea(self) -> ea_t: ...
def cexpr_t__get_ptrsize(self) -> int: ...
def cexpr_t__get_refwidth(self) -> int: ...
def cexpr_t__get_string(*args, **kwargs): ...
def cexpr_t__get_x(self) -> cexpr_t: ...
def cexpr_t__get_y(self) -> cexpr_t: ...
def cexpr_t__get_z(self) -> cexpr_t: ...
def cexpr_t__register(self) -> Any: ...
def cexpr_t__replace_by(self, r) -> Any: ...
def cexpr_t__set_a(self, _v) -> Any: ...
def cexpr_t__set_fpc(self, _v) -> Any: ...
def cexpr_t__set_helper(self, _v) -> Any: ...
def cexpr_t__set_insn(self, _v) -> Any: ...
def cexpr_t__set_m(self, _v) -> Any: ...
def cexpr_t__set_n(self, _v) -> Any: ...
def cexpr_t__set_obj_ea(self, _v) -> Any: ...
def cexpr_t__set_ptrsize(self, _v) -> Any: ...
def cexpr_t__set_refwidth(self, _v) -> Any: ...
def cexpr_t__set_string(self, _v) -> Any: ...
def cexpr_t__set_x(self, _v) -> Any: ...
def cexpr_t__set_y(self, _v) -> Any: ...
def cexpr_t__set_z(self, _v) -> Any: ...
def cexpr_t_assign(self, r) -> cexpr_t: ...
def cexpr_t_calc_type(self, recursive) -> Any: ...
def cexpr_t_cleanup(self) -> Any: ...
def cexpr_t_compare(self, r) -> int: ...
def cexpr_t_contains_comma(self, times=...) -> bool: ...
def cexpr_t_contains_comma_or_insn_or_label(self, maxcommas=...) -> bool: ...
def cexpr_t_contains_insn(self, times=...) -> bool: ...
def cexpr_t_contains_insn_or_label(self) -> bool: ...
def cexpr_t_contains_operator(self, needed_op, times=...) -> bool: ...
def cexpr_t_cpadone(self) -> bool: ...
def cexpr_t_dstr(*args, **kwargs): ...
def cexpr_t_equal_effect(self, r) -> bool: ...
def cexpr_t_exflags_get(self) -> uint32: ...
def cexpr_t_exflags_set(self, exflags) -> Any: ...
@overload
def cexpr_t_find_num_op(self) -> cexpr_t: ...
@overload
def cexpr_t_find_num_op(self) -> cexpr_t: ...
@overload
def cexpr_t_find_op(self, _op) -> cexpr_t: ...
@overload
def cexpr_t_find_op(self, _op) -> cexpr_t: ...
def cexpr_t_get_1num_op(self, o1, o2) -> bool: ...
def cexpr_t_get_const_value(self) -> bool: ...
def cexpr_t_get_high_nbit_bound(self) -> bit_bound_t: ...
def cexpr_t_get_low_nbit_bound(self) -> int: ...
def cexpr_t_get_ptr_or_array(self) -> cexpr_t: ...
def cexpr_t_get_type_sign(self) -> type_sign_t: ...
def cexpr_t_get_v(self) -> var_ref_t: ...
def cexpr_t_has_side_effects(self) -> bool: ...
def cexpr_t_is_call_arg_of(self, parent) -> bool: ...
def cexpr_t_is_call_object_of(self, parent) -> bool: ...
def cexpr_t_is_child_of(self, parent) -> bool: ...
def cexpr_t_is_const_value(self, _v) -> bool: ...
def cexpr_t_is_cstr(self) -> bool: ...
def cexpr_t_is_fpop(self) -> bool: ...
def cexpr_t_is_jumpout(self) -> bool: ...
def cexpr_t_is_negative_const(self) -> bool: ...
def cexpr_t_is_nice_cond(self) -> bool: ...
def cexpr_t_is_nice_expr(self) -> bool: ...
def cexpr_t_is_non_negative_const(self) -> bool: ...
def cexpr_t_is_non_zero_const(self) -> bool: ...
def cexpr_t_is_odd_lvalue(self) -> bool: ...
def cexpr_t_is_type_signed(self) -> bool: ...
def cexpr_t_is_type_unsigned(self) -> bool: ...
def cexpr_t_is_undef_val(self) -> bool: ...
def cexpr_t_is_vftable(self) -> bool: ...
def cexpr_t_is_zero_const(self) -> bool: ...
def cexpr_t_maybe_ptr(self) -> bool: ...
def cexpr_t_numval(self) -> uint64: ...
def cexpr_t_print1(self, func) -> Any: ...
def cexpr_t_put_number(self, func, value, nbytes, sign=...) -> Any: ...
def cexpr_t_requires_lvalue(self, child) -> bool: ...
def cexpr_t_set_cpadone(self) -> Any: ...
def cexpr_t_set_v(self, v) -> Any: ...
def cexpr_t_set_vftable(self) -> Any: ...
def cexpr_t_swap(self, r) -> Any: ...
def cexpr_t_swiginit(*args, **kwargs): ...
def cexpr_t_swigregister(*args, **kwargs): ...
@overload
def cexpr_t_theother(self, what) -> cexpr_t: ...
@overload
def cexpr_t_theother(self, what) -> cexpr_t: ...
def cexpr_t_type_get(self) -> tinfo_t: ...
def cexpr_t_type_set(self, type) -> Any: ...
def cfor_t___eq__(self, r) -> bool: ...
def cfor_t___ge__(self, r) -> bool: ...
def cfor_t___gt__(self, r) -> bool: ...
def cfor_t___le__(self, r) -> bool: ...
def cfor_t___lt__(self, r) -> bool: ...
def cfor_t___ne__(self, r) -> bool: ...
def cfor_t_compare(self, r) -> int: ...
def cfor_t_init_get(self) -> cexpr_t: ...
def cfor_t_init_set(self, init) -> Any: ...
def cfor_t_step_get(self) -> cexpr_t: ...
def cfor_t_step_set(self, step) -> Any: ...
def cfor_t_swiginit(*args, **kwargs): ...
def cfor_t_swigregister(*args, **kwargs): ...
def cfunc_parentee_t_calc_rvalue_type(self, target, e) -> bool: ...
def cfunc_parentee_t_func_get(self) -> cfunc_t: ...
def cfunc_parentee_t_func_set(self, func) -> Any: ...
def cfunc_parentee_t_swiginit(*args, **kwargs): ...
def cfunc_parentee_t_swigregister(*args, **kwargs): ...
def cfunc_t___str__(self) -> qstring: ...
def cfunc_t_argidx_get(self) -> intvec_t: ...
def cfunc_t_body_get(self) -> cinsn_t: ...
def cfunc_t_body_set(self, body) -> Any: ...
def cfunc_t_build_c_tree(self) -> Any: ...
def cfunc_t_del_orphan_cmts(self) -> int: ...
def cfunc_t_entry_ea_get(self) -> ea_t: ...
def cfunc_t_entry_ea_set(self, entry_ea) -> Any: ...
def cfunc_t_find_item_coords(self, item, px, py) -> bool: ...
def cfunc_t_find_label(self, label) -> citem_t: ...
def cfunc_t_gather_derefs(self, ci, udm=...) -> bool: ...
def cfunc_t_get_boundaries(self) -> boundaries_t: ...
def cfunc_t_get_eamap(self) -> eamap_t: ...
def cfunc_t_get_func_type(self, type) -> bool: ...
def cfunc_t_get_line_item(self, line, x, is_ctree_line, phead, pitem, ptail) -> bool: ...
def cfunc_t_get_lvars(self) -> lvars_t: ...
def cfunc_t_get_pseudocode(self) -> strvec_t: ...
def cfunc_t_get_stkoff_delta(self) -> sval_t: ...
def cfunc_t_get_user_cmt(*args, **kwargs): ...
def cfunc_t_get_user_iflags(self, loc) -> int32: ...
def cfunc_t_get_user_union_selection(self, ea, path) -> bool: ...
def cfunc_t_get_warnings(self) -> hexwarns_t: ...
def cfunc_t_has_orphan_cmts(self) -> bool: ...
def cfunc_t_hdrlines_get(self) -> int: ...
def cfunc_t_hdrlines_set(self, hdrlines) -> Any: ...
def cfunc_t_locked(self) -> bool: ...
def cfunc_t_maturity_get(self) -> ctree_maturity_t: ...
def cfunc_t_maturity_set(self, maturity) -> Any: ...
def cfunc_t_mba_get(self) -> mba_t: ...
def cfunc_t_mba_set(self, mba) -> Any: ...
def cfunc_t_numforms_get(self) -> user_numforms_t: ...
def cfunc_t_numforms_set(self, numforms) -> Any: ...
def cfunc_t_print_dcl(self) -> Any: ...
def cfunc_t_print_func(self, vp) -> Any: ...
def cfunc_t_refcnt_get(self) -> int: ...
def cfunc_t_refcnt_set(self, refcnt) -> Any: ...
def cfunc_t_refresh_func_ctext(self) -> Any: ...
def cfunc_t_release(self) -> Any: ...
def cfunc_t_remove_unused_labels(self) -> Any: ...
def cfunc_t_save_user_cmts(self) -> Any: ...
def cfunc_t_save_user_iflags(self) -> Any: ...
def cfunc_t_save_user_labels(self) -> Any: ...
def cfunc_t_save_user_numforms(self) -> Any: ...
def cfunc_t_save_user_unions(self) -> Any: ...
def cfunc_t_set_user_cmt(self, loc, cmt) -> Any: ...
def cfunc_t_set_user_iflags(self, loc, iflags) -> Any: ...
def cfunc_t_set_user_union_selection(self, ea, path) -> Any: ...
def cfunc_t_statebits_get(self) -> int: ...
def cfunc_t_statebits_set(self, statebits) -> Any: ...
def cfunc_t_swigregister(*args, **kwargs): ...
def cfunc_t_treeitems_get(self) -> ctree_items_t: ...
def cfunc_t_treeitems_set(self, treeitems) -> Any: ...
def cfunc_t_user_cmts_get(self) -> user_cmts_t: ...
def cfunc_t_user_cmts_set(self, user_cmts) -> Any: ...
def cfunc_t_user_iflags_get(self) -> user_iflags_t: ...
def cfunc_t_user_iflags_set(self, user_iflags) -> Any: ...
def cfunc_t_user_labels_get(self) -> user_labels_t: ...
def cfunc_t_user_labels_set(self, user_labels) -> Any: ...
def cfunc_t_user_unions_get(self) -> user_unions_t: ...
def cfunc_t_user_unions_set(self, user_unions) -> Any: ...
def cfunc_t_verify(self, aul, even_without_debugger) -> Any: ...
def cfuncptr_t___deref__(self) -> cfunc_t: ...
def cfuncptr_t___ptrval__(self) -> size_t: ...
def cfuncptr_t___ref__(self) -> cfunc_t: ...
def cfuncptr_t___str__(self) -> qstring: ...
def cfuncptr_t_argidx_get(self) -> intvec_t: ...
def cfuncptr_t_body_get(self) -> cinsn_t: ...
def cfuncptr_t_body_set(self, body) -> Any: ...
def cfuncptr_t_build_c_tree(self) -> Any: ...
def cfuncptr_t_del_orphan_cmts(self) -> int: ...
def cfuncptr_t_entry_ea_get(self) -> ea_t: ...
def cfuncptr_t_entry_ea_set(self, entry_ea) -> Any: ...
def cfuncptr_t_find_item_coords(self, item, px, py) -> bool: ...
def cfuncptr_t_find_label(self, label) -> citem_t: ...
def cfuncptr_t_gather_derefs(self, ci, udm=...) -> bool: ...
def cfuncptr_t_get_boundaries(self) -> boundaries_t: ...
def cfuncptr_t_get_eamap(self) -> eamap_t: ...
def cfuncptr_t_get_func_type(self, type) -> bool: ...
def cfuncptr_t_get_line_item(self, line, x, is_ctree_line, phead, pitem, ptail) -> bool: ...
def cfuncptr_t_get_lvars(self) -> lvars_t: ...
def cfuncptr_t_get_pseudocode(self) -> strvec_t: ...
def cfuncptr_t_get_stkoff_delta(self) -> sval_t: ...
def cfuncptr_t_get_user_cmt(*args, **kwargs): ...
def cfuncptr_t_get_user_iflags(self, loc) -> int32: ...
def cfuncptr_t_get_user_union_selection(self, ea, path) -> bool: ...
def cfuncptr_t_get_warnings(self) -> hexwarns_t: ...
def cfuncptr_t_has_orphan_cmts(self) -> bool: ...
def cfuncptr_t_hdrlines_get(self) -> int: ...
def cfuncptr_t_hdrlines_set(self, hdrlines) -> Any: ...
def cfuncptr_t_locked(self) -> bool: ...
def cfuncptr_t_maturity_get(self) -> ctree_maturity_t: ...
def cfuncptr_t_maturity_set(self, maturity) -> Any: ...
def cfuncptr_t_mba_get(self) -> mba_t: ...
def cfuncptr_t_mba_set(self, mba) -> Any: ...
def cfuncptr_t_numforms_get(self) -> user_numforms_t: ...
def cfuncptr_t_numforms_set(self, numforms) -> Any: ...
def cfuncptr_t_print_dcl(self) -> Any: ...
def cfuncptr_t_print_func(self, vp) -> Any: ...
def cfuncptr_t_refcnt_get(self) -> int: ...
def cfuncptr_t_refcnt_set(self, refcnt) -> Any: ...
def cfuncptr_t_refresh_func_ctext(self) -> Any: ...
def cfuncptr_t_release(self) -> Any: ...
def cfuncptr_t_remove_unused_labels(self) -> Any: ...
def cfuncptr_t_reset(self) -> Any: ...
def cfuncptr_t_save_user_cmts(self) -> Any: ...
def cfuncptr_t_save_user_iflags(self) -> Any: ...
def cfuncptr_t_save_user_labels(self) -> Any: ...
def cfuncptr_t_save_user_numforms(self) -> Any: ...
def cfuncptr_t_save_user_unions(self) -> Any: ...
def cfuncptr_t_set_user_cmt(self, loc, cmt) -> Any: ...
def cfuncptr_t_set_user_iflags(self, loc, iflags) -> Any: ...
def cfuncptr_t_set_user_union_selection(self, ea, path) -> Any: ...
def cfuncptr_t_statebits_get(self) -> int: ...
def cfuncptr_t_statebits_set(self, statebits) -> Any: ...
def cfuncptr_t_swiginit(*args, **kwargs): ...
def cfuncptr_t_swigregister(*args, **kwargs): ...
def cfuncptr_t_treeitems_get(self) -> ctree_items_t: ...
def cfuncptr_t_treeitems_set(self, treeitems) -> Any: ...
def cfuncptr_t_user_cmts_get(self) -> user_cmts_t: ...
def cfuncptr_t_user_cmts_set(self, user_cmts) -> Any: ...
def cfuncptr_t_user_iflags_get(self) -> user_iflags_t: ...
def cfuncptr_t_user_iflags_set(self, user_iflags) -> Any: ...
def cfuncptr_t_user_labels_get(self) -> user_labels_t: ...
def cfuncptr_t_user_labels_set(self, user_labels) -> Any: ...
def cfuncptr_t_user_unions_get(self) -> user_unions_t: ...
def cfuncptr_t_user_unions_set(self, user_unions) -> Any: ...
def cfuncptr_t_verify(self, aul, even_without_debugger) -> Any: ...
def cgoto_t___eq__(self, r) -> bool: ...
def cgoto_t___ge__(self, r) -> bool: ...
def cgoto_t___gt__(self, r) -> bool: ...
def cgoto_t___le__(self, r) -> bool: ...
def cgoto_t___lt__(self, r) -> bool: ...
def cgoto_t___ne__(self, r) -> bool: ...
def cgoto_t_compare(self, r) -> int: ...
def cgoto_t_label_num_get(self) -> int: ...
def cgoto_t_label_num_set(self, label_num) -> Any: ...
def cgoto_t_swiginit(*args, **kwargs): ...
def cgoto_t_swigregister(*args, **kwargs): ...
def chain_keeper_t_back(self) -> block_chains_t: ...
def chain_keeper_t_for_all_chains(self, cv, gca) -> int: ...
def chain_keeper_t_front(self) -> block_chains_t: ...
def chain_keeper_t_swiginit(*args, **kwargs): ...
def chain_keeper_t_swigregister(*args, **kwargs): ...
def chain_t___lt__(self, r) -> bool: ...
def chain_t__print(self) -> Any: ...
def chain_t_append_list(self, mba, list) -> Any: ...
def chain_t_clear_varnum(self) -> Any: ...
def chain_t_dstr(*args, **kwargs): ...
def chain_t_endoff(self) -> voff_t: ...
def chain_t_flags_get(self) -> uchar: ...
def chain_t_flags_set(self, flags) -> Any: ...
def chain_t_get_reg(self) -> mreg_t: ...
def chain_t_get_stkoff(self) -> sval_t: ...
def chain_t_includes(self, r) -> bool: ...
def chain_t_is_fake(self) -> bool: ...
def chain_t_is_inited(self) -> bool: ...
def chain_t_is_overlapped(self) -> bool: ...
def chain_t_is_passreg(self) -> bool: ...
def chain_t_is_reg(self) -> bool: ...
def chain_t_is_replaced(self) -> bool: ...
def chain_t_is_stkoff(self) -> bool: ...
def chain_t_is_term(self) -> bool: ...
def chain_t_key(self) -> voff_t: ...
def chain_t_overlap(self, r) -> bool: ...
def chain_t_set_inited(self, b) -> Any: ...
def chain_t_set_overlapped(self, b) -> Any: ...
def chain_t_set_replaced(self, b) -> Any: ...
def chain_t_set_term(self, b) -> Any: ...
def chain_t_set_value(self, r) -> Any: ...
def chain_t_swiginit(*args, **kwargs): ...
def chain_t_swigregister(*args, **kwargs): ...
def chain_t_varnum_get(self) -> int: ...
def chain_t_varnum_set(self, varnum) -> Any: ...
def chain_t_width_get(self) -> int: ...
def chain_t_width_set(self, width) -> Any: ...
def chain_visitor_t_parent_get(self) -> block_chains_t: ...
def chain_visitor_t_parent_set(self, parent) -> Any: ...
def chain_visitor_t_swiginit(*args, **kwargs): ...
def chain_visitor_t_swigregister(*args, **kwargs): ...
def chain_visitor_t_visit_chain(self, nblock, ch) -> int: ...
def change_hexrays_config(directive) -> bool: ...
def checkout_hexrays_license(silent) -> bool: ...
def cif_t___eq__(self, r) -> bool: ...
def cif_t___ge__(self, r) -> bool: ...
def cif_t___gt__(self, r) -> bool: ...
def cif_t___le__(self, r) -> bool: ...
def cif_t___lt__(self, r) -> bool: ...
def cif_t___ne__(self, r) -> bool: ...
def cif_t_assign(self, r) -> cif_t: ...
def cif_t_cleanup(self) -> Any: ...
def cif_t_compare(self, r) -> int: ...
def cif_t_ielse_get(self) -> cinsn_t: ...
def cif_t_ielse_set(self, ielse) -> Any: ...
def cif_t_ithen_get(self) -> cinsn_t: ...
def cif_t_ithen_set(self, ithen) -> Any: ...
def cif_t_swiginit(*args, **kwargs): ...
def cif_t_swigregister(*args, **kwargs): ...
def cinsn_list_t___eq__(self, x) -> bool: ...
def cinsn_list_t___getitem__(self, i) -> cinsn_t: ...
def cinsn_list_t___len__(self) -> size_t: ...
def cinsn_list_t___ne__(self, x) -> bool: ...
def cinsn_list_t___setitem__(self, i, v) -> Any: ...
@overload
def cinsn_list_t_back(self) -> cinsn_t: ...
@overload
def cinsn_list_t_back(self) -> cinsn_t: ...
def cinsn_list_t_begin(self) -> cinsn_list_t_iterator: ...
def cinsn_list_t_clear(self) -> Any: ...
def cinsn_list_t_empty(self) -> bool: ...
def cinsn_list_t_end(self) -> cinsn_list_t_iterator: ...
def cinsn_list_t_erase(self, p) -> Any: ...
@overload
def cinsn_list_t_front(self) -> cinsn_t: ...
@overload
def cinsn_list_t_front(self) -> cinsn_t: ...
@overload
def cinsn_list_t_insert(self, i, v) -> Any: ...
@overload
def cinsn_list_t_insert(self, p, x) -> cinsn_list_t_iterator: ...
def cinsn_list_t_iterator___eq__(self, x) -> bool: ...
def cinsn_list_t_iterator___ne__(self, x) -> bool: ...
def cinsn_list_t_iterator___next__(self) -> Any: ...
def cinsn_list_t_iterator_cur_get(self) -> cinsn_t: ...
def cinsn_list_t_iterator_swiginit(*args, **kwargs): ...
def cinsn_list_t_iterator_swigregister(*args, **kwargs): ...
def cinsn_list_t_pop_back(self) -> Any: ...
def cinsn_list_t_pop_front(self) -> Any: ...
@overload
def cinsn_list_t_push_back(self, x) -> Any: ...
@overload
def cinsn_list_t_push_back(self) -> cinsn_t: ...
def cinsn_list_t_push_front(self, x) -> Any: ...
def cinsn_list_t_rbegin(*args, **kwargs): ...
def cinsn_list_t_remove(self, v) -> bool: ...
def cinsn_list_t_rend(*args, **kwargs): ...
def cinsn_list_t_size(self) -> size_t: ...
def cinsn_list_t_swap(self, x) -> Any: ...
def cinsn_list_t_swiginit(*args, **kwargs): ...
def cinsn_list_t_swigregister(*args, **kwargs): ...
def cinsn_t___eq__(self, r) -> bool: ...
def cinsn_t___ge__(self, r) -> bool: ...
def cinsn_t___gt__(self, r) -> bool: ...
def cinsn_t___le__(self, r) -> bool: ...
def cinsn_t___lt__(self, r) -> bool: ...
def cinsn_t___ne__(self, r) -> bool: ...
def cinsn_t__deregister(self) -> Any: ...
def cinsn_t__get_casm(self) -> casm_t: ...
def cinsn_t__get_cblock(self) -> cblock_t: ...
def cinsn_t__get_cdo(self) -> cdo_t: ...
def cinsn_t__get_cexpr(self) -> cexpr_t: ...
def cinsn_t__get_cfor(self) -> cfor_t: ...
def cinsn_t__get_cgoto(self) -> cgoto_t: ...
def cinsn_t__get_cif(self) -> cif_t: ...
def cinsn_t__get_creturn(self) -> creturn_t: ...
def cinsn_t__get_cswitch(self) -> cswitch_t: ...
def cinsn_t__get_cwhile(self) -> cwhile_t: ...
def cinsn_t__print(self, indent, vp, use_curly=...) -> Any: ...
def cinsn_t__register(self) -> Any: ...
def cinsn_t__replace_by(self, r) -> Any: ...
def cinsn_t__set_casm(self, _v) -> Any: ...
def cinsn_t__set_cblock(self, _v) -> Any: ...
def cinsn_t__set_cdo(self, _v) -> Any: ...
def cinsn_t__set_cexpr(self, _v) -> Any: ...
def cinsn_t__set_cfor(self, _v) -> Any: ...
def cinsn_t__set_cgoto(self, _v) -> Any: ...
def cinsn_t__set_cif(self, _v) -> Any: ...
def cinsn_t__set_creturn(self, _v) -> Any: ...
def cinsn_t__set_cswitch(self, _v) -> Any: ...
def cinsn_t__set_cwhile(self, _v) -> Any: ...
def cinsn_t_assign(self, r) -> cinsn_t: ...
def cinsn_t_cleanup(self) -> Any: ...
def cinsn_t_collect_free_breaks(self, breaks) -> bool: ...
def cinsn_t_collect_free_continues(self, continues) -> bool: ...
def cinsn_t_compare(self, r) -> int: ...
def cinsn_t_contains_free_break(self) -> bool: ...
def cinsn_t_contains_free_continue(self) -> bool: ...
def cinsn_t_contains_insn(self, type, times=...) -> bool: ...
def cinsn_t_create_if(self, cnd) -> cif_t: ...
def cinsn_t_dstr(*args, **kwargs): ...
def cinsn_t_insn_is_epilog(insn) -> bool: ...
def cinsn_t_is_ordinary_flow(self) -> bool: ...
def cinsn_t_new_insn(self, insn_ea) -> cinsn_t: ...
def cinsn_t_print1(self, func) -> Any: ...
def cinsn_t_swap(self, r) -> Any: ...
def cinsn_t_swiginit(*args, **kwargs): ...
def cinsn_t_swigregister(*args, **kwargs): ...
def cinsn_t_zero(self) -> Any: ...
def cinsnptrvec_t___eq__(self, r) -> bool: ...
def cinsnptrvec_t___getitem__(self, i) -> cinsn_t: ...
def cinsnptrvec_t___len__(self) -> size_t: ...
def cinsnptrvec_t___ne__(self, r) -> bool: ...
def cinsnptrvec_t___setitem__(self, i, v) -> Any: ...
def cinsnptrvec_t__del(self, x) -> bool: ...
def cinsnptrvec_t_add_unique(self, x) -> bool: ...
def cinsnptrvec_t_at(self, _idx) -> cinsn_t: ...
def cinsnptrvec_t_begin(*args, **kwargs): ...
def cinsnptrvec_t_capacity(self) -> size_t: ...
def cinsnptrvec_t_clear(self) -> Any: ...
def cinsnptrvec_t_empty(self) -> bool: ...
def cinsnptrvec_t_end(*args, **kwargs): ...
def cinsnptrvec_t_erase(*args, **kwargs): ...
def cinsnptrvec_t_extract(*args, **kwargs): ...
def cinsnptrvec_t_find(*args, **kwargs): ...
def cinsnptrvec_t_has(self, x) -> bool: ...
def cinsnptrvec_t_inject(self, s, len) -> Any: ...
def cinsnptrvec_t_insert(*args, **kwargs): ...
def cinsnptrvec_t_pop_back(self) -> Any: ...
def cinsnptrvec_t_push_back(self, x) -> Any: ...
def cinsnptrvec_t_qclear(self) -> Any: ...
def cinsnptrvec_t_reserve(self, cnt) -> Any: ...
@overload
def cinsnptrvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def cinsnptrvec_t_resize(self, _newsize) -> Any: ...
def cinsnptrvec_t_size(self) -> size_t: ...
def cinsnptrvec_t_swap(self, r) -> Any: ...
def cinsnptrvec_t_swiginit(*args, **kwargs): ...
def cinsnptrvec_t_swigregister(*args, **kwargs): ...
def cinsnptrvec_t_truncate(self) -> Any: ...
def citem_cmt_t___str__(*args, **kwargs): ...
def citem_cmt_t_c_str(*args, **kwargs): ...
def citem_cmt_t_swiginit(*args, **kwargs): ...
def citem_cmt_t_swigregister(*args, **kwargs): ...
def citem_cmt_t_used_get(self) -> bool: ...
def citem_cmt_t_used_set(self, used) -> Any: ...
def citem_locator_t___eq__(self, r) -> bool: ...
def citem_locator_t___ge__(self, r) -> bool: ...
def citem_locator_t___gt__(self, r) -> bool: ...
def citem_locator_t___le__(self, r) -> bool: ...
def citem_locator_t___lt__(self, r) -> bool: ...
def citem_locator_t___ne__(self, r) -> bool: ...
def citem_locator_t_compare(self, r) -> int: ...
def citem_locator_t_ea_get(self) -> ea_t: ...
def citem_locator_t_ea_set(self, ea) -> Any: ...
def citem_locator_t_op_get(self) -> ctype_t: ...
def citem_locator_t_op_set(self, op) -> Any: ...
def citem_locator_t_swiginit(*args, **kwargs): ...
def citem_locator_t_swigregister(*args, **kwargs): ...
def citem_t___dbg_get_meminfo(self) -> qstring: ...
def citem_t___dbg_get_registered_kind(self) -> int: ...
def citem_t__get_op(self) -> ctype_t: ...
def citem_t__obj_id(*args, **kwargs): ...
def citem_t__set_op(self, v) -> Any: ...
def citem_t_cexpr_get(self) -> cexpr_t: ...
def citem_t_cinsn_get(self) -> cinsn_t: ...
def citem_t_contains_expr(self, e) -> bool: ...
def citem_t_contains_label(self) -> bool: ...
def citem_t_ea_get(self) -> ea_t: ...
def citem_t_ea_set(self, ea) -> Any: ...
def citem_t_find_closest_addr(self, _ea) -> citem_t: ...
@overload
def citem_t_find_parent_of(self, sitem) -> citem_t: ...
@overload
def citem_t_find_parent_of(self, item) -> citem_t: ...
def citem_t_index_get(self) -> int: ...
def citem_t_index_set(self, index) -> Any: ...
def citem_t_is_expr(self) -> bool: ...
def citem_t_label_num_get(self) -> int: ...
def citem_t_label_num_set(self, label_num) -> Any: ...
def citem_t_print1(self, func) -> Any: ...
def citem_t_swap(self, r) -> Any: ...
def citem_t_swiginit(*args, **kwargs): ...
def citem_t_swigregister(*args, **kwargs): ...
def clear_cached_cfuncs() -> Any: ...
def cloop_t_assign(self, r) -> cloop_t: ...
def cloop_t_body_get(self) -> cinsn_t: ...
def cloop_t_body_set(self, body) -> Any: ...
def cloop_t_cleanup(self) -> Any: ...
def cloop_t_swiginit(*args, **kwargs): ...
def cloop_t_swigregister(*args, **kwargs): ...
def close_hexrays_waitbox() -> Any: ...
def close_pseudocode(f) -> bool: ...
def cnumber_t___eq__(self, r) -> bool: ...
def cnumber_t___ge__(self, r) -> bool: ...
def cnumber_t___gt__(self, r) -> bool: ...
def cnumber_t___le__(self, r) -> bool: ...
def cnumber_t___lt__(self, r) -> bool: ...
def cnumber_t___ne__(self, r) -> bool: ...
def cnumber_t__print(self, type, parent=..., nice_stroff=...) -> Any: ...
def cnumber_t__value_get(self) -> uint64: ...
def cnumber_t__value_set(self, _value) -> Any: ...
def cnumber_t_assign(self, v, nbytes, sign) -> Any: ...
def cnumber_t_compare(self, r) -> int: ...
def cnumber_t_nf_get(self) -> number_format_t: ...
def cnumber_t_nf_set(self, nf) -> Any: ...
def cnumber_t_swiginit(*args, **kwargs): ...
def cnumber_t_swigregister(*args, **kwargs): ...
def cnumber_t_value(self, type) -> uint64: ...
def codegen_t_analyze_prolog(self, fc, reachable) -> merror_t: ...
@overload
def codegen_t_emit(self, code, width, l, r, d, offsize) -> minsn_t: ...
@overload
def codegen_t_emit(self, code, l, r, d) -> minsn_t: ...
def codegen_t_emit_micro_mvm(self, code, dtype, l, r, d, offsize) -> minsn_t: ...
def codegen_t_gen_micro(self) -> merror_t: ...
def codegen_t_ignore_micro_get(self) -> char: ...
def codegen_t_ignore_micro_set(self, ignore_micro) -> Any: ...
def codegen_t_ii_get(self) -> cdg_insn_iterator_t: ...
def codegen_t_ii_set(self, ii) -> Any: ...
def codegen_t_insn_get(*args, **kwargs): ...
def codegen_t_insn_set(self, insn) -> Any: ...
def codegen_t_load_effective_address(self, n, flags=...) -> mreg_t: ...
def codegen_t_load_operand(self, opnum, flags=...) -> mreg_t: ...
def codegen_t_mb_get(self) -> mblock_t: ...
def codegen_t_mb_set(self, mb) -> Any: ...
def codegen_t_mba_get(self) -> mba_t: ...
def codegen_t_mba_set(self, mba) -> Any: ...
def codegen_t_microgen_completed(self) -> Any: ...
def codegen_t_prepare_gen_micro(self) -> merror_t: ...
def codegen_t_store_operand(self, n, mop, flags=..., outins=...) -> bool: ...
def codegen_t_swigregister(*args, **kwargs): ...
def convert_to_user_call(udc, cdg) -> merror_t: ...
def create_cfunc(mba) -> cfuncptr_t: ...
def create_empty_mba(mbr, hf=...) -> mba_t: ...
def create_field_name(type, offset=...) -> qstring: ...
@overload
def create_typedef(name) -> tinfo_t: ...
@overload
def create_typedef(n) -> tinfo_t: ...
def creturn_t___eq__(self, r) -> bool: ...
def creturn_t___ge__(self, r) -> bool: ...
def creturn_t___gt__(self, r) -> bool: ...
def creturn_t___le__(self, r) -> bool: ...
def creturn_t___lt__(self, r) -> bool: ...
def creturn_t___ne__(self, r) -> bool: ...
def creturn_t_compare(self, r) -> int: ...
def creturn_t_swiginit(*args, **kwargs): ...
def creturn_t_swigregister(*args, **kwargs): ...
def cswitch_t___eq__(self, r) -> bool: ...
def cswitch_t___ge__(self, r) -> bool: ...
def cswitch_t___gt__(self, r) -> bool: ...
def cswitch_t___le__(self, r) -> bool: ...
def cswitch_t___lt__(self, r) -> bool: ...
def cswitch_t___ne__(self, r) -> bool: ...
def cswitch_t_cases_get(self) -> ccases_t: ...
def cswitch_t_cases_set(self, cases) -> Any: ...
def cswitch_t_compare(self, r) -> int: ...
def cswitch_t_mvnf_get(self) -> cnumber_t: ...
def cswitch_t_mvnf_set(self, mvnf) -> Any: ...
def cswitch_t_swiginit(*args, **kwargs): ...
def cswitch_t_swigregister(*args, **kwargs): ...
def ctext_position_t___eq__(self, r) -> bool: ...
def ctext_position_t___ge__(self, r) -> bool: ...
def ctext_position_t___gt__(self, r) -> bool: ...
def ctext_position_t___le__(self, r) -> bool: ...
def ctext_position_t___lt__(self, r) -> bool: ...
def ctext_position_t___ne__(self, r) -> bool: ...
def ctext_position_t_compare(self, r) -> int: ...
def ctext_position_t_in_ctree(self, hdrlines) -> bool: ...
def ctext_position_t_lnnum_get(self) -> int: ...
def ctext_position_t_lnnum_set(self, lnnum) -> Any: ...
def ctext_position_t_swiginit(*args, **kwargs): ...
def ctext_position_t_swigregister(*args, **kwargs): ...
def ctext_position_t_x_get(self) -> int: ...
def ctext_position_t_x_set(self, x) -> Any: ...
def ctext_position_t_y_get(self) -> int: ...
def ctext_position_t_y_set(self, y) -> Any: ...
def ctree_anchor_t_get_index(self) -> int: ...
def ctree_anchor_t_get_itp(self) -> item_preciser_t: ...
def ctree_anchor_t_is_blkcmt_anchor(self) -> bool: ...
def ctree_anchor_t_is_citem_anchor(self) -> bool: ...
def ctree_anchor_t_is_itp_anchor(self) -> bool: ...
def ctree_anchor_t_is_lvar_anchor(self) -> bool: ...
def ctree_anchor_t_is_valid_anchor(self) -> bool: ...
def ctree_anchor_t_swiginit(*args, **kwargs): ...
def ctree_anchor_t_swigregister(*args, **kwargs): ...
def ctree_anchor_t_value_get(self) -> uval_t: ...
def ctree_anchor_t_value_set(self, value) -> Any: ...
def ctree_item_t__get_e(self) -> cexpr_t: ...
def ctree_item_t__get_f(self) -> cfunc_t: ...
def ctree_item_t__get_i(self) -> cinsn_t: ...
def ctree_item_t__get_it(self) -> citem_t: ...
def ctree_item_t__get_l(self) -> lvar_t: ...
def ctree_item_t__print(self) -> Any: ...
def ctree_item_t_citype_get(self) -> cursor_item_type_t: ...
def ctree_item_t_citype_set(self, citype) -> Any: ...
def ctree_item_t_dstr(*args, **kwargs): ...
def ctree_item_t_e_get(self) -> cexpr_t: ...
def ctree_item_t_e_set(self, e) -> Any: ...
def ctree_item_t_f_get(self) -> cfunc_t: ...
def ctree_item_t_f_set(self, f) -> Any: ...
def ctree_item_t_get_ea(self) -> ea_t: ...
def ctree_item_t_get_edm(self, parent) -> int: ...
def ctree_item_t_get_label_num(self, gln_flags) -> int: ...
def ctree_item_t_get_lvar(self) -> lvar_t: ...
def ctree_item_t_get_memptr(*args, **kwargs): ...
def ctree_item_t_get_udm(self, udm=..., parent=..., p_offset=...) -> int: ...
def ctree_item_t_i_get(self) -> cinsn_t: ...
def ctree_item_t_i_set(self, i) -> Any: ...
def ctree_item_t_is_citem(self) -> bool: ...
def ctree_item_t_it_get(self) -> citem_t: ...
def ctree_item_t_it_set(self, it) -> Any: ...
def ctree_item_t_l_get(self) -> lvar_t: ...
def ctree_item_t_l_set(self, l) -> Any: ...
def ctree_item_t_loc_get(self) -> treeloc_t: ...
def ctree_item_t_swiginit(*args, **kwargs): ...
def ctree_item_t_swigregister(*args, **kwargs): ...
def ctree_items_t___eq__(self, r) -> bool: ...
def ctree_items_t___getitem__(self, i) -> citem_t: ...
def ctree_items_t___len__(self) -> size_t: ...
def ctree_items_t___ne__(self, r) -> bool: ...
def ctree_items_t___setitem__(self, i, v) -> Any: ...
def ctree_items_t__del(self, x) -> bool: ...
def ctree_items_t_add_unique(self, x) -> bool: ...
def ctree_items_t_at(self, _idx) -> citem_t: ...
def ctree_items_t_begin(*args, **kwargs): ...
def ctree_items_t_capacity(self) -> size_t: ...
def ctree_items_t_clear(self) -> Any: ...
def ctree_items_t_empty(self) -> bool: ...
def ctree_items_t_end(*args, **kwargs): ...
def ctree_items_t_erase(*args, **kwargs): ...
def ctree_items_t_extract(*args, **kwargs): ...
def ctree_items_t_find(*args, **kwargs): ...
def ctree_items_t_has(self, x) -> bool: ...
def ctree_items_t_inject(self, s, len) -> Any: ...
def ctree_items_t_insert(*args, **kwargs): ...
def ctree_items_t_pop_back(self) -> Any: ...
def ctree_items_t_push_back(self, x) -> Any: ...
def ctree_items_t_qclear(self) -> Any: ...
def ctree_items_t_reserve(self, cnt) -> Any: ...
@overload
def ctree_items_t_resize(self, _newsize, x) -> Any: ...
@overload
def ctree_items_t_resize(self, _newsize) -> Any: ...
def ctree_items_t_size(self) -> size_t: ...
def ctree_items_t_swap(self, r) -> Any: ...
def ctree_items_t_swiginit(*args, **kwargs): ...
def ctree_items_t_swigregister(*args, **kwargs): ...
def ctree_items_t_truncate(self) -> Any: ...
def ctree_parentee_t_get_block(self) -> cblock_t: ...
def ctree_parentee_t_recalc_parent_types(self) -> bool: ...
def ctree_parentee_t_swiginit(*args, **kwargs): ...
def ctree_parentee_t_swigregister(*args, **kwargs): ...
def ctree_visitor_t_apply_to(self, item, parent) -> int: ...
def ctree_visitor_t_apply_to_exprs(self, item, parent) -> int: ...
def ctree_visitor_t_clr_prune(self) -> Any: ...
def ctree_visitor_t_clr_restart(self) -> Any: ...
def ctree_visitor_t_cv_flags_get(self) -> int: ...
def ctree_visitor_t_cv_flags_set(self, cv_flags) -> Any: ...
def ctree_visitor_t_is_postorder(self) -> bool: ...
def ctree_visitor_t_leave_expr(self, arg0) -> int: ...
def ctree_visitor_t_leave_insn(self, arg0) -> int: ...
def ctree_visitor_t_maintain_parents(self) -> bool: ...
def ctree_visitor_t_must_prune(self) -> bool: ...
def ctree_visitor_t_must_restart(self) -> bool: ...
def ctree_visitor_t_only_insns(self) -> bool: ...
def ctree_visitor_t_parent_expr(self) -> cexpr_t: ...
def ctree_visitor_t_parent_insn(self) -> cinsn_t: ...
def ctree_visitor_t_parents_get(self) -> ctree_items_t: ...
def ctree_visitor_t_parents_set(self, parents) -> Any: ...
def ctree_visitor_t_prune_now(self) -> Any: ...
def ctree_visitor_t_set_restart(self) -> Any: ...
def ctree_visitor_t_swiginit(*args, **kwargs): ...
def ctree_visitor_t_swigregister(*args, **kwargs): ...
def ctree_visitor_t_visit_expr(self, arg0) -> int: ...
def ctree_visitor_t_visit_insn(self, arg0) -> int: ...
def cwhile_t___eq__(self, r) -> bool: ...
def cwhile_t___ge__(self, r) -> bool: ...
def cwhile_t___gt__(self, r) -> bool: ...
def cwhile_t___le__(self, r) -> bool: ...
def cwhile_t___lt__(self, r) -> bool: ...
def cwhile_t___ne__(self, r) -> bool: ...
def cwhile_t_compare(self, r) -> int: ...
def cwhile_t_swiginit(*args, **kwargs): ...
def cwhile_t_swigregister(*args, **kwargs): ...
def debug_hexrays_ctree(level, msg) -> Any: ...
def decompile(mbr, hf=..., decomp_flags=...) -> cfuncptr_t: ...
def decompile_func(pfn, hf=..., decomp_flags=...) -> cfuncptr_t: ...
def decompile_many(outfile, funcaddrs, flags) -> bool: ...
def delete_Hexrays_Hooks(self) -> Any: ...
def delete_array_of_bitsets(self) -> Any: ...
def delete_array_of_ivlsets(self) -> Any: ...
def delete_bit_bound_t(self) -> Any: ...
def delete_bitset_t(self) -> Any: ...
def delete_block_chains_iterator_t(self) -> Any: ...
def delete_block_chains_t(self) -> Any: ...
def delete_block_chains_vec_t(self) -> Any: ...
def delete_boundaries_iterator_t(self) -> Any: ...
def delete_boundaries_t(self) -> Any: ...
def delete_carg_t(self) -> Any: ...
def delete_carglist_t(self) -> Any: ...
def delete_casm_t(self) -> Any: ...
def delete_cblock_t(self) -> Any: ...
def delete_ccase_t(self) -> Any: ...
def delete_ccases_t(self) -> Any: ...
def delete_cdg_insn_iterator_t(self) -> Any: ...
def delete_cdo_t(self) -> Any: ...
def delete_ceinsn_t(self) -> Any: ...
def delete_cexpr_t(self) -> Any: ...
def delete_cfor_t(self) -> Any: ...
def delete_cfunc_parentee_t(self) -> Any: ...
def delete_cfunc_t(self) -> Any: ...
def delete_cfuncptr_t(self) -> Any: ...
def delete_cgoto_t(self) -> Any: ...
def delete_chain_keeper_t(self) -> Any: ...
def delete_chain_t(self) -> Any: ...
def delete_chain_visitor_t(self) -> Any: ...
def delete_cif_t(self) -> Any: ...
def delete_cinsn_list_t(self) -> Any: ...
def delete_cinsn_list_t_iterator(self) -> Any: ...
def delete_cinsn_t(self) -> Any: ...
def delete_cinsnptrvec_t(self) -> Any: ...
def delete_citem_cmt_t(self) -> Any: ...
def delete_citem_locator_t(self) -> Any: ...
def delete_citem_t(self) -> Any: ...
def delete_cloop_t(self) -> Any: ...
def delete_cnumber_t(self) -> Any: ...
def delete_codegen_t(self) -> Any: ...
def delete_creturn_t(self) -> Any: ...
def delete_cswitch_t(self) -> Any: ...
def delete_ctext_position_t(self) -> Any: ...
def delete_ctree_anchor_t(self) -> Any: ...
def delete_ctree_item_t(self) -> Any: ...
def delete_ctree_items_t(self) -> Any: ...
def delete_ctree_parentee_t(self) -> Any: ...
def delete_ctree_visitor_t(self) -> Any: ...
def delete_cwhile_t(self) -> Any: ...
def delete_eamap_iterator_t(self) -> Any: ...
def delete_eamap_t(self) -> Any: ...
def delete_fnumber_t(self) -> Any: ...
def delete_gco_info_t(self) -> Any: ...
def delete_graph_chains_t(self) -> Any: ...
def delete_hexrays_failure_t(self) -> Any: ...
def delete_hexwarn_t(self) -> Any: ...
def delete_hexwarns_t(self) -> Any: ...
def delete_history_item_t(self) -> Any: ...
def delete_history_t(self) -> Any: ...
def delete_iterator(self) -> Any: ...
def delete_ivl_t(self) -> Any: ...
def delete_ivl_with_name_t(self) -> Any: ...
def delete_ivlset_t(self) -> Any: ...
def delete_lvar_locator_t(self) -> Any: ...
def delete_lvar_mapping_iterator_t(self) -> Any: ...
def delete_lvar_mapping_t(self) -> Any: ...
def delete_lvar_ref_t(self) -> Any: ...
def delete_lvar_saved_info_t(self) -> Any: ...
def delete_lvar_saved_infos_t(self) -> Any: ...
def delete_lvar_t(self) -> Any: ...
def delete_lvar_uservec_t(self) -> Any: ...
def delete_lvars_t(self) -> Any: ...
def delete_mba_range_iterator_t(self) -> Any: ...
def delete_mba_ranges_t(self) -> Any: ...
def delete_mba_t(self) -> Any: ...
def delete_mblock_t(self) -> Any: ...
def delete_mcallarg_t(self) -> Any: ...
def delete_mcallargs_t(self) -> Any: ...
def delete_mcallinfo_t(self) -> Any: ...
def delete_mcases_t(self) -> Any: ...
def delete_microcode_filter_t(self) -> Any: ...
def delete_minsn_t(self) -> Any: ...
def delete_minsn_visitor_t(self) -> Any: ...
def delete_mlist_mop_visitor_t(self) -> Any: ...
def delete_mlist_t(self) -> Any: ...
def delete_mnumber_t(self) -> Any: ...
def delete_mop_addr_t(self) -> Any: ...
def delete_mop_pair_t(self) -> Any: ...
def delete_mop_t(self) -> Any: ...
def delete_mop_visitor_t(self) -> Any: ...
def delete_mopvec_t(self) -> Any: ...
def delete_number_format_t(self) -> Any: ...
def delete_op_parent_info_t(self) -> Any: ...
def delete_operand_locator_t(self) -> Any: ...
def delete_optblock_t(self) -> Any: ...
def delete_optinsn_t(self) -> Any: ...
def delete_qvector_carg_t(self) -> Any: ...
def delete_qvector_ccase_t(self) -> Any: ...
def delete_qvector_history_t(self) -> Any: ...
def delete_qvector_lvar_t(self) -> Any: ...
def delete_rlist_t(self) -> Any: ...
def delete_scif_t(self) -> Any: ...
def delete_scif_visitor_t(self) -> Any: ...
def delete_stkvar_ref_t(self) -> Any: ...
def delete_treeloc_t(self) -> Any: ...
def delete_udc_filter_t(self) -> Any: ...
def delete_udcall_map_iterator_t(self) -> Any: ...
def delete_udcall_t(self) -> Any: ...
def delete_ui_stroff_applicator_t(self) -> Any: ...
def delete_ui_stroff_op_t(self) -> Any: ...
def delete_ui_stroff_ops_t(self) -> Any: ...
def delete_user_cmts_iterator_t(self) -> Any: ...
def delete_user_cmts_t(self) -> Any: ...
def delete_user_iflags_iterator_t(self) -> Any: ...
def delete_user_iflags_t(self) -> Any: ...
def delete_user_labels_iterator_t(self) -> Any: ...
def delete_user_labels_t(self) -> Any: ...
def delete_user_lvar_modifier_t(self) -> Any: ...
def delete_user_numforms_iterator_t(self) -> Any: ...
def delete_user_numforms_t(self) -> Any: ...
def delete_user_unions_iterator_t(self) -> Any: ...
def delete_user_unions_t(self) -> Any: ...
def delete_uval_ivl_ivlset_t(self) -> Any: ...
def delete_uval_ivl_t(self) -> Any: ...
def delete_valrng_t(self) -> Any: ...
def delete_var_ref_t(self) -> Any: ...
def delete_vc_printer_t(self) -> Any: ...
def delete_vd_failure_t(self) -> Any: ...
def delete_vd_interr_t(self) -> Any: ...
def delete_vd_printer_t(self) -> Any: ...
def delete_vdloc_t(self) -> Any: ...
def delete_vdui_t(self) -> Any: ...
def delete_vivl_t(self) -> Any: ...
def delete_voff_t(self) -> Any: ...
def disown_Hexrays_Hooks(*args, **kwargs): ...
def disown_cfunc_parentee_t(*args, **kwargs): ...
def disown_chain_visitor_t(*args, **kwargs): ...
def disown_ctree_parentee_t(*args, **kwargs): ...
def disown_ctree_visitor_t(*args, **kwargs): ...
def disown_microcode_filter_t(*args, **kwargs): ...
def disown_minsn_visitor_t(*args, **kwargs): ...
def disown_mlist_mop_visitor_t(*args, **kwargs): ...
def disown_mop_visitor_t(*args, **kwargs): ...
def disown_optblock_t(*args, **kwargs): ...
def disown_optinsn_t(*args, **kwargs): ...
def disown_scif_visitor_t(*args, **kwargs): ...
def disown_udc_filter_t(*args, **kwargs): ...
def disown_ui_stroff_applicator_t(*args, **kwargs): ...
def disown_user_lvar_modifier_t(*args, **kwargs): ...
def disown_vc_printer_t(*args, **kwargs): ...
def disown_vd_printer_t(*args, **kwargs): ...
def dstr(*args, **kwargs): ...
def dummy_ptrtype(ptrsize, isfp) -> tinfo_t: ...
def eamap_begin(map) -> eamap_iterator_t: ...
def eamap_clear(map) -> Any: ...
def eamap_end(map) -> eamap_iterator_t: ...
def eamap_erase(map, p) -> Any: ...
def eamap_find(map, key) -> eamap_iterator_t: ...
def eamap_first(*args, **kwargs): ...
def eamap_free(map) -> Any: ...
def eamap_insert(map, key, val) -> eamap_iterator_t: ...
def eamap_iterator_t___eq__(self, p) -> bool: ...
def eamap_iterator_t___ne__(self, p) -> bool: ...
def eamap_iterator_t_swiginit(*args, **kwargs): ...
def eamap_iterator_t_swigregister(*args, **kwargs): ...
def eamap_iterator_t_x_get(self) -> iterator_word: ...
def eamap_iterator_t_x_set(self, x) -> Any: ...
def eamap_new() -> eamap_t: ...
def eamap_next(p) -> eamap_iterator_t: ...
def eamap_prev(p) -> eamap_iterator_t: ...
def eamap_second(p) -> cinsnptrvec_t: ...
def eamap_size(map) -> size_t: ...
def eamap_t_at(self, _Keyval) -> cinsnptrvec_t: ...
def eamap_t_size(self) -> size_t: ...
def eamap_t_swiginit(*args, **kwargs): ...
def eamap_t_swigregister(*args, **kwargs): ...
def fnumber_t___eq__(self, r) -> bool: ...
def fnumber_t___ge__(self, r) -> bool: ...
def fnumber_t___gt__(self, r) -> bool: ...
def fnumber_t___le__(self, r) -> bool: ...
def fnumber_t___lt__(self, r) -> bool: ...
def fnumber_t___ne__(self, r) -> bool: ...
def fnumber_t__print(self) -> Any: ...
def fnumber_t_compare(self, r) -> int: ...
def fnumber_t_dereference_const_uint16(*args, **kwargs): ...
def fnumber_t_dereference_uint16(*args, **kwargs): ...
def fnumber_t_fnum_get(self) -> fpvalue_t: ...
def fnumber_t_fnum_set(self, fnum) -> Any: ...
def fnumber_t_nbytes_get(self) -> int: ...
def fnumber_t_nbytes_set(self, nbytes) -> Any: ...
def fnumber_t_swiginit(*args, **kwargs): ...
def fnumber_t_swigregister(*args, **kwargs): ...
def gco_info_t_append_to_list(self, list, mba) -> bool: ...
def gco_info_t_cvt_to_ivl(self) -> vivl_t: ...
def gco_info_t_flags_get(self) -> int: ...
def gco_info_t_flags_set(self, flags) -> Any: ...
def gco_info_t_is_def(self) -> bool: ...
def gco_info_t_is_reg(self) -> bool: ...
def gco_info_t_is_use(self) -> bool: ...
def gco_info_t_name_get(*args, **kwargs): ...
def gco_info_t_name_set(self, name) -> Any: ...
def gco_info_t_regnum_get(self) -> int: ...
def gco_info_t_regnum_set(self, regnum) -> Any: ...
def gco_info_t_size_get(self) -> int: ...
def gco_info_t_size_set(self, size) -> Any: ...
def gco_info_t_stkoff_get(self) -> sval_t: ...
def gco_info_t_stkoff_set(self, stkoff) -> Any: ...
def gco_info_t_swiginit(*args, **kwargs): ...
def gco_info_t_swigregister(*args, **kwargs): ...
def gen_microcode(mbr, hf=..., retlist=..., decomp_flags=..., reqmat=...) -> mba_t: ...
def get_ctype_name(*args, **kwargs): ...
def get_current_operand(out) -> bool: ...
def get_float_type(width) -> tinfo_t: ...
def get_hexrays_version(*args, **kwargs): ...
def get_int_type_by_width_and_sign(srcwidth, sign) -> tinfo_t: ...
def get_member_type(mptr, type) -> bool: ...
def get_merror_desc(code, mba) -> ea_t: ...
def get_mreg_name(reg, width, ud=...) -> int: ...
def get_op_signness(op) -> type_sign_t: ...
def get_signed_mcode(code) -> mcode_t: ...
def get_temp_regs() -> mlist_t: ...
def get_type(id, tif, guess) -> bool: ...
def get_unk_type(size) -> tinfo_t: ...
def get_unsigned_mcode(code) -> mcode_t: ...
def get_widget_vdui(f) -> vdui_t: ...
def getb_reginsn(ins) -> minsn_t: ...
def getf_reginsn(ins) -> minsn_t: ...
def graph_chains_t_acquire(self) -> Any: ...
def graph_chains_t_for_all_chains(self, cv, gca_flags) -> int: ...
def graph_chains_t_is_locked(self) -> bool: ...
def graph_chains_t_release(self) -> Any: ...
def graph_chains_t_swap(self, r) -> Any: ...
def graph_chains_t_swiginit(*args, **kwargs): ...
def graph_chains_t_swigregister(*args, **kwargs): ...
def has_cached_cfunc(ea) -> bool: ...
def has_mcode_seloff(op) -> bool: ...
def hexrays_alloc(*args, **kwargs): ...
def hexrays_failure_t_code_get(self) -> merror_t: ...
def hexrays_failure_t_code_set(self, code) -> Any: ...
def hexrays_failure_t_desc(self) -> qstring: ...
def hexrays_failure_t_errea_get(self) -> ea_t: ...
def hexrays_failure_t_errea_set(self, errea) -> Any: ...
def hexrays_failure_t_str_get(*args, **kwargs): ...
def hexrays_failure_t_str_set(self, str) -> Any: ...
def hexrays_failure_t_swiginit(*args, **kwargs): ...
def hexrays_failure_t_swigregister(*args, **kwargs): ...
def hexrays_free(ptr) -> Any: ...
def hexwarn_t___eq__(self, r) -> bool: ...
def hexwarn_t___ge__(self, r) -> bool: ...
def hexwarn_t___gt__(self, r) -> bool: ...
def hexwarn_t___le__(self, r) -> bool: ...
def hexwarn_t___lt__(self, r) -> bool: ...
def hexwarn_t___ne__(self, r) -> bool: ...
def hexwarn_t_compare(self, r) -> int: ...
def hexwarn_t_ea_get(self) -> ea_t: ...
def hexwarn_t_ea_set(self, ea) -> Any: ...
def hexwarn_t_id_get(self) -> warnid_t: ...
def hexwarn_t_id_set(self, id) -> Any: ...
def hexwarn_t_swiginit(*args, **kwargs): ...
def hexwarn_t_swigregister(*args, **kwargs): ...
def hexwarn_t_text_get(*args, **kwargs): ...
def hexwarn_t_text_set(self, text) -> Any: ...
def hexwarns_t___eq__(self, r) -> bool: ...
def hexwarns_t___getitem__(self, i) -> hexwarn_t: ...
def hexwarns_t___len__(self) -> size_t: ...
def hexwarns_t___ne__(self, r) -> bool: ...
def hexwarns_t___setitem__(self, i, v) -> Any: ...
def hexwarns_t__del(self, x) -> bool: ...
def hexwarns_t_add_unique(self, x) -> bool: ...
def hexwarns_t_at(self, _idx) -> hexwarn_t: ...
@overload
def hexwarns_t_begin(self) -> hexwarn_t: ...
@overload
def hexwarns_t_begin(self) -> hexwarn_t: ...
def hexwarns_t_capacity(self) -> size_t: ...
def hexwarns_t_clear(self) -> Any: ...
def hexwarns_t_empty(self) -> bool: ...
@overload
def hexwarns_t_end(self) -> hexwarn_t: ...
@overload
def hexwarns_t_end(self) -> hexwarn_t: ...
@overload
def hexwarns_t_erase(self, it) -> hexwarn_t: ...
@overload
def hexwarns_t_erase(self, first, last) -> hexwarn_t: ...
def hexwarns_t_extract(self) -> hexwarn_t: ...
@overload
def hexwarns_t_find(self, x) -> hexwarn_t: ...
@overload
def hexwarns_t_find(self, x) -> hexwarn_t: ...
def hexwarns_t_grow(self, x=...) -> Any: ...
def hexwarns_t_has(self, x) -> bool: ...
def hexwarns_t_inject(self, s, len) -> Any: ...
def hexwarns_t_insert(self, it, x) -> hexwarn_t: ...
def hexwarns_t_pop_back(self) -> Any: ...
@overload
def hexwarns_t_push_back(self, x) -> Any: ...
@overload
def hexwarns_t_push_back(self) -> hexwarn_t: ...
def hexwarns_t_qclear(self) -> Any: ...
def hexwarns_t_reserve(self, cnt) -> Any: ...
@overload
def hexwarns_t_resize(self, _newsize, x) -> Any: ...
@overload
def hexwarns_t_resize(self, _newsize) -> Any: ...
def hexwarns_t_size(self) -> size_t: ...
def hexwarns_t_swap(self, r) -> Any: ...
def hexwarns_t_swiginit(*args, **kwargs): ...
def hexwarns_t_swigregister(*args, **kwargs): ...
def hexwarns_t_truncate(self) -> Any: ...
def history_item_t_ea_get(self) -> ea_t: ...
def history_item_t_ea_set(self, ea) -> Any: ...
def history_item_t_end_get(self) -> ea_t: ...
def history_item_t_end_set(self, end) -> Any: ...
def history_item_t_swiginit(*args, **kwargs): ...
def history_item_t_swigregister(*args, **kwargs): ...
def history_t_pop(self) -> history_item_t: ...
def history_t_push(self, v) -> Any: ...
def history_t_swiginit(*args, **kwargs): ...
def history_t_swigregister(*args, **kwargs): ...
@overload
def history_t_top(self) -> history_item_t: ...
@overload
def history_t_top(self) -> history_item_t: ...
def init_hexrays_plugin(flags=...) -> bool: ...
def install_microcode_filter(filter, install=...) -> bool: ...
def is_additive(op) -> bool: ...
def is_assignment(op) -> bool: ...
def is_binary(op) -> bool: ...
def is_bitop(op) -> bool: ...
def is_bool_type(type) -> bool: ...
def is_break_consumer(op) -> bool: ...
def is_commutative(op) -> bool: ...
def is_inplace_def(type) -> bool: ...
def is_kreg(r) -> bool: ...
def is_logical(op) -> bool: ...
def is_loop(op) -> bool: ...
def is_lvalue(op) -> bool: ...
def is_may_access(maymust) -> bool: ...
def is_mcode_addsub(mcode) -> bool: ...
def is_mcode_call(mcode) -> bool: ...
def is_mcode_commutative(mcode) -> bool: ...
def is_mcode_convertible_to_jmp(mcode) -> bool: ...
def is_mcode_convertible_to_set(mcode) -> bool: ...
def is_mcode_divmod(op) -> bool: ...
def is_mcode_fpu(mcode) -> bool: ...
def is_mcode_j1(mcode) -> bool: ...
def is_mcode_jcond(mcode) -> bool: ...
def is_mcode_propagatable(mcode) -> bool: ...
def is_mcode_set(mcode) -> bool: ...
def is_mcode_set1(mcode) -> bool: ...
def is_mcode_shift(mcode) -> bool: ...
def is_mcode_xdsu(mcode) -> bool: ...
def is_multiplicative(op) -> bool: ...
def is_nonbool_type(type) -> bool: ...
def is_paf(t) -> bool: ...
def is_prepost(op) -> bool: ...
def is_ptr_or_array(t) -> bool: ...
def is_relational(op) -> bool: ...
def is_signed_mcode(code) -> bool: ...
def is_small_udt(tif) -> bool: ...
def is_type_correct(ptr) -> bool: ...
def is_unary(op) -> bool: ...
def is_unsigned_mcode(code) -> bool: ...
def iterator___eq__(self, n) -> bool: ...
def iterator___ne__(self, n) -> bool: ...
def iterator___ref__(self) -> int: ...
def iterator_swiginit(*args, **kwargs): ...
def iterator_swigregister(*args, **kwargs): ...
def ivl_t___eq__(self, r) -> bool: ...
def ivl_t___ge__(self, r) -> bool: ...
def ivl_t___gt__(self, r) -> bool: ...
def ivl_t___le__(self, r) -> bool: ...
def ivl_t___lt__(self, r) -> bool: ...
def ivl_t___ne__(self, r) -> bool: ...
def ivl_t_clear(self) -> Any: ...
def ivl_t_compare(self, r) -> int: ...
def ivl_t_contains(self, off2) -> bool: ...
def ivl_t_dstr(*args, **kwargs): ...
def ivl_t_empty(self) -> bool: ...
def ivl_t_extend_to_cover(self, r) -> bool: ...
def ivl_t_includes(self, ivl) -> bool: ...
def ivl_t_intersect(self, r) -> Any: ...
def ivl_t_overlap(self, ivl) -> bool: ...
def ivl_t_swiginit(*args, **kwargs): ...
def ivl_t_swigregister(*args, **kwargs): ...
def ivl_with_name_t_ivl_get(self) -> ivl_t: ...
def ivl_with_name_t_ivl_set(self, ivl) -> Any: ...
def ivl_with_name_t_part_get(*args, **kwargs): ...
def ivl_with_name_t_part_set(self, part) -> Any: ...
def ivl_with_name_t_swiginit(*args, **kwargs): ...
def ivl_with_name_t_swigregister(*args, **kwargs): ...
def ivl_with_name_t_whole_get(*args, **kwargs): ...
def ivl_with_name_t_whole_set(self, whole) -> Any: ...
def ivlset_t___eq__(self, r) -> bool: ...
def ivlset_t___ge__(self, r) -> bool: ...
def ivlset_t___gt__(self, r) -> bool: ...
def ivlset_t___le__(self, r) -> bool: ...
def ivlset_t___lt__(self, r) -> bool: ...
def ivlset_t___ne__(self, r) -> bool: ...
def ivlset_t__print(self) -> Any: ...
@overload
def ivlset_t_add(self, ivl) -> bool: ...
@overload
def ivlset_t_add(self, ea, size) -> bool: ...
@overload
def ivlset_t_add(self, ivs) -> bool: ...
def ivlset_t_addmasked(self, ivs, mask) -> bool: ...
def ivlset_t_compare(self, r) -> int: ...
def ivlset_t_contains(self, off) -> bool: ...
def ivlset_t_count(self) -> asize_t: ...
def ivlset_t_dstr(*args, **kwargs): ...
@overload
def ivlset_t_has_common(self, ivl, strict=...) -> bool: ...
@overload
def ivlset_t_has_common(self, ivs) -> bool: ...
def ivlset_t_includes(self, ivs) -> bool: ...
def ivlset_t_intersect(self, ivs) -> bool: ...
@overload
def ivlset_t_sub(self, ivl) -> bool: ...
@overload
def ivlset_t_sub(self, ea, size) -> bool: ...
@overload
def ivlset_t_sub(self, ivs) -> bool: ...
def ivlset_t_swiginit(*args, **kwargs): ...
def ivlset_t_swigregister(*args, **kwargs): ...
def jcnd2set(code) -> mcode_t: ...
def lexcompare(a, b) -> int: ...
def locate_lvar(out, func_ea, varname) -> bool: ...
def lvar_locator_t___eq__(self, r) -> bool: ...
def lvar_locator_t___ge__(self, r) -> bool: ...
def lvar_locator_t___gt__(self, r) -> bool: ...
def lvar_locator_t___le__(self, r) -> bool: ...
def lvar_locator_t___lt__(self, r) -> bool: ...
def lvar_locator_t___ne__(self, r) -> bool: ...
def lvar_locator_t_compare(self, r) -> int: ...
def lvar_locator_t_defea_get(self) -> ea_t: ...
def lvar_locator_t_defea_set(self, defea) -> Any: ...
def lvar_locator_t_get_reg1(self) -> mreg_t: ...
def lvar_locator_t_get_reg2(self) -> mreg_t: ...
@overload
def lvar_locator_t_get_scattered(self) -> scattered_aloc_t: ...
@overload
def lvar_locator_t_get_scattered(self) -> scattered_aloc_t: ...
def lvar_locator_t_get_stkoff(self) -> sval_t: ...
def lvar_locator_t_is_reg1(self) -> bool: ...
def lvar_locator_t_is_reg2(self) -> bool: ...
def lvar_locator_t_is_reg_var(self) -> bool: ...
def lvar_locator_t_is_scattered(self) -> bool: ...
def lvar_locator_t_is_stk_var(self) -> bool: ...
def lvar_locator_t_location_get(self) -> vdloc_t: ...
def lvar_locator_t_location_set(self, location) -> Any: ...
def lvar_locator_t_swiginit(*args, **kwargs): ...
def lvar_locator_t_swigregister(*args, **kwargs): ...
def lvar_mapping_begin(map) -> lvar_mapping_iterator_t: ...
def lvar_mapping_clear(map) -> Any: ...
def lvar_mapping_end(map) -> lvar_mapping_iterator_t: ...
def lvar_mapping_erase(map, p) -> Any: ...
def lvar_mapping_find(map, key) -> lvar_mapping_iterator_t: ...
def lvar_mapping_first(p) -> lvar_locator_t: ...
def lvar_mapping_free(map) -> Any: ...
def lvar_mapping_insert(map, key, val) -> lvar_mapping_iterator_t: ...
def lvar_mapping_iterator_t___eq__(self, p) -> bool: ...
def lvar_mapping_iterator_t___ne__(self, p) -> bool: ...
def lvar_mapping_iterator_t_swiginit(*args, **kwargs): ...
def lvar_mapping_iterator_t_swigregister(*args, **kwargs): ...
def lvar_mapping_iterator_t_x_get(self) -> iterator_word: ...
def lvar_mapping_iterator_t_x_set(self, x) -> Any: ...
def lvar_mapping_new() -> lvar_mapping_t: ...
def lvar_mapping_next(p) -> lvar_mapping_iterator_t: ...
def lvar_mapping_prev(p) -> lvar_mapping_iterator_t: ...
def lvar_mapping_second(p) -> lvar_locator_t: ...
def lvar_mapping_size(map) -> size_t: ...
def lvar_mapping_t_at(self, _Keyval) -> lvar_locator_t: ...
def lvar_mapping_t_size(self) -> size_t: ...
def lvar_mapping_t_swiginit(*args, **kwargs): ...
def lvar_mapping_t_swigregister(*args, **kwargs): ...
def lvar_ref_t___eq__(self, r) -> bool: ...
def lvar_ref_t___ge__(self, r) -> bool: ...
def lvar_ref_t___gt__(self, r) -> bool: ...
def lvar_ref_t___le__(self, r) -> bool: ...
def lvar_ref_t___lt__(self, r) -> bool: ...
def lvar_ref_t___ne__(self, r) -> bool: ...
def lvar_ref_t_compare(self, r) -> int: ...
def lvar_ref_t_idx_get(self) -> int: ...
def lvar_ref_t_idx_set(self, idx) -> Any: ...
def lvar_ref_t_mba_get(self) -> mba_t: ...
def lvar_ref_t_off_get(self) -> sval_t: ...
def lvar_ref_t_off_set(self, off) -> Any: ...
def lvar_ref_t_swap(self, r) -> Any: ...
def lvar_ref_t_swiginit(*args, **kwargs): ...
def lvar_ref_t_swigregister(*args, **kwargs): ...
def lvar_ref_t_var(self) -> lvar_t: ...
def lvar_saved_info_t___eq__(self, r) -> bool: ...
def lvar_saved_info_t___ne__(self, r) -> bool: ...
def lvar_saved_info_t_clear_keep(self) -> Any: ...
def lvar_saved_info_t_clr_nomap_lvar(self) -> Any: ...
def lvar_saved_info_t_clr_noptr_lvar(self) -> Any: ...
def lvar_saved_info_t_clr_split_lvar(self) -> Any: ...
def lvar_saved_info_t_clr_unused_lvar(self) -> Any: ...
def lvar_saved_info_t_cmt_get(*args, **kwargs): ...
def lvar_saved_info_t_cmt_set(self, cmt) -> Any: ...
def lvar_saved_info_t_flags_get(self) -> int: ...
def lvar_saved_info_t_flags_set(self, flags) -> Any: ...
def lvar_saved_info_t_has_info(self) -> bool: ...
def lvar_saved_info_t_is_kept(self) -> bool: ...
def lvar_saved_info_t_is_nomap_lvar(self) -> bool: ...
def lvar_saved_info_t_is_noptr_lvar(self) -> bool: ...
def lvar_saved_info_t_is_split_lvar(self) -> bool: ...
def lvar_saved_info_t_is_unused_lvar(self) -> bool: ...
def lvar_saved_info_t_ll_get(self) -> lvar_locator_t: ...
def lvar_saved_info_t_ll_set(self, ll) -> Any: ...
def lvar_saved_info_t_name_get(*args, **kwargs): ...
def lvar_saved_info_t_name_set(self, name) -> Any: ...
def lvar_saved_info_t_set_keep(self) -> Any: ...
def lvar_saved_info_t_set_nomap_lvar(self) -> Any: ...
def lvar_saved_info_t_set_noptr_lvar(self) -> Any: ...
def lvar_saved_info_t_set_split_lvar(self) -> Any: ...
def lvar_saved_info_t_set_unused_lvar(self) -> Any: ...
def lvar_saved_info_t_size_get(self) -> ssize_t: ...
def lvar_saved_info_t_size_set(self, size) -> Any: ...
def lvar_saved_info_t_swiginit(*args, **kwargs): ...
def lvar_saved_info_t_swigregister(*args, **kwargs): ...
def lvar_saved_info_t_type_get(self) -> tinfo_t: ...
def lvar_saved_info_t_type_set(self, type) -> Any: ...
def lvar_saved_infos_t___eq__(self, r) -> bool: ...
def lvar_saved_infos_t___getitem__(self, i) -> lvar_saved_info_t: ...
def lvar_saved_infos_t___len__(self) -> size_t: ...
def lvar_saved_infos_t___ne__(self, r) -> bool: ...
def lvar_saved_infos_t___setitem__(self, i, v) -> Any: ...
def lvar_saved_infos_t__del(self, x) -> bool: ...
def lvar_saved_infos_t_add_unique(self, x) -> bool: ...
def lvar_saved_infos_t_at(self, _idx) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_begin(self) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_begin(self) -> lvar_saved_info_t: ...
def lvar_saved_infos_t_capacity(self) -> size_t: ...
def lvar_saved_infos_t_clear(self) -> Any: ...
def lvar_saved_infos_t_empty(self) -> bool: ...
@overload
def lvar_saved_infos_t_end(self) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_end(self) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_erase(self, it) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_erase(self, first, last) -> lvar_saved_info_t: ...
def lvar_saved_infos_t_extract(self) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_find(self, x) -> lvar_saved_info_t: ...
@overload
def lvar_saved_infos_t_find(self, x) -> lvar_saved_info_t: ...
def lvar_saved_infos_t_grow(self, x=...) -> Any: ...
def lvar_saved_infos_t_has(self, x) -> bool: ...
def lvar_saved_infos_t_inject(self, s, len) -> Any: ...
def lvar_saved_infos_t_insert(self, it, x) -> lvar_saved_info_t: ...
def lvar_saved_infos_t_pop_back(self) -> Any: ...
@overload
def lvar_saved_infos_t_push_back(self, x) -> Any: ...
@overload
def lvar_saved_infos_t_push_back(self) -> lvar_saved_info_t: ...
def lvar_saved_infos_t_qclear(self) -> Any: ...
def lvar_saved_infos_t_reserve(self, cnt) -> Any: ...
@overload
def lvar_saved_infos_t_resize(self, _newsize, x) -> Any: ...
@overload
def lvar_saved_infos_t_resize(self, _newsize) -> Any: ...
def lvar_saved_infos_t_size(self) -> size_t: ...
def lvar_saved_infos_t_swap(self, r) -> Any: ...
def lvar_saved_infos_t_swiginit(*args, **kwargs): ...
def lvar_saved_infos_t_swigregister(*args, **kwargs): ...
def lvar_saved_infos_t_truncate(self) -> Any: ...
def lvar_t_accepts_type(self, t, may_change_thisarg=...) -> bool: ...
def lvar_t_append_list(self, mba, lst, pad_if_scattered=...) -> Any: ...
def lvar_t_clear_used(self) -> Any: ...
def lvar_t_clr_arg_var(self) -> Any: ...
def lvar_t_clr_automapped(self) -> Any: ...
def lvar_t_clr_decl_unused(self) -> Any: ...
def lvar_t_clr_dummy_arg(self) -> Any: ...
def lvar_t_clr_fake_var(self) -> Any: ...
def lvar_t_clr_floating_var(self) -> Any: ...
def lvar_t_clr_mapdst_var(self) -> Any: ...
def lvar_t_clr_mreg_done(self) -> Any: ...
def lvar_t_clr_noptr_var(self) -> Any: ...
def lvar_t_clr_notarg(self) -> Any: ...
def lvar_t_clr_overlapped_var(self) -> Any: ...
def lvar_t_clr_shared(self) -> Any: ...
def lvar_t_clr_split_var(self) -> Any: ...
def lvar_t_clr_spoiled_var(self) -> Any: ...
def lvar_t_clr_thisarg(self) -> Any: ...
def lvar_t_clr_unknown_width(self) -> Any: ...
def lvar_t_clr_used_byref(self) -> Any: ...
def lvar_t_clr_user_info(self) -> Any: ...
def lvar_t_clr_user_name(self) -> Any: ...
def lvar_t_clr_user_type(self) -> Any: ...
def lvar_t_cmt_get(*args, **kwargs): ...
def lvar_t_cmt_set(self, cmt) -> Any: ...
def lvar_t_defblk_get(self) -> int: ...
def lvar_t_defblk_set(self, defblk) -> Any: ...
def lvar_t_divisor_get(self) -> uint64: ...
def lvar_t_divisor_set(self, divisor) -> Any: ...
def lvar_t_has_common(self, v) -> bool: ...
def lvar_t_has_common_bit(self, loc, width2) -> bool: ...
def lvar_t_has_nice_name(self) -> bool: ...
def lvar_t_has_regname(self) -> bool: ...
def lvar_t_has_user_info(self) -> bool: ...
def lvar_t_has_user_name(self) -> bool: ...
def lvar_t_has_user_type(self) -> bool: ...
def lvar_t_in_asm(self) -> bool: ...
def lvar_t_is_aliasable(self, mba) -> bool: ...
def lvar_t_is_arg_var(self) -> bool: ...
def lvar_t_is_automapped(self) -> bool: ...
def lvar_t_is_decl_unused(self) -> bool: ...
def lvar_t_is_dummy_arg(self) -> bool: ...
def lvar_t_is_fake_var(self) -> bool: ...
def lvar_t_is_floating_var(self) -> bool: ...
def lvar_t_is_mapdst_var(self) -> bool: ...
def lvar_t_is_noptr_var(self) -> bool: ...
def lvar_t_is_notarg(self) -> bool: ...
def lvar_t_is_overlapped_var(self) -> bool: ...
def lvar_t_is_result_var(self) -> bool: ...
def lvar_t_is_shared(self) -> bool: ...
def lvar_t_is_split_var(self) -> bool: ...
def lvar_t_is_spoiled_var(self) -> bool: ...
def lvar_t_is_thisarg(self) -> bool: ...
def lvar_t_is_unknown_width(self) -> bool: ...
def lvar_t_is_used_byref(self) -> bool: ...
def lvar_t_mreg_done(self) -> bool: ...
def lvar_t_name_get(*args, **kwargs): ...
def lvar_t_name_set(self, name) -> Any: ...
def lvar_t_set_arg_var(self) -> Any: ...
def lvar_t_set_automapped(self) -> Any: ...
def lvar_t_set_decl_unused(self) -> Any: ...
def lvar_t_set_dummy_arg(self) -> Any: ...
def lvar_t_set_fake_var(self) -> Any: ...
def lvar_t_set_final_lvar_type(self, t) -> Any: ...
def lvar_t_set_floating_var(self) -> Any: ...
def lvar_t_set_lvar_type(self, t, may_fail=...) -> bool: ...
def lvar_t_set_mapdst_var(self) -> Any: ...
def lvar_t_set_mreg_done(self) -> Any: ...
def lvar_t_set_non_typed(self) -> Any: ...
def lvar_t_set_noptr_var(self) -> Any: ...
def lvar_t_set_notarg(self) -> Any: ...
def lvar_t_set_overlapped_var(self) -> Any: ...
def lvar_t_set_shared(self) -> Any: ...
def lvar_t_set_split_var(self) -> Any: ...
def lvar_t_set_spoiled_var(self) -> Any: ...
def lvar_t_set_thisarg(self) -> Any: ...
def lvar_t_set_typed(self) -> Any: ...
def lvar_t_set_unknown_width(self) -> Any: ...
def lvar_t_set_used(self) -> Any: ...
def lvar_t_set_used_byref(self) -> Any: ...
def lvar_t_set_user_name(self) -> Any: ...
def lvar_t_set_user_type(self) -> Any: ...
def lvar_t_set_width(self, w, svw_flags=...) -> bool: ...
def lvar_t_swigregister(*args, **kwargs): ...
def lvar_t_tif_get(self) -> tinfo_t: ...
def lvar_t_tif_set(self, tif) -> Any: ...
@overload
def lvar_t_type(self) -> tinfo_t: ...
@overload
def lvar_t_type(self) -> tinfo_t: ...
def lvar_t_typed(self) -> bool: ...
def lvar_t_used(self) -> bool: ...
def lvar_t_width_get(self) -> int: ...
def lvar_t_width_set(self, width) -> Any: ...
def lvar_uservec_t_clear(self) -> Any: ...
def lvar_uservec_t_empty(self) -> bool: ...
def lvar_uservec_t_find_info(self, vloc) -> lvar_saved_info_t: ...
def lvar_uservec_t_keep_info(self, v) -> Any: ...
def lvar_uservec_t_lmaps_get(self) -> lvar_mapping_t: ...
def lvar_uservec_t_lmaps_set(self, lmaps) -> Any: ...
def lvar_uservec_t_lvvec_get(self) -> lvar_saved_infos_t: ...
def lvar_uservec_t_lvvec_set(self, lvvec) -> Any: ...
def lvar_uservec_t_stkoff_delta_get(self) -> uval_t: ...
def lvar_uservec_t_stkoff_delta_set(self, stkoff_delta) -> Any: ...
def lvar_uservec_t_swap(self, r) -> Any: ...
def lvar_uservec_t_swiginit(*args, **kwargs): ...
def lvar_uservec_t_swigregister(*args, **kwargs): ...
def lvar_uservec_t_ulv_flags_get(self) -> int: ...
def lvar_uservec_t_ulv_flags_set(self, ulv_flags) -> Any: ...
def lvars_t_find(self, ll) -> lvar_t: ...
def lvars_t_find_input_lvar(self, argloc, _size) -> int: ...
def lvars_t_find_lvar(self, location, width, defblk=...) -> int: ...
def lvars_t_find_stkvar(self, spoff, width) -> int: ...
def lvars_t_swiginit(*args, **kwargs): ...
def lvars_t_swigregister(*args, **kwargs): ...
def make_pointer(type) -> tinfo_t: ...
def mark_cfunc_dirty(ea, close_views=...) -> bool: ...
def mba_range_iterator_t_chunk(self) -> range_t: ...
def mba_range_iterator_t_fii_get(self) -> func_tail_iterator_t: ...
def mba_range_iterator_t_fii_set(self, fii) -> Any: ...
def mba_range_iterator_t_is_snippet(self) -> bool: ...
def mba_range_iterator_t_next(self) -> bool: ...
def mba_range_iterator_t_rii_get(*args, **kwargs): ...
def mba_range_iterator_t_rii_set(self, rii) -> Any: ...
def mba_range_iterator_t_set(self, mbr) -> bool: ...
def mba_range_iterator_t_swiginit(*args, **kwargs): ...
def mba_range_iterator_t_swigregister(*args, **kwargs): ...
def mba_ranges_t_clear(self) -> Any: ...
def mba_ranges_t_empty(self) -> bool: ...
def mba_ranges_t_is_fragmented(self) -> bool: ...
def mba_ranges_t_is_snippet(self) -> bool: ...
def mba_ranges_t_pfn_get(*args, **kwargs): ...
def mba_ranges_t_pfn_set(self, pfn) -> Any: ...
def mba_ranges_t_ranges_get(self) -> rangevec_t: ...
def mba_ranges_t_ranges_set(self, ranges) -> Any: ...
def mba_ranges_t_start(self) -> ea_t: ...
def mba_ranges_t_swiginit(*args, **kwargs): ...
def mba_ranges_t_swigregister(*args, **kwargs): ...
def mba_t__deregister(self) -> Any: ...
def mba_t__print(self, vp) -> Any: ...
def mba_t__register(self) -> Any: ...
def mba_t_aliased_args_get(self) -> ivl_t: ...
def mba_t_aliased_args_set(self, aliased_args) -> Any: ...
def mba_t_aliased_memory_get(self) -> ivlset_t: ...
def mba_t_aliased_memory_set(self, aliased_memory) -> Any: ...
def mba_t_aliased_vars_get(self) -> ivl_t: ...
def mba_t_aliased_vars_set(self, aliased_vars) -> Any: ...
def mba_t_alloc_fict_ea(self, real_ea) -> ea_t: ...
def mba_t_alloc_kreg(self, size, check_size=...) -> mreg_t: ...
def mba_t_alloc_lvars(self) -> Any: ...
def mba_t_analyze_calls(self, acflags) -> int: ...
@overload
def mba_t_arg(self, n) -> lvar_t: ...
@overload
def mba_t_arg(self, n) -> lvar_t: ...
def mba_t_argbase(self) -> sval_t: ...
def mba_t_argidx_get(self) -> intvec_t: ...
def mba_t_argidx_ok(self) -> bool: ...
def mba_t_argidx_set(self, argidx) -> Any: ...
def mba_t_argidx_sorted(self) -> bool: ...
def mba_t_bad_call_sp_detected(self) -> bool: ...
def mba_t_blocks_get(self) -> mblock_t: ...
def mba_t_blocks_set(self, blocks) -> Any: ...
def mba_t_build_graph(self) -> merror_t: ...
def mba_t_calc_shins_flags(self) -> int: ...
def mba_t_callinfo_built(self) -> bool: ...
def mba_t_cc_get(self) -> cm_t: ...
def mba_t_cc_set(self, cc) -> Any: ...
def mba_t_chain_varnums_ok(self) -> bool: ...
def mba_t_clr_cdtr(self) -> Any: ...
def mba_t_clr_mba_flags(self, f) -> Any: ...
def mba_t_clr_mba_flags2(self, f) -> Any: ...
def mba_t_code16_bit_removed(self) -> bool: ...
def mba_t_combine_blocks(self) -> bool: ...
def mba_t_common_stkvars_stkargs(self) -> bool: ...
def mba_t_consumed_argregs_get(self) -> rlist_t: ...
def mba_t_consumed_argregs_set(self, consumed_argregs) -> Any: ...
def mba_t_copy_block(self, blk, new_serial, cpblk_flags=...) -> mblock_t: ...
def mba_t_create_helper_call(self, ea, helper, rettype=..., callargs=..., out=...) -> minsn_t: ...
def mba_t_deleted_pairs(self) -> bool: ...
def mba_t_deprecated_idb_node_get(self) -> netnode: ...
def mba_t_deprecated_idb_node_set(self, deprecated_idb_node) -> Any: ...
def mba_t_deserialize(bytes) -> mba_t: ...
def mba_t_display_numaddrs(self) -> bool: ...
def mba_t_display_valnums(self) -> bool: ...
def mba_t_dump(self) -> Any: ...
def mba_t_dump_mba(self, _verify, title) -> Any: ...
def mba_t_entry_ea_get(self) -> ea_t: ...
def mba_t_entry_ea_set(self, entry_ea) -> Any: ...
def mba_t_error_ea_get(self) -> ea_t: ...
def mba_t_error_ea_set(self, error_ea) -> Any: ...
def mba_t_error_strarg_get(*args, **kwargs): ...
def mba_t_error_strarg_set(self, error_strarg) -> Any: ...
def mba_t_final_type_get(self) -> bool: ...
def mba_t_final_type_set(self, final_type) -> Any: ...
def mba_t_find_mop(self, ctx, ea, is_dest, list) -> mop_t: ...
def mba_t_first_epilog_ea_get(self) -> ea_t: ...
def mba_t_first_epilog_ea_set(self, first_epilog_ea) -> Any: ...
def mba_t_for_all_insns(self, mv) -> int: ...
def mba_t_for_all_ops(self, mv) -> int: ...
def mba_t_for_all_topinsns(self, mv) -> int: ...
def mba_t_fpd_get(self) -> sval_t: ...
def mba_t_fpd_set(self, fpd) -> Any: ...
def mba_t_free_kreg(self, reg, size) -> Any: ...
def mba_t_frregs_get(self) -> sval_t: ...
def mba_t_frregs_set(self, frregs) -> Any: ...
def mba_t_frsize_get(self) -> sval_t: ...
def mba_t_frsize_set(self, frsize) -> Any: ...
def mba_t_fti_flags_get(self) -> int: ...
def mba_t_fti_flags_set(self, fti_flags) -> Any: ...
def mba_t_fullsize_get(self) -> sval_t: ...
def mba_t_fullsize_set(self, fullsize) -> Any: ...
def mba_t_generated_asserts(self) -> bool: ...
def mba_t_get_args_region(self) -> ivl_t: ...
def mba_t_get_curfunc(*args, **kwargs): ...
def mba_t_get_func_output_lists(self, return_regs, spoiled, type, call_ea=..., tail_call=...) -> Any: ...
def mba_t_get_graph(self) -> mbl_graph_t: ...
def mba_t_get_ida_argloc(self, v) -> argloc_t: ...
def mba_t_get_lvars_region(self) -> ivl_t: ...
def mba_t_get_mba_flags(self) -> int: ...
def mba_t_get_mba_flags2(self) -> int: ...
@overload
def mba_t_get_mblock(self, n) -> mblock_t: ...
@overload
def mba_t_get_mblock(self, n) -> mblock_t: ...
def mba_t_get_shadow_region(self) -> ivl_t: ...
def mba_t_get_stack_region(self) -> ivl_t: ...
def mba_t_get_std_region(self, idx) -> ivl_t: ...
def mba_t_gotoff_stkvars_get(self) -> ivlset_t: ...
def mba_t_gotoff_stkvars_set(self, gotoff_stkvars) -> Any: ...
def mba_t_graph_insns(self) -> bool: ...
def mba_t_has_bad_sp(self) -> bool: ...
def mba_t_has_outlines(self) -> bool: ...
def mba_t_has_over_chains(self) -> bool: ...
def mba_t_has_passregs(self) -> bool: ...
def mba_t_has_stack_retval(self) -> bool: ...
def mba_t_idaloc2vd(self, loc, width) -> vdloc_t: ...
def mba_t_idb_spoiled_get(self) -> reginfovec_t: ...
def mba_t_idb_spoiled_set(self, idb_spoiled) -> Any: ...
def mba_t_idb_type_get(self) -> tinfo_t: ...
def mba_t_idb_type_set(self, idb_type) -> Any: ...
def mba_t_inargoff_get(self) -> sval_t: ...
def mba_t_inargoff_set(self, inargoff) -> Any: ...
def mba_t_insert_block(self, bblk) -> mblock_t: ...
def mba_t_is_cdtr(self) -> bool: ...
def mba_t_is_ctr(self) -> bool: ...
def mba_t_is_dtr(self) -> bool: ...
def mba_t_is_pattern(self) -> bool: ...
def mba_t_is_snippet(self) -> bool: ...
def mba_t_is_stkarg(self, v) -> bool: ...
def mba_t_is_thunk(self) -> bool: ...
def mba_t_label_get(*args, **kwargs): ...
def mba_t_label_set(self, label) -> Any: ...
def mba_t_last_prolog_ea_get(self) -> ea_t: ...
def mba_t_last_prolog_ea_set(self, last_prolog_ea) -> Any: ...
def mba_t_loaded_gdl(self) -> bool: ...
def mba_t_lvar_names_ok(self) -> bool: ...
def mba_t_lvars_allocated(self) -> bool: ...
def mba_t_lvars_renamed(self) -> bool: ...
def mba_t_map_fict_ea(self, fict_ea) -> ea_t: ...
def mba_t_mark_chains_dirty(self) -> Any: ...
def mba_t_maturity_get(self) -> mba_maturity_t: ...
def mba_t_maturity_set(self, maturity) -> Any: ...
def mba_t_may_refine_rettype(self) -> bool: ...
def mba_t_mbr_get(self) -> mba_ranges_t: ...
def mba_t_mbr_set(self, mbr) -> Any: ...
def mba_t_minargref_get(self) -> sval_t: ...
def mba_t_minargref_set(self, minargref) -> Any: ...
def mba_t_minstkref_ea_get(self) -> ea_t: ...
def mba_t_minstkref_ea_set(self, minstkref_ea) -> Any: ...
def mba_t_minstkref_get(self) -> sval_t: ...
def mba_t_minstkref_set(self, minstkref) -> Any: ...
def mba_t_natural_get(*args, **kwargs): ...
def mba_t_natural_set(self, natural) -> Any: ...
def mba_t_nodel_memory_get(self) -> mlist_t: ...
def mba_t_nodel_memory_set(self, nodel_memory) -> Any: ...
def mba_t_notes_get(self) -> hexwarns_t: ...
def mba_t_notes_set(self, notes) -> Any: ...
def mba_t_npurged_get(self) -> int: ...
def mba_t_npurged_set(self, npurged) -> Any: ...
def mba_t_occurred_warns_get(self) -> uchar[32]: ...
def mba_t_occurred_warns_set(self, occurred_warns) -> Any: ...
def mba_t_optimize_global(self) -> merror_t: ...
def mba_t_optimize_local(self, locopt_bits) -> int: ...
def mba_t_optimized(self) -> bool: ...
def mba_t_pfn_flags_get(self) -> int: ...
def mba_t_pfn_flags_set(self, pfn_flags) -> Any: ...
def mba_t_precise_defeas(self) -> bool: ...
def mba_t_prop_complex(self) -> bool: ...
def mba_t_propagated_asserts(self) -> bool: ...
def mba_t_qty_get(self) -> int: ...
def mba_t_qty_set(self, qty) -> Any: ...
def mba_t_really_alloc(self) -> bool: ...
def mba_t_regargs_is_not_aligned(self) -> bool: ...
def mba_t_remove_block(self, blk) -> bool: ...
def mba_t_remove_empty_and_unreachable_blocks(self) -> bool: ...
def mba_t_reqmat_get(self) -> mba_maturity_t: ...
def mba_t_reqmat_set(self, reqmat) -> Any: ...
def mba_t_restricted_memory_get(self) -> ivlset_t: ...
def mba_t_restricted_memory_set(self, restricted_memory) -> Any: ...
def mba_t_retsize_get(self) -> int: ...
def mba_t_retsize_set(self, retsize) -> Any: ...
def mba_t_returns_fpval(self) -> bool: ...
def mba_t_retvaridx_get(self) -> int: ...
def mba_t_retvaridx_set(self, retvaridx) -> Any: ...
def mba_t_rtype_refined(self) -> bool: ...
def mba_t_save_snapshot(self, description) -> Any: ...
def mba_t_saverest_done(self) -> bool: ...
def mba_t_serialize(self) -> Any: ...
def mba_t_set_lvar_name(self, v, name, flagbits) -> bool: ...
def mba_t_set_maturity(self, mat) -> bool: ...
def mba_t_set_mba_flags(self, f) -> Any: ...
def mba_t_set_mba_flags2(self, f) -> Any: ...
def mba_t_set_nice_lvar_name(self, v, name) -> bool: ...
def mba_t_set_user_lvar_name(self, v, name) -> bool: ...
def mba_t_shadow_args_get(self) -> int: ...
def mba_t_shadow_args_set(self, shadow_args) -> Any: ...
def mba_t_short_display(self) -> bool: ...
def mba_t_should_beautify(self) -> bool: ...
def mba_t_show_reduction(self) -> bool: ...
def mba_t_spd_adjust_get(self) -> sval_t: ...
def mba_t_spd_adjust_set(self, spd_adjust) -> Any: ...
def mba_t_spoiled_list_get(self) -> mlist_t: ...
def mba_t_spoiled_list_set(self, spoiled_list) -> Any: ...
def mba_t_stacksize_get(self) -> sval_t: ...
def mba_t_stacksize_set(self, stacksize) -> Any: ...
def mba_t_std_ivls_get(self) -> ivl_with_name_t: ...
def mba_t_std_ivls_set(self, std_ivls) -> Any: ...
def mba_t_stkoff_ida2vd(self, off) -> sval_t: ...
def mba_t_stkoff_vd2ida(self, off) -> sval_t: ...
def mba_t_swigregister(*args, **kwargs): ...
def mba_t_term(self) -> Any: ...
def mba_t_tmpstk_size_get(self) -> sval_t: ...
def mba_t_tmpstk_size_set(self, tmpstk_size) -> Any: ...
def mba_t_use_frame(self) -> bool: ...
def mba_t_use_wingraph32(self) -> bool: ...
def mba_t_valranges_done(self) -> bool: ...
def mba_t_vars_get(self) -> lvars_t: ...
def mba_t_vars_set(self, vars) -> Any: ...
@overload
def mba_t_vd2idaloc(loc, width, spd) -> argloc_t: ...
@overload
def mba_t_vd2idaloc(loc, width) -> argloc_t: ...
def mba_t_verify(self, always) -> Any: ...
def mba_t_write_to_const_detected(self) -> bool: ...
def mbl_graph_t_get_chain_stamp(self) -> int: ...
def mbl_graph_t_get_du(self, gctype) -> graph_chains_t: ...
def mbl_graph_t_get_mblock(self, n) -> mblock_t: ...
def mbl_graph_t_get_ud(self, gctype) -> graph_chains_t: ...
def mbl_graph_t_is_du_chain_dirty(self, gctype) -> bool: ...
def mbl_graph_t_is_redefined_globally(self, list, b1, b2, m1, m2, maymust=...) -> bool: ...
def mbl_graph_t_is_ud_chain_dirty(self, gctype) -> bool: ...
def mbl_graph_t_is_used_globally(self, list, b1, b2, m1, m2, maymust=...) -> bool: ...
def mbl_graph_t_swigregister(*args, **kwargs): ...
def mblock_t__print(self, vp) -> Any: ...
def mblock_t_append_def_list(self, list, op, maymust) -> Any: ...
def mblock_t_append_use_list(self, list, op, maymust, mask=...) -> Any: ...
def mblock_t_build_def_list(self, ins, maymust) -> mlist_t: ...
def mblock_t_build_lists(self, kill_deads) -> int: ...
def mblock_t_build_use_list(self, ins, maymust) -> mlist_t: ...
def mblock_t_dead_at_start_get(self) -> mlist_t: ...
def mblock_t_dead_at_start_set(self, dead_at_start) -> Any: ...
def mblock_t_dnu_get(self) -> mlist_t: ...
def mblock_t_dnu_set(self, dnu) -> Any: ...
def mblock_t_dump(self) -> Any: ...
def mblock_t_dump_block(self, title) -> Any: ...
def mblock_t_empty(self) -> bool: ...
def mblock_t_end_get(self) -> ea_t: ...
def mblock_t_end_set(self, end) -> Any: ...
def mblock_t_find_access(self, op, parent, mend, fdflags) -> minsn_t: ...
def mblock_t_find_def(self, op, p_i1, i2, fdflags) -> minsn_t: ...
def mblock_t_find_first_use(self, list, i1, i2, maymust=...) -> minsn_t: ...
def mblock_t_find_redefinition(self, list, i1, i2, maymust=...) -> minsn_t: ...
def mblock_t_find_use(self, op, p_i1, i2, fdflags) -> minsn_t: ...
def mblock_t_flags_get(self) -> uint32: ...
def mblock_t_flags_set(self, flags) -> Any: ...
def mblock_t_for_all_insns(self, mv) -> int: ...
def mblock_t_for_all_ops(self, mv) -> int: ...
def mblock_t_for_all_uses(self, list, i1, i2, mmv) -> int: ...
def mblock_t_get_reginsn_qty(self) -> size_t: ...
@overload
def mblock_t_get_valranges(self, res, vivl, vrflags) -> bool: ...
@overload
def mblock_t_get_valranges(self, res, vivl, m, vrflags) -> bool: ...
def mblock_t_head_get(self) -> minsn_t: ...
def mblock_t_head_set(self, head) -> Any: ...
def mblock_t_insert_into_block(self, nm, om) -> minsn_t: ...
def mblock_t_is_branch(self) -> bool: ...
def mblock_t_is_call_block(self) -> bool: ...
def mblock_t_is_nway(self) -> bool: ...
def mblock_t_is_redefined(self, list, i1, i2, maymust=...) -> bool: ...
def mblock_t_is_rhs_redefined(self, ins, i1, i2) -> bool: ...
def mblock_t_is_simple_goto_block(self) -> bool: ...
def mblock_t_is_simple_jcnd_block(self) -> bool: ...
def mblock_t_is_unknown_call(self) -> bool: ...
def mblock_t_is_used(self, list, i1, i2, maymust=...) -> bool: ...
def mblock_t_lists_dirty(self) -> bool: ...
def mblock_t_lists_ready(self) -> bool: ...
def mblock_t_make_lists_ready(self) -> int: ...
def mblock_t_make_nop(self, m) -> Any: ...
def mblock_t_mark_lists_dirty(self) -> Any: ...
def mblock_t_maxbsp_get(self) -> sval_t: ...
def mblock_t_maxbsp_set(self, maxbsp) -> Any: ...
def mblock_t_maybdef_get(self) -> mlist_t: ...
def mblock_t_maybdef_set(self, maybdef) -> Any: ...
def mblock_t_maybuse_get(self) -> mlist_t: ...
def mblock_t_maybuse_set(self, maybuse) -> Any: ...
def mblock_t_mba_get(self) -> mba_t: ...
def mblock_t_mba_set(self, mba) -> Any: ...
def mblock_t_minbargref_get(self) -> sval_t: ...
def mblock_t_minbargref_set(self, minbargref) -> Any: ...
def mblock_t_minbstkref_get(self) -> sval_t: ...
def mblock_t_minbstkref_set(self, minbstkref) -> Any: ...
def mblock_t_mustbdef_get(self) -> mlist_t: ...
def mblock_t_mustbdef_set(self, mustbdef) -> Any: ...
def mblock_t_mustbuse_get(self) -> mlist_t: ...
def mblock_t_mustbuse_set(self, mustbuse) -> Any: ...
def mblock_t_needs_propagation(self) -> bool: ...
def mblock_t_nextb_get(self) -> mblock_t: ...
def mblock_t_nextb_set(self, nextb) -> Any: ...
def mblock_t_npred(self) -> int: ...
def mblock_t_nsucc(self) -> int: ...
def mblock_t_optimize_block(self) -> int: ...
def mblock_t_optimize_insn(self, m, optflags=...) -> int: ...
def mblock_t_optimize_useless_jump(self) -> int: ...
def mblock_t_pred(self, n) -> int: ...
def mblock_t_predset_get(self) -> intvec_t: ...
def mblock_t_predset_set(self, predset) -> Any: ...
def mblock_t_prevb_get(self) -> mblock_t: ...
def mblock_t_prevb_set(self, prevb) -> Any: ...
def mblock_t_remove_from_block(self, m) -> minsn_t: ...
def mblock_t_request_demote64(self) -> Any: ...
def mblock_t_request_propagation(self) -> Any: ...
def mblock_t_serial_get(self) -> int: ...
def mblock_t_serial_set(self, serial) -> Any: ...
def mblock_t_start_get(self) -> ea_t: ...
def mblock_t_start_set(self, start) -> Any: ...
def mblock_t_succ(self, n) -> int: ...
def mblock_t_succset_get(self) -> intvec_t: ...
def mblock_t_succset_set(self, succset) -> Any: ...
def mblock_t_swigregister(*args, **kwargs): ...
def mblock_t_tail_get(self) -> minsn_t: ...
def mblock_t_tail_set(self, tail) -> Any: ...
def mblock_t_type_get(self) -> mblock_type_t: ...
def mblock_t_type_set(self, type) -> Any: ...
def mcallarg_t__print(self, shins_flags=...) -> Any: ...
def mcallarg_t_argloc_get(self) -> argloc_t: ...
def mcallarg_t_argloc_set(self, argloc) -> Any: ...
def mcallarg_t_copy_mop(self, op) -> Any: ...
def mcallarg_t_dstr(*args, **kwargs): ...
def mcallarg_t_ea_get(self) -> ea_t: ...
def mcallarg_t_ea_set(self, ea) -> Any: ...
def mcallarg_t_flags_get(self) -> uint32: ...
def mcallarg_t_flags_set(self, flags) -> Any: ...
def mcallarg_t_make_int(self, val, val_ea, opno=...) -> Any: ...
def mcallarg_t_make_uint(self, val, val_ea, opno=...) -> Any: ...
def mcallarg_t_name_get(*args, **kwargs): ...
def mcallarg_t_name_set(self, name) -> Any: ...
@overload
def mcallarg_t_set_regarg(self, mr, sz, tif) -> Any: ...
@overload
def mcallarg_t_set_regarg(self, mr, tif) -> Any: ...
@overload
def mcallarg_t_set_regarg(self, mr, dt, sign=...) -> Any: ...
def mcallarg_t_swiginit(*args, **kwargs): ...
def mcallarg_t_swigregister(*args, **kwargs): ...
def mcallarg_t_type_get(self) -> tinfo_t: ...
def mcallarg_t_type_set(self, type) -> Any: ...
def mcallargs_t___eq__(self, r) -> bool: ...
def mcallargs_t___getitem__(self, i) -> mcallarg_t: ...
def mcallargs_t___len__(self) -> size_t: ...
def mcallargs_t___ne__(self, r) -> bool: ...
def mcallargs_t___setitem__(self, i, v) -> Any: ...
def mcallargs_t__del(self, x) -> bool: ...
def mcallargs_t_add_unique(self, x) -> bool: ...
def mcallargs_t_at(self, _idx) -> mcallarg_t: ...
@overload
def mcallargs_t_begin(self) -> mcallarg_t: ...
@overload
def mcallargs_t_begin(self) -> mcallarg_t: ...
def mcallargs_t_capacity(self) -> size_t: ...
def mcallargs_t_clear(self) -> Any: ...
def mcallargs_t_empty(self) -> bool: ...
@overload
def mcallargs_t_end(self) -> mcallarg_t: ...
@overload
def mcallargs_t_end(self) -> mcallarg_t: ...
@overload
def mcallargs_t_erase(self, it) -> mcallarg_t: ...
@overload
def mcallargs_t_erase(self, first, last) -> mcallarg_t: ...
def mcallargs_t_extract(self) -> mcallarg_t: ...
@overload
def mcallargs_t_find(self, x) -> mcallarg_t: ...
@overload
def mcallargs_t_find(self, x) -> mcallarg_t: ...
def mcallargs_t_grow(self, x=...) -> Any: ...
def mcallargs_t_has(self, x) -> bool: ...
def mcallargs_t_inject(self, s, len) -> Any: ...
def mcallargs_t_insert(self, it, x) -> mcallarg_t: ...
def mcallargs_t_pop_back(self) -> Any: ...
@overload
def mcallargs_t_push_back(self, x) -> Any: ...
@overload
def mcallargs_t_push_back(self) -> mcallarg_t: ...
def mcallargs_t_qclear(self) -> Any: ...
def mcallargs_t_reserve(self, cnt) -> Any: ...
@overload
def mcallargs_t_resize(self, _newsize, x) -> Any: ...
@overload
def mcallargs_t_resize(self, _newsize) -> Any: ...
def mcallargs_t_size(self) -> size_t: ...
def mcallargs_t_swap(self, r) -> Any: ...
def mcallargs_t_swiginit(*args, **kwargs): ...
def mcallargs_t_swigregister(*args, **kwargs): ...
def mcallargs_t_truncate(self) -> Any: ...
def mcallinfo_t__print(self, size=..., shins_flags=...) -> Any: ...
def mcallinfo_t_args_get(self) -> mcallargs_t: ...
def mcallinfo_t_args_set(self, args) -> Any: ...
def mcallinfo_t_call_spd_get(self) -> int: ...
def mcallinfo_t_call_spd_set(self, call_spd) -> Any: ...
def mcallinfo_t_callee_get(self) -> ea_t: ...
def mcallinfo_t_callee_set(self, callee) -> Any: ...
def mcallinfo_t_cc_get(self) -> cm_t: ...
def mcallinfo_t_cc_set(self, cc) -> Any: ...
def mcallinfo_t_dead_regs_get(self) -> mlist_t: ...
def mcallinfo_t_dead_regs_set(self, dead_regs) -> Any: ...
def mcallinfo_t_dstr(*args, **kwargs): ...
def mcallinfo_t_flags_get(self) -> int: ...
def mcallinfo_t_flags_set(self, flags) -> Any: ...
def mcallinfo_t_fti_attrs_get(self) -> type_attrs_t: ...
def mcallinfo_t_fti_attrs_set(self, fti_attrs) -> Any: ...
def mcallinfo_t_get_type(self) -> tinfo_t: ...
def mcallinfo_t_is_vararg(self) -> bool: ...
def mcallinfo_t_lexcompare(self, f) -> int: ...
def mcallinfo_t_pass_regs_get(self) -> mlist_t: ...
def mcallinfo_t_pass_regs_set(self, pass_regs) -> Any: ...
def mcallinfo_t_retregs_get(self) -> mopvec_t: ...
def mcallinfo_t_retregs_set(self, retregs) -> Any: ...
def mcallinfo_t_return_argloc_get(self) -> argloc_t: ...
def mcallinfo_t_return_argloc_set(self, return_argloc) -> Any: ...
def mcallinfo_t_return_regs_get(self) -> mlist_t: ...
def mcallinfo_t_return_regs_set(self, return_regs) -> Any: ...
def mcallinfo_t_return_type_get(self) -> tinfo_t: ...
def mcallinfo_t_return_type_set(self, return_type) -> Any: ...
def mcallinfo_t_role_get(self) -> funcrole_t: ...
def mcallinfo_t_role_set(self, role) -> Any: ...
def mcallinfo_t_set_type(self, type) -> bool: ...
def mcallinfo_t_solid_args_get(self) -> int: ...
def mcallinfo_t_solid_args_set(self, solid_args) -> Any: ...
def mcallinfo_t_spoiled_get(self) -> mlist_t: ...
def mcallinfo_t_spoiled_set(self, spoiled) -> Any: ...
def mcallinfo_t_stkargs_top_get(self) -> int: ...
def mcallinfo_t_stkargs_top_set(self, stkargs_top) -> Any: ...
def mcallinfo_t_swiginit(*args, **kwargs): ...
def mcallinfo_t_swigregister(*args, **kwargs): ...
def mcallinfo_t_visible_memory_get(self) -> ivlset_t: ...
def mcallinfo_t_visible_memory_set(self, visible_memory) -> Any: ...
def mcases_t___eq__(self, r) -> bool: ...
def mcases_t___ge__(self, r) -> bool: ...
def mcases_t___gt__(self, r) -> bool: ...
def mcases_t___le__(self, r) -> bool: ...
def mcases_t___lt__(self, r) -> bool: ...
def mcases_t___ne__(self, r) -> bool: ...
def mcases_t__print(self) -> Any: ...
def mcases_t_compare(self, r) -> int: ...
def mcases_t_dstr(*args, **kwargs): ...
def mcases_t_empty(self) -> bool: ...
def mcases_t_resize(self, s) -> Any: ...
def mcases_t_size(self) -> size_t: ...
def mcases_t_swap(self, r) -> Any: ...
def mcases_t_swiginit(*args, **kwargs): ...
def mcases_t_swigregister(*args, **kwargs): ...
def mcases_t_targets_get(self) -> intvec_t: ...
def mcases_t_targets_set(self, targets) -> Any: ...
def mcases_t_values_get(self) -> casevec_t: ...
def mcases_t_values_set(self, values) -> Any: ...
def mcode_modifies_d(mcode) -> bool: ...
def microcode_filter_t_apply(self, cdg) -> merror_t: ...
def microcode_filter_t_match(self, cdg) -> bool: ...
def microcode_filter_t_swiginit(*args, **kwargs): ...
def microcode_filter_t_swigregister(*args, **kwargs): ...
def minsn_t___dbg_get_meminfo(self) -> qstring: ...
def minsn_t___dbg_get_registered_kind(self) -> int: ...
def minsn_t___lt__(self, ri) -> bool: ...
def minsn_t__deregister(self) -> Any: ...
def minsn_t__make_nop(self) -> Any: ...
def minsn_t__obj_id(*args, **kwargs): ...
def minsn_t__print(self, shins_flags=...) -> Any: ...
def minsn_t__register(self) -> Any: ...
def minsn_t_clr_assert(self) -> Any: ...
def minsn_t_clr_combinable(self) -> Any: ...
def minsn_t_clr_combined(self) -> Any: ...
def minsn_t_clr_fpinsn(self) -> Any: ...
def minsn_t_clr_ignlowsrc(self) -> Any: ...
def minsn_t_clr_multimov(self) -> Any: ...
def minsn_t_clr_noret_icall(self) -> Any: ...
def minsn_t_clr_propagatable(self) -> Any: ...
def minsn_t_clr_tailcall(self) -> Any: ...
def minsn_t_contains_call(self, with_helpers=...) -> bool: ...
def minsn_t_contains_opcode(self, mcode) -> bool: ...
def minsn_t_d_get(self) -> mop_t: ...
def minsn_t_d_set(self, d) -> Any: ...
def minsn_t_deserialize(self, bytes, format_version) -> bool: ...
def minsn_t_dstr(*args, **kwargs): ...
def minsn_t_ea_get(self) -> ea_t: ...
def minsn_t_ea_set(self, ea) -> Any: ...
def minsn_t_equal_insns(self, m, eqflags) -> bool: ...
def minsn_t_find_call(self, with_helpers=...) -> minsn_t: ...
def minsn_t_find_ins_op(self, op=...) -> minsn_t: ...
def minsn_t_find_num_op(self) -> mop_t: ...
@overload
def minsn_t_find_opcode(self, mcode) -> minsn_t: ...
@overload
def minsn_t_find_opcode(self, mcode) -> minsn_t: ...
def minsn_t_for_all_insns(self, mv) -> int: ...
def minsn_t_for_all_ops(self, mv) -> int: ...
def minsn_t_get_role(self) -> funcrole_t: ...
def minsn_t_get_split_size(self) -> int: ...
def minsn_t_has_side_effects(self, include_ldx_and_divs=...) -> bool: ...
def minsn_t_iprops_get(self) -> int: ...
def minsn_t_iprops_set(self, iprops) -> Any: ...
def minsn_t_is_after(self, m) -> bool: ...
def minsn_t_is_alloca(self) -> bool: ...
def minsn_t_is_assert(self) -> bool: ...
def minsn_t_is_between(self, m1, m2) -> bool: ...
def minsn_t_is_bswap(self) -> bool: ...
def minsn_t_is_cleaning_pop(self) -> bool: ...
def minsn_t_is_combinable(self) -> bool: ...
def minsn_t_is_combined(self) -> bool: ...
def minsn_t_is_extstx(self) -> bool: ...
def minsn_t_is_farcall(self) -> bool: ...
def minsn_t_is_fpinsn(self) -> bool: ...
def minsn_t_is_helper(self, name) -> bool: ...
def minsn_t_is_ignlowsrc(self) -> bool: ...
def minsn_t_is_inverted_jx(self) -> bool: ...
def minsn_t_is_like_move(self) -> bool: ...
def minsn_t_is_mbarrier(self) -> bool: ...
def minsn_t_is_memcpy(self) -> bool: ...
def minsn_t_is_memset(self) -> bool: ...
def minsn_t_is_mov(self) -> bool: ...
def minsn_t_is_multimov(self) -> bool: ...
def minsn_t_is_noret_call(self, flags=...) -> bool: ...
def minsn_t_is_optional(self) -> bool: ...
def minsn_t_is_persistent(self) -> bool: ...
def minsn_t_is_propagatable(self) -> bool: ...
def minsn_t_is_readflags(self) -> bool: ...
def minsn_t_is_tailcall(self) -> bool: ...
def minsn_t_is_unknown_call(self) -> bool: ...
def minsn_t_is_wild_match(self) -> bool: ...
def minsn_t_l_get(self) -> mop_t: ...
def minsn_t_l_set(self, l) -> Any: ...
def minsn_t_lexcompare(self, ri) -> int: ...
def minsn_t_may_use_aliased_memory(self) -> bool: ...
def minsn_t_modifies_d(self) -> bool: ...
def minsn_t_modifies_pair_mop(self) -> bool: ...
def minsn_t_next_get(self) -> minsn_t: ...
def minsn_t_next_set(self, next) -> Any: ...
def minsn_t_opcode_get(self) -> mcode_t: ...
def minsn_t_opcode_set(self, opcode) -> Any: ...
def minsn_t_optimize_solo(self, optflags=...) -> int: ...
def minsn_t_optimize_subtree(self, blk, top, parent, converted_call, optflags=...) -> int: ...
def minsn_t_prev_get(self) -> minsn_t: ...
def minsn_t_prev_set(self, prev) -> Any: ...
def minsn_t_r_get(self) -> mop_t: ...
def minsn_t_r_set(self, r) -> Any: ...
def minsn_t_serialize(self, b) -> int: ...
def minsn_t_set_assert(self) -> Any: ...
def minsn_t_set_cleaning_pop(self) -> Any: ...
def minsn_t_set_combinable(self) -> Any: ...
def minsn_t_set_extstx(self) -> Any: ...
def minsn_t_set_farcall(self) -> Any: ...
def minsn_t_set_fpinsn(self) -> Any: ...
def minsn_t_set_ignlowsrc(self) -> Any: ...
def minsn_t_set_inverted_jx(self) -> Any: ...
def minsn_t_set_mbarrier(self) -> Any: ...
def minsn_t_set_multimov(self) -> Any: ...
def minsn_t_set_noret_icall(self) -> Any: ...
def minsn_t_set_optional(self) -> Any: ...
def minsn_t_set_persistent(self) -> Any: ...
def minsn_t_set_split_size(self, s) -> Any: ...
def minsn_t_set_tailcall(self) -> Any: ...
def minsn_t_set_unmerged(self) -> Any: ...
def minsn_t_set_wild_match(self) -> Any: ...
def minsn_t_setaddr(self, new_ea) -> Any: ...
def minsn_t_swap(self, m) -> Any: ...
def minsn_t_swiginit(*args, **kwargs): ...
def minsn_t_swigregister(*args, **kwargs): ...
def minsn_t_was_noret_icall(self) -> bool: ...
def minsn_t_was_split(self) -> bool: ...
def minsn_t_was_unmerged(self) -> bool: ...
def minsn_visitor_t_swiginit(*args, **kwargs): ...
def minsn_visitor_t_swigregister(*args, **kwargs): ...
def minsn_visitor_t_visit_minsn(self) -> int: ...
def mlist_mop_visitor_t_changed_get(self) -> bool: ...
def mlist_mop_visitor_t_changed_set(self, changed) -> Any: ...
def mlist_mop_visitor_t_curins_get(self) -> minsn_t: ...
def mlist_mop_visitor_t_curins_set(self, curins) -> Any: ...
def mlist_mop_visitor_t_list_get(self) -> mlist_t: ...
def mlist_mop_visitor_t_list_set(self, list) -> Any: ...
def mlist_mop_visitor_t_swiginit(*args, **kwargs): ...
def mlist_mop_visitor_t_swigregister(*args, **kwargs): ...
def mlist_mop_visitor_t_topins_get(self) -> minsn_t: ...
def mlist_mop_visitor_t_topins_set(self, topins) -> Any: ...
def mlist_mop_visitor_t_visit_mop(self, op) -> int: ...
def mlist_t___eq__(self, r) -> bool: ...
def mlist_t___ge__(self, r) -> bool: ...
def mlist_t___gt__(self, r) -> bool: ...
def mlist_t___le__(self, r) -> bool: ...
def mlist_t___lt__(self, r) -> bool: ...
def mlist_t___ne__(self, r) -> bool: ...
def mlist_t__print(self) -> Any: ...
@overload
def mlist_t_add(self, r, size) -> bool: ...
@overload
def mlist_t_add(self, r) -> bool: ...
@overload
def mlist_t_add(self, ivl) -> bool: ...
@overload
def mlist_t_add(self, lst) -> bool: ...
def mlist_t_addmem(self, ea, size) -> bool: ...
def mlist_t_clear(self) -> Any: ...
def mlist_t_compare(self, r) -> int: ...
def mlist_t_count(self) -> asize_t: ...
def mlist_t_dstr(*args, **kwargs): ...
def mlist_t_empty(self) -> bool: ...
def mlist_t_has(self, r) -> bool: ...
def mlist_t_has_all(self, r, size) -> bool: ...
def mlist_t_has_any(self, r, size) -> bool: ...
def mlist_t_has_common(self, lst) -> bool: ...
def mlist_t_has_memory(self) -> bool: ...
def mlist_t_includes(self, lst) -> bool: ...
def mlist_t_intersect(self, lst) -> bool: ...
def mlist_t_is_subset_of(self, lst) -> bool: ...
def mlist_t_mem_get(self) -> ivlset_t: ...
def mlist_t_mem_set(self, mem) -> Any: ...
def mlist_t_reg_get(self) -> rlist_t: ...
def mlist_t_reg_set(self, reg) -> Any: ...
@overload
def mlist_t_sub(self, r, size) -> bool: ...
@overload
def mlist_t_sub(self, ivl) -> bool: ...
@overload
def mlist_t_sub(self, lst) -> bool: ...
def mlist_t_swap(self, r) -> Any: ...
def mlist_t_swiginit(*args, **kwargs): ...
def mlist_t_swigregister(*args, **kwargs): ...
def mnumber_t___eq__(self, r) -> bool: ...
def mnumber_t___ge__(self, r) -> bool: ...
def mnumber_t___gt__(self, r) -> bool: ...
def mnumber_t___le__(self, r) -> bool: ...
def mnumber_t___lt__(self, r) -> bool: ...
def mnumber_t___ne__(self, r) -> bool: ...
def mnumber_t_compare(self, r) -> int: ...
def mnumber_t_org_value_get(self) -> uint64: ...
def mnumber_t_org_value_set(self, org_value) -> Any: ...
def mnumber_t_swiginit(*args, **kwargs): ...
def mnumber_t_swigregister(*args, **kwargs): ...
def mnumber_t_update_value(self, val64) -> Any: ...
def mnumber_t_value_get(self) -> uint64: ...
def mnumber_t_value_set(self, value) -> Any: ...
def modify_user_lvar_info(func_ea, mli_flags, info) -> bool: ...
def modify_user_lvars(entry_ea, mlv) -> bool: ...
def mop_addr_t_insize_get(self) -> int: ...
def mop_addr_t_insize_set(self, insize) -> Any: ...
def mop_addr_t_lexcompare(self, ra) -> int: ...
def mop_addr_t_outsize_get(self) -> int: ...
def mop_addr_t_outsize_set(self, outsize) -> Any: ...
def mop_addr_t_swiginit(*args, **kwargs): ...
def mop_addr_t_swigregister(*args, **kwargs): ...
def mop_pair_t_hop_get(self) -> mop_t: ...
def mop_pair_t_hop_set(self, hop) -> Any: ...
def mop_pair_t_lop_get(self) -> mop_t: ...
def mop_pair_t_lop_set(self, lop) -> Any: ...
def mop_pair_t_swiginit(*args, **kwargs): ...
def mop_pair_t_swigregister(*args, **kwargs): ...
def mop_t___dbg_get_meminfo(self) -> qstring: ...
def mop_t___dbg_get_registered_kind(self) -> int: ...
def mop_t___eq__(self, rop) -> bool: ...
def mop_t___lt__(self, rop) -> bool: ...
def mop_t___ne__(self, rop) -> bool: ...
def mop_t__deregister(self) -> Any: ...
def mop_t__get_a(self) -> mop_addr_t: ...
def mop_t__get_b(self) -> int: ...
def mop_t__get_c(self) -> mcases_t: ...
def mop_t__get_cstr(*args, **kwargs): ...
def mop_t__get_d(self) -> minsn_t: ...
def mop_t__get_f(self) -> mcallinfo_t: ...
def mop_t__get_fpc(self) -> fnumber_t: ...
def mop_t__get_g(self) -> ea_t: ...
def mop_t__get_helper(*args, **kwargs): ...
def mop_t__get_l(self) -> lvar_ref_t: ...
def mop_t__get_nnn(self) -> mnumber_t: ...
def mop_t__get_pair(self) -> mop_pair_t: ...
def mop_t__get_r(self) -> mreg_t: ...
def mop_t__get_s(self) -> stkvar_ref_t: ...
def mop_t__get_scif(self) -> scif_t: ...
def mop_t__get_t(self) -> mopt_t: ...
def mop_t__make_blkref(self, blknum) -> Any: ...
def mop_t__make_callinfo(self, fi) -> Any: ...
def mop_t__make_cases(self, _cases) -> Any: ...
def mop_t__make_gvar(self, ea) -> Any: ...
def mop_t__make_insn(self, ins) -> Any: ...
def mop_t__make_lvar(self, mba, idx, off=...) -> Any: ...
def mop_t__make_pair(self, _pair) -> Any: ...
@overload
def mop_t__make_reg(self, reg) -> Any: ...
@overload
def mop_t__make_reg(self, reg, _size) -> Any: ...
def mop_t__make_stkvar(self, mba, off) -> Any: ...
def mop_t__make_strlit(self, str) -> Any: ...
def mop_t__obj_id(*args, **kwargs): ...
def mop_t__print(self, shins_flags=...) -> Any: ...
def mop_t__register(self) -> Any: ...
def mop_t__set_a(self, _v) -> Any: ...
def mop_t__set_b(self, _v) -> Any: ...
def mop_t__set_c(self, _v) -> Any: ...
def mop_t__set_cstr(self, _v) -> Any: ...
def mop_t__set_d(self, _v) -> Any: ...
def mop_t__set_f(self, _v) -> Any: ...
def mop_t__set_fpc(self, _v) -> Any: ...
def mop_t__set_g(self, _v) -> Any: ...
def mop_t__set_helper(self, _v) -> Any: ...
def mop_t__set_l(self, _v) -> Any: ...
def mop_t__set_nnn(self, _v) -> Any: ...
def mop_t__set_pair(self, _v) -> Any: ...
def mop_t__set_r(self, _v) -> Any: ...
def mop_t__set_s(self, _v) -> Any: ...
def mop_t__set_scif(self, _v) -> Any: ...
def mop_t__set_t(self, v) -> Any: ...
def mop_t_apply_ld_mcode(self, mcode, ea, newsize) -> Any: ...
def mop_t_apply_xds(self, ea, newsize) -> Any: ...
def mop_t_apply_xdu(self, ea, newsize) -> Any: ...
def mop_t_assign(self, rop) -> mop_t: ...
def mop_t_change_size(self, nsize, sideff=...) -> bool: ...
def mop_t_create_from_insn(self, m) -> Any: ...
def mop_t_create_from_ivlset(self, mba, ivs, fullsize) -> bool: ...
def mop_t_create_from_mlist(self, mba, lst, fullsize) -> bool: ...
def mop_t_create_from_scattered_vdloc(self, mba, name, type, loc) -> Any: ...
def mop_t_create_from_vdloc(self, mba, loc, _size) -> Any: ...
def mop_t_double_size(self, sideff=...) -> bool: ...
def mop_t_dstr(*args, **kwargs): ...
def mop_t_empty(self) -> bool: ...
def mop_t_equal_mops(self, rop, eqflags) -> bool: ...
def mop_t_erase(self) -> Any: ...
def mop_t_erase_but_keep_size(self) -> Any: ...
def mop_t_for_all_ops(self, mv, type=..., is_target=...) -> int: ...
def mop_t_for_all_scattered_submops(self, sv) -> int: ...
@overload
def mop_t_get_insn(self, code) -> minsn_t: ...
@overload
def mop_t_get_insn(self, code) -> minsn_t: ...
def mop_t_get_stkoff(self, p_off) -> bool: ...
def mop_t_get_stkvar(*args, **kwargs): ...
def mop_t_has_side_effects(self, include_ldx_and_divs=...) -> bool: ...
def mop_t_is01(self) -> bool: ...
def mop_t_is_arglist(self) -> bool: ...
@overload
def mop_t_is_bit_reg(reg) -> bool: ...
@overload
def mop_t_is_bit_reg() -> bool: ...
def mop_t_is_cc(self) -> bool: ...
def mop_t_is_ccflags(self) -> bool: ...
def mop_t_is_constant(self, is_signed=...) -> bool: ...
def mop_t_is_equal_to(self, n, is_signed=...) -> bool: ...
def mop_t_is_extended_from(self, nbytes, is_signed) -> bool: ...
@overload
def mop_t_is_glbaddr(self) -> bool: ...
@overload
def mop_t_is_glbaddr(self, ea) -> bool: ...
def mop_t_is_glbaddr_from_fixup(self) -> bool: ...
def mop_t_is_impptr_done(self) -> bool: ...
@overload
def mop_t_is_insn(self) -> bool: ...
@overload
def mop_t_is_insn(self, code) -> bool: ...
def mop_t_is_kreg(self) -> bool: ...
def mop_t_is_lowaddr(self) -> bool: ...
def mop_t_is_mob(self, serial) -> bool: ...
def mop_t_is_negative_constant(self) -> bool: ...
def mop_t_is_one(self) -> bool: ...
def mop_t_is_pcval(self) -> bool: ...
def mop_t_is_positive_constant(self) -> bool: ...
@overload
def mop_t_is_reg(self) -> bool: ...
@overload
def mop_t_is_reg(self, _r) -> bool: ...
@overload
def mop_t_is_reg(self, _r, _size) -> bool: ...
def mop_t_is_scattered(self) -> bool: ...
def mop_t_is_sign_extended_from(self, nbytes) -> bool: ...
def mop_t_is_stkaddr(self) -> bool: ...
def mop_t_is_udt(self) -> bool: ...
def mop_t_is_undef_val(self) -> bool: ...
def mop_t_is_zero(self) -> bool: ...
def mop_t_is_zero_extended_from(self, nbytes) -> bool: ...
def mop_t_lexcompare(self, rop) -> int: ...
def mop_t_make_blkref(self, blknum) -> Any: ...
def mop_t_make_first_half(self, width) -> bool: ...
def mop_t_make_fpnum(self, bytes) -> bool: ...
def mop_t_make_gvar(self, ea) -> Any: ...
def mop_t_make_helper(self, name) -> Any: ...
def mop_t_make_high_half(self, width) -> bool: ...
def mop_t_make_insn(self, ins) -> Any: ...
def mop_t_make_low_half(self, width) -> bool: ...
def mop_t_make_number(self, _value, _size, _ea=..., opnum=...) -> Any: ...
@overload
def mop_t_make_reg(self, reg) -> Any: ...
@overload
def mop_t_make_reg(self, reg, _size) -> Any: ...
def mop_t_make_reg_pair(self, loreg, hireg, halfsize) -> Any: ...
def mop_t_make_second_half(self, width) -> bool: ...
def mop_t_make_stkvar(self, mba, off) -> Any: ...
def mop_t_may_use_aliased_memory(self) -> bool: ...
def mop_t_oprops_get(self) -> uint8: ...
def mop_t_oprops_set(self, oprops) -> Any: ...
def mop_t_preserve_side_effects(self, blk, top, moved_calls=...) -> bool: ...
def mop_t_probably_floating(self) -> bool: ...
def mop_t_set_impptr_done(self) -> Any: ...
def mop_t_set_lowaddr(self) -> Any: ...
def mop_t_set_udt(self) -> Any: ...
def mop_t_set_undef_val(self) -> Any: ...
def mop_t_shift_mop(self, offset) -> bool: ...
def mop_t_signed_value(self) -> int64: ...
def mop_t_size_get(self) -> int: ...
def mop_t_size_set(self, size) -> Any: ...
def mop_t_swap(self, rop) -> Any: ...
def mop_t_swiginit(*args, **kwargs): ...
def mop_t_swigregister(*args, **kwargs): ...
def mop_t_t_get(self) -> mopt_t: ...
def mop_t_t_set(self, t) -> Any: ...
def mop_t_unsigned_value(self) -> uint64: ...
def mop_t_update_numop_value(self, val) -> Any: ...
def mop_t_valnum_get(self) -> uint16: ...
def mop_t_valnum_set(self, valnum) -> Any: ...
def mop_t_value(self, is_signed) -> uint64: ...
def mop_t_zero(self) -> Any: ...
def mop_visitor_t_prune_get(self) -> bool: ...
def mop_visitor_t_prune_set(self, prune) -> Any: ...
def mop_visitor_t_swiginit(*args, **kwargs): ...
def mop_visitor_t_swigregister(*args, **kwargs): ...
def mop_visitor_t_visit_mop(self, op, type, is_target) -> int: ...
def mopvec_t___eq__(self, r) -> bool: ...
def mopvec_t___getitem__(self, i) -> mop_t: ...
def mopvec_t___len__(self) -> size_t: ...
def mopvec_t___ne__(self, r) -> bool: ...
def mopvec_t___setitem__(self, i, v) -> Any: ...
def mopvec_t__del(self, x) -> bool: ...
def mopvec_t_add_unique(self, x) -> bool: ...
def mopvec_t_at(self, _idx) -> mop_t: ...
@overload
def mopvec_t_begin(self) -> mop_t: ...
@overload
def mopvec_t_begin(self) -> mop_t: ...
def mopvec_t_capacity(self) -> size_t: ...
def mopvec_t_clear(self) -> Any: ...
def mopvec_t_empty(self) -> bool: ...
@overload
def mopvec_t_end(self) -> mop_t: ...
@overload
def mopvec_t_end(self) -> mop_t: ...
@overload
def mopvec_t_erase(self, it) -> mop_t: ...
@overload
def mopvec_t_erase(self, first, last) -> mop_t: ...
def mopvec_t_extract(self) -> mop_t: ...
@overload
def mopvec_t_find(self, x) -> mop_t: ...
@overload
def mopvec_t_find(self, x) -> mop_t: ...
def mopvec_t_grow(self, x=...) -> Any: ...
def mopvec_t_has(self, x) -> bool: ...
def mopvec_t_inject(self, s, len) -> Any: ...
def mopvec_t_insert(self, it, x) -> mop_t: ...
def mopvec_t_pop_back(self) -> Any: ...
@overload
def mopvec_t_push_back(self, x) -> Any: ...
@overload
def mopvec_t_push_back(self) -> mop_t: ...
def mopvec_t_qclear(self) -> Any: ...
def mopvec_t_reserve(self, cnt) -> Any: ...
@overload
def mopvec_t_resize(self, _newsize, x) -> Any: ...
@overload
def mopvec_t_resize(self, _newsize) -> Any: ...
def mopvec_t_size(self) -> size_t: ...
def mopvec_t_swap(self, r) -> Any: ...
def mopvec_t_swiginit(*args, **kwargs): ...
def mopvec_t_swigregister(*args, **kwargs): ...
def mopvec_t_truncate(self) -> Any: ...
def mreg2reg(reg, width) -> int: ...
def must_mcode_close_block(mcode, including_calls) -> bool: ...
def negate_mcode_relation(code) -> mcode_t: ...
def negated_relation(op) -> ctype_t: ...
def new_Hexrays_Hooks(_self, _flags=..., _hkcb_flags=...) -> Hexrays_Hooks: ...
def new_array_of_bitsets(x) -> array_of_bitsets: ...
def new_array_of_ivlsets(x) -> array_of_ivlsets: ...
def new_bit_bound_t(n=..., s=...) -> bit_bound_t: ...
def new_bitset_t(m) -> bitset_t: ...
def new_block_chains_iterator_t() -> block_chains_iterator_t: ...
def new_block_chains_t() -> block_chains_t: ...
def new_block_chains_vec_t(x) -> block_chains_vec_t: ...
def new_boundaries_iterator_t() -> boundaries_iterator_t: ...
def new_boundaries_t() -> boundaries_t: ...
def new_carg_t() -> carg_t: ...
def new_carglist_t(ftype, fl=...) -> carglist_t: ...
def new_casm_t(r) -> casm_t: ...
def new_cblock_t() -> cblock_t: ...
def new_ccase_t() -> ccase_t: ...
def new_ccases_t() -> ccases_t: ...
def new_cdg_insn_iterator_t(r) -> cdg_insn_iterator_t: ...
def new_cdo_t() -> cdo_t: ...
def new_ceinsn_t() -> ceinsn_t: ...
def new_cexpr_t(r) -> cexpr_t: ...
def new_cfor_t() -> cfor_t: ...
def new_cfunc_parentee_t(_self, f, post=...) -> cfunc_parentee_t: ...
def new_cfuncptr_t(r) -> cfuncptr_t: ...
def new_cgoto_t() -> cgoto_t: ...
def new_chain_keeper_t(_gc) -> chain_keeper_t: ...
def new_chain_t(_k, w=...) -> chain_t: ...
def new_chain_visitor_t(_self) -> chain_visitor_t: ...
def new_cif_t(r) -> cif_t: ...
def new_cinsn_list_t(x) -> cinsn_list_t: ...
def new_cinsn_list_t_iterator() -> cinsn_list_t_iterator: ...
def new_cinsn_t(r) -> cinsn_t: ...
def new_cinsnptrvec_t(x) -> cinsnptrvec_t: ...
def new_citem_cmt_t(s) -> citem_cmt_t: ...
def new_citem_locator_t(i) -> citem_locator_t: ...
def new_citem_t(o=...) -> citem_t: ...
def new_cloop_t(r) -> cloop_t: ...
def new_cnumber_t(_opnum=...) -> cnumber_t: ...
def new_creturn_t() -> creturn_t: ...
def new_cswitch_t() -> cswitch_t: ...
def new_ctext_position_t(_lnnum=..., _x=..., _y=...) -> ctext_position_t: ...
def new_ctree_anchor_t() -> ctree_anchor_t: ...
def new_ctree_item_t() -> ctree_item_t: ...
def new_ctree_items_t(x) -> ctree_items_t: ...
def new_ctree_parentee_t(_self, post=...) -> ctree_parentee_t: ...
def new_ctree_visitor_t(_self, _flags) -> ctree_visitor_t: ...
def new_cwhile_t() -> cwhile_t: ...
def new_eamap_iterator_t() -> eamap_iterator_t: ...
def new_eamap_t() -> eamap_t: ...
def new_fnumber_t() -> fnumber_t: ...
def new_gco_info_t() -> gco_info_t: ...
def new_graph_chains_t() -> graph_chains_t: ...
def new_hexrays_failure_t(c, ea, buf) -> hexrays_failure_t: ...
def new_hexwarn_t() -> hexwarn_t: ...
def new_hexwarns_t(x) -> hexwarns_t: ...
def new_history_item_t(_ea, p) -> history_item_t: ...
def new_history_t() -> history_t: ...
def new_iterator(n=...) -> iterator: ...
def new_ivl_t(_off=..., _size=...) -> ivl_t: ...
def new_ivl_with_name_t() -> ivl_with_name_t: ...
def new_ivlset_t(ivl) -> ivlset_t: ...
def new_lvar_locator_t(loc, ea) -> lvar_locator_t: ...
def new_lvar_mapping_iterator_t() -> lvar_mapping_iterator_t: ...
def new_lvar_mapping_t() -> lvar_mapping_t: ...
def new_lvar_ref_t(r) -> lvar_ref_t: ...
def new_lvar_saved_info_t() -> lvar_saved_info_t: ...
def new_lvar_saved_infos_t(x) -> lvar_saved_infos_t: ...
def new_lvar_uservec_t() -> lvar_uservec_t: ...
def new_lvars_t() -> lvars_t: ...
def new_mba_range_iterator_t() -> mba_range_iterator_t: ...
def new_mba_ranges_t(r) -> mba_ranges_t: ...
def new_mcallarg_t(rarg) -> mcallarg_t: ...
def new_mcallargs_t(x) -> mcallargs_t: ...
def new_mcallinfo_t(_callee=..., _sargs=...) -> mcallinfo_t: ...
def new_mcases_t() -> mcases_t: ...
def new_microcode_filter_t(_self) -> microcode_filter_t: ...
def new_minsn_t(m) -> minsn_t: ...
def new_minsn_visitor_t(_self, _mba=..., _blk=..., _topins=...) -> minsn_visitor_t: ...
def new_mlist_mop_visitor_t(_self) -> mlist_mop_visitor_t: ...
def new_mlist_t(r, size) -> mlist_t: ...
def new_mnumber_t(v, _ea=..., n=...) -> mnumber_t: ...
def new_mop_addr_t(ra, isz, osz) -> mop_addr_t: ...
def new_mop_pair_t() -> mop_pair_t: ...
def new_mop_t(_r, _s) -> mop_t: ...
def new_mop_visitor_t(_self, _mba=..., _blk=..., _topins=...) -> mop_visitor_t: ...
def new_mopvec_t(x) -> mopvec_t: ...
def new_number_format_t(_opnum=...) -> number_format_t: ...
def new_op_parent_info_t(_mba=..., _blk=..., _topins=...) -> op_parent_info_t: ...
def new_operand_locator_t(_ea, _opnum) -> operand_locator_t: ...
def new_optblock_t(_self) -> optblock_t: ...
def new_optinsn_t(_self) -> optinsn_t: ...
def new_qstring_printer_t(f, tags) -> qstring_printer_t: ...
def new_qvector_carg_t(x) -> qvector_carg_t: ...
def new_qvector_ccase_t(x) -> qvector_ccase_t: ...
def new_qvector_history_t(x) -> qvector_history_t: ...
def new_qvector_lvar_t(x) -> qvector_lvar_t: ...
def new_rlist_t(reg, width) -> rlist_t: ...
def new_scif_t(_mba, tif, n=...) -> scif_t: ...
def new_scif_visitor_t(_self) -> scif_visitor_t: ...
def new_stkvar_ref_t(m, o) -> stkvar_ref_t: ...
def new_treeloc_t() -> treeloc_t: ...
def new_udc_filter_t(_self) -> udc_filter_t: ...
def new_udcall_map_iterator_t() -> udcall_map_iterator_t: ...
def new_udcall_t() -> udcall_t: ...
def new_ui_stroff_applicator_t(_self) -> ui_stroff_applicator_t: ...
def new_ui_stroff_op_t() -> ui_stroff_op_t: ...
def new_ui_stroff_ops_t(x) -> ui_stroff_ops_t: ...
def new_user_cmts_iterator_t() -> user_cmts_iterator_t: ...
def new_user_cmts_t() -> user_cmts_t: ...
def new_user_iflags_iterator_t() -> user_iflags_iterator_t: ...
def new_user_iflags_t() -> user_iflags_t: ...
def new_user_labels_iterator_t() -> user_labels_iterator_t: ...
def new_user_labels_t() -> user_labels_t: ...
def new_user_lvar_modifier_t(_self) -> user_lvar_modifier_t: ...
def new_user_numforms_iterator_t() -> user_numforms_iterator_t: ...
def new_user_numforms_t() -> user_numforms_t: ...
def new_user_unions_iterator_t() -> user_unions_iterator_t: ...
def new_user_unions_t() -> user_unions_t: ...
def new_uval_ivl_ivlset_t(ivl) -> uval_ivl_ivlset_t: ...
def new_uval_ivl_t(_off, _size) -> uval_ivl_t: ...
def new_valrng_t(r) -> valrng_t: ...
def new_var_ref_t() -> var_ref_t: ...
def new_vc_printer_t(_self, f) -> vc_printer_t: ...
def new_vd_failure_t(_hf) -> vd_failure_t: ...
def new_vd_interr_t(ea, buf) -> vd_interr_t: ...
def new_vd_printer_t(_self) -> vd_printer_t: ...
def new_vdloc_t() -> vdloc_t: ...
def new_vivl_t(op) -> vivl_t: ...
def new_voff_t(op) -> voff_t: ...
def number_format_t_flags32_get(self) -> flags_t: ...
def number_format_t_flags32_set(self, flags32) -> Any: ...
def number_format_t_flags_get(self) -> flags64_t: ...
def number_format_t_flags_set(self, flags) -> Any: ...
def number_format_t_get_radix(self) -> int: ...
def number_format_t_has_unmutable_type(self) -> bool: ...
def number_format_t_is_char(self) -> bool: ...
def number_format_t_is_dec(self) -> bool: ...
def number_format_t_is_enum(self) -> bool: ...
def number_format_t_is_fixed(self) -> bool: ...
def number_format_t_is_hex(self) -> bool: ...
def number_format_t_is_numop(self) -> bool: ...
def number_format_t_is_oct(self) -> bool: ...
def number_format_t_is_stroff(self) -> bool: ...
def number_format_t_needs_to_be_inverted(self) -> bool: ...
def number_format_t_opnum_get(self) -> char: ...
def number_format_t_opnum_set(self, opnum) -> Any: ...
def number_format_t_org_nbytes_get(self) -> char: ...
def number_format_t_org_nbytes_set(self, org_nbytes) -> Any: ...
def number_format_t_props_get(self) -> char: ...
def number_format_t_props_set(self, props) -> Any: ...
def number_format_t_serial_get(self) -> uchar: ...
def number_format_t_serial_set(self, serial) -> Any: ...
def number_format_t_swiginit(*args, **kwargs): ...
def number_format_t_swigregister(*args, **kwargs): ...
def number_format_t_type_name_get(*args, **kwargs): ...
def number_format_t_type_name_set(self, type_name) -> Any: ...
def op_parent_info_t_blk_get(self) -> mblock_t: ...
def op_parent_info_t_blk_set(self, blk) -> Any: ...
def op_parent_info_t_curins_get(self) -> minsn_t: ...
def op_parent_info_t_curins_set(self, curins) -> Any: ...
def op_parent_info_t_mba_get(self) -> mba_t: ...
def op_parent_info_t_mba_set(self, mba) -> Any: ...
def op_parent_info_t_swiginit(*args, **kwargs): ...
def op_parent_info_t_swigregister(*args, **kwargs): ...
def op_parent_info_t_topins_get(self) -> minsn_t: ...
def op_parent_info_t_topins_set(self, topins) -> Any: ...
def op_uses_x(op) -> bool: ...
def op_uses_y(op) -> bool: ...
def op_uses_z(op) -> bool: ...
def open_pseudocode(ea, flags) -> vdui_t: ...
def operand_locator_t___eq__(self, r) -> bool: ...
def operand_locator_t___ge__(self, r) -> bool: ...
def operand_locator_t___gt__(self, r) -> bool: ...
def operand_locator_t___le__(self, r) -> bool: ...
def operand_locator_t___lt__(self, r) -> bool: ...
def operand_locator_t___ne__(self, r) -> bool: ...
def operand_locator_t_compare(self, r) -> int: ...
def operand_locator_t_ea_get(self) -> ea_t: ...
def operand_locator_t_ea_set(self, ea) -> Any: ...
def operand_locator_t_opnum_get(self) -> int: ...
def operand_locator_t_opnum_set(self, opnum) -> Any: ...
def operand_locator_t_swiginit(*args, **kwargs): ...
def operand_locator_t_swigregister(*args, **kwargs): ...
def optblock_t_func(self, blk) -> int: ...
def optblock_t_install(self) -> Any: ...
def optblock_t_remove(self) -> bool: ...
def optblock_t_swiginit(*args, **kwargs): ...
def optblock_t_swigregister(*args, **kwargs): ...
def optinsn_t_func(self, blk, ins, optflags) -> int: ...
def optinsn_t_install(self) -> Any: ...
def optinsn_t_remove(self) -> bool: ...
def optinsn_t_swiginit(*args, **kwargs): ...
def optinsn_t_swigregister(*args, **kwargs): ...
def parse_user_call(udc, decl, silent) -> bool: ...
def partial_type_num(type) -> int: ...
def print_vdloc(loc, nbytes) -> Any: ...
def qstring_printer_t__print(self, indent, format) -> int: ...
def qstring_printer_t_get_s(self) -> qstring: ...
def qstring_printer_t_s_get(*args, **kwargs): ...
def qstring_printer_t_s_set(self, s) -> Any: ...
def qstring_printer_t_swiginit(*args, **kwargs): ...
def qstring_printer_t_swigregister(*args, **kwargs): ...
def qstring_printer_t_with_tags_get(self) -> bool: ...
def qstring_printer_t_with_tags_set(self, with_tags) -> Any: ...
def qswap(a, b) -> Any: ...
def qvector_carg_t___eq__(self, r) -> bool: ...
def qvector_carg_t___getitem__(self, i) -> carg_t: ...
def qvector_carg_t___len__(self) -> size_t: ...
def qvector_carg_t___ne__(self, r) -> bool: ...
def qvector_carg_t___setitem__(self, i, v) -> Any: ...
def qvector_carg_t__del(self, x) -> bool: ...
def qvector_carg_t_add_unique(self, x) -> bool: ...
def qvector_carg_t_at(self, _idx) -> carg_t: ...
@overload
def qvector_carg_t_begin(self) -> carg_t: ...
@overload
def qvector_carg_t_begin(self) -> carg_t: ...
def qvector_carg_t_capacity(self) -> size_t: ...
def qvector_carg_t_clear(self) -> Any: ...
def qvector_carg_t_empty(self) -> bool: ...
@overload
def qvector_carg_t_end(self) -> carg_t: ...
@overload
def qvector_carg_t_end(self) -> carg_t: ...
@overload
def qvector_carg_t_erase(self, it) -> carg_t: ...
@overload
def qvector_carg_t_erase(self, first, last) -> carg_t: ...
def qvector_carg_t_extract(self) -> carg_t: ...
@overload
def qvector_carg_t_find(self, x) -> carg_t: ...
@overload
def qvector_carg_t_find(self, x) -> carg_t: ...
def qvector_carg_t_grow(self, x=...) -> Any: ...
def qvector_carg_t_has(self, x) -> bool: ...
def qvector_carg_t_inject(self, s, len) -> Any: ...
def qvector_carg_t_insert(self, it, x) -> carg_t: ...
def qvector_carg_t_pop_back(self) -> Any: ...
@overload
def qvector_carg_t_push_back(self, x) -> Any: ...
@overload
def qvector_carg_t_push_back(self) -> carg_t: ...
def qvector_carg_t_qclear(self) -> Any: ...
def qvector_carg_t_reserve(self, cnt) -> Any: ...
@overload
def qvector_carg_t_resize(self, _newsize, x) -> Any: ...
@overload
def qvector_carg_t_resize(self, _newsize) -> Any: ...
def qvector_carg_t_size(self) -> size_t: ...
def qvector_carg_t_swap(self, r) -> Any: ...
def qvector_carg_t_swiginit(*args, **kwargs): ...
def qvector_carg_t_swigregister(*args, **kwargs): ...
def qvector_carg_t_truncate(self) -> Any: ...
def qvector_ccase_t___eq__(self, r) -> bool: ...
def qvector_ccase_t___getitem__(self, i) -> ccase_t: ...
def qvector_ccase_t___len__(self) -> size_t: ...
def qvector_ccase_t___ne__(self, r) -> bool: ...
def qvector_ccase_t___setitem__(self, i, v) -> Any: ...
def qvector_ccase_t__del(self, x) -> bool: ...
def qvector_ccase_t_add_unique(self, x) -> bool: ...
def qvector_ccase_t_at(self, _idx) -> ccase_t: ...
@overload
def qvector_ccase_t_begin(self) -> ccase_t: ...
@overload
def qvector_ccase_t_begin(self) -> ccase_t: ...
def qvector_ccase_t_capacity(self) -> size_t: ...
def qvector_ccase_t_clear(self) -> Any: ...
def qvector_ccase_t_empty(self) -> bool: ...
@overload
def qvector_ccase_t_end(self) -> ccase_t: ...
@overload
def qvector_ccase_t_end(self) -> ccase_t: ...
@overload
def qvector_ccase_t_erase(self, it) -> ccase_t: ...
@overload
def qvector_ccase_t_erase(self, first, last) -> ccase_t: ...
def qvector_ccase_t_extract(self) -> ccase_t: ...
@overload
def qvector_ccase_t_find(self, x) -> ccase_t: ...
@overload
def qvector_ccase_t_find(self, x) -> ccase_t: ...
def qvector_ccase_t_grow(self, x=...) -> Any: ...
def qvector_ccase_t_has(self, x) -> bool: ...
def qvector_ccase_t_inject(self, s, len) -> Any: ...
def qvector_ccase_t_insert(self, it, x) -> ccase_t: ...
def qvector_ccase_t_pop_back(self) -> Any: ...
@overload
def qvector_ccase_t_push_back(self, x) -> Any: ...
@overload
def qvector_ccase_t_push_back(self) -> ccase_t: ...
def qvector_ccase_t_qclear(self) -> Any: ...
def qvector_ccase_t_reserve(self, cnt) -> Any: ...
@overload
def qvector_ccase_t_resize(self, _newsize, x) -> Any: ...
@overload
def qvector_ccase_t_resize(self, _newsize) -> Any: ...
def qvector_ccase_t_size(self) -> size_t: ...
def qvector_ccase_t_swap(self, r) -> Any: ...
def qvector_ccase_t_swiginit(*args, **kwargs): ...
def qvector_ccase_t_swigregister(*args, **kwargs): ...
def qvector_ccase_t_truncate(self) -> Any: ...
def qvector_history_t___eq__(self, r) -> bool: ...
def qvector_history_t___getitem__(self, i) -> history_item_t: ...
def qvector_history_t___len__(self) -> size_t: ...
def qvector_history_t___ne__(self, r) -> bool: ...
def qvector_history_t___setitem__(self, i, v) -> Any: ...
def qvector_history_t__del(self, x) -> bool: ...
def qvector_history_t_add_unique(self, x) -> bool: ...
def qvector_history_t_at(self, _idx) -> history_item_t: ...
@overload
def qvector_history_t_begin(self) -> history_item_t: ...
@overload
def qvector_history_t_begin(self) -> history_item_t: ...
def qvector_history_t_capacity(self) -> size_t: ...
def qvector_history_t_clear(self) -> Any: ...
def qvector_history_t_empty(self) -> bool: ...
@overload
def qvector_history_t_end(self) -> history_item_t: ...
@overload
def qvector_history_t_end(self) -> history_item_t: ...
@overload
def qvector_history_t_erase(self, it) -> history_item_t: ...
@overload
def qvector_history_t_erase(self, first, last) -> history_item_t: ...
def qvector_history_t_extract(self) -> history_item_t: ...
@overload
def qvector_history_t_find(self, x) -> history_item_t: ...
@overload
def qvector_history_t_find(self, x) -> history_item_t: ...
def qvector_history_t_grow(self, x=...) -> Any: ...
def qvector_history_t_has(self, x) -> bool: ...
def qvector_history_t_inject(self, s, len) -> Any: ...
def qvector_history_t_insert(self, it, x) -> history_item_t: ...
def qvector_history_t_pop_back(self) -> Any: ...
@overload
def qvector_history_t_push_back(self, x) -> Any: ...
@overload
def qvector_history_t_push_back(self) -> history_item_t: ...
def qvector_history_t_qclear(self) -> Any: ...
def qvector_history_t_reserve(self, cnt) -> Any: ...
@overload
def qvector_history_t_resize(self, _newsize, x) -> Any: ...
@overload
def qvector_history_t_resize(self, _newsize) -> Any: ...
def qvector_history_t_size(self) -> size_t: ...
def qvector_history_t_swap(self, r) -> Any: ...
def qvector_history_t_swiginit(*args, **kwargs): ...
def qvector_history_t_swigregister(*args, **kwargs): ...
def qvector_history_t_truncate(self) -> Any: ...
def qvector_lvar_t___eq__(self, r) -> bool: ...
def qvector_lvar_t___getitem__(self, i) -> lvar_t: ...
def qvector_lvar_t___len__(self) -> size_t: ...
def qvector_lvar_t___ne__(self, r) -> bool: ...
def qvector_lvar_t___setitem__(self, i, v) -> Any: ...
def qvector_lvar_t__del(self, x) -> bool: ...
def qvector_lvar_t_add_unique(self, x) -> bool: ...
def qvector_lvar_t_at(self, _idx) -> lvar_t: ...
@overload
def qvector_lvar_t_begin(self) -> lvar_t: ...
@overload
def qvector_lvar_t_begin(self) -> lvar_t: ...
def qvector_lvar_t_capacity(self) -> size_t: ...
def qvector_lvar_t_clear(self) -> Any: ...
def qvector_lvar_t_empty(self) -> bool: ...
@overload
def qvector_lvar_t_end(self) -> lvar_t: ...
@overload
def qvector_lvar_t_end(self) -> lvar_t: ...
@overload
def qvector_lvar_t_erase(self, it) -> lvar_t: ...
@overload
def qvector_lvar_t_erase(self, first, last) -> lvar_t: ...
def qvector_lvar_t_extract(self) -> lvar_t: ...
@overload
def qvector_lvar_t_find(self, x) -> lvar_t: ...
@overload
def qvector_lvar_t_find(self, x) -> lvar_t: ...
def qvector_lvar_t_grow(self, x=...) -> Any: ...
def qvector_lvar_t_has(self, x) -> bool: ...
def qvector_lvar_t_inject(self, s, len) -> Any: ...
def qvector_lvar_t_insert(self, it, x) -> lvar_t: ...
def qvector_lvar_t_pop_back(self) -> Any: ...
@overload
def qvector_lvar_t_push_back(self, x) -> Any: ...
@overload
def qvector_lvar_t_push_back(self) -> lvar_t: ...
def qvector_lvar_t_qclear(self) -> Any: ...
def qvector_lvar_t_reserve(self, cnt) -> Any: ...
@overload
def qvector_lvar_t_resize(self, _newsize, x) -> Any: ...
@overload
def qvector_lvar_t_resize(self, _newsize) -> Any: ...
def qvector_lvar_t_size(self) -> size_t: ...
def qvector_lvar_t_swap(self, r) -> Any: ...
def qvector_lvar_t_swiginit(*args, **kwargs): ...
def qvector_lvar_t_swigregister(*args, **kwargs): ...
def qvector_lvar_t_truncate(self) -> Any: ...
def reg2mreg(reg) -> mreg_t: ...
def remitem(e) -> Any: ...
def rename_lvar(func_ea, oldname, newname) -> bool: ...
def restore_user_cmts(func_ea) -> user_cmts_t: ...
def restore_user_defined_calls(udcalls, func_ea) -> bool: ...
def restore_user_iflags(func_ea) -> user_iflags_t: ...
def restore_user_labels(func_ea) -> user_labels_t: ...
def restore_user_labels2(func_ea, func=...) -> user_labels_t: ...
def restore_user_lvar_settings(lvinf, func_ea) -> bool: ...
def restore_user_numforms(func_ea) -> user_numforms_t: ...
def restore_user_unions(func_ea) -> user_unions_t: ...
def rlist_t_dstr(*args, **kwargs): ...
def rlist_t_swiginit(*args, **kwargs): ...
def rlist_t_swigregister(*args, **kwargs): ...
def save_user_cmts(func_ea, user_cmts) -> Any: ...
def save_user_defined_calls(func_ea, udcalls) -> Any: ...
def save_user_iflags(func_ea, iflags) -> Any: ...
def save_user_labels(func_ea, user_labels) -> Any: ...
def save_user_labels2(func_ea, user_labels, func=...) -> Any: ...
def save_user_lvar_settings(func_ea, lvinf) -> Any: ...
def save_user_numforms(func_ea, numforms) -> Any: ...
def save_user_unions(func_ea, unions) -> Any: ...
def scif_t_mba_get(self) -> mba_t: ...
def scif_t_mba_set(self, mba) -> Any: ...
def scif_t_name_get(*args, **kwargs): ...
def scif_t_name_set(self, name) -> Any: ...
def scif_t_swiginit(*args, **kwargs): ...
def scif_t_swigregister(*args, **kwargs): ...
def scif_t_type_get(self) -> tinfo_t: ...
def scif_t_type_set(self, type) -> Any: ...
def scif_visitor_t_swiginit(*args, **kwargs): ...
def scif_visitor_t_swigregister(*args, **kwargs): ...
def scif_visitor_t_visit_scif_mop(self, r, off) -> int: ...
def select_udt_by_offset(udts, ops, applicator) -> int: ...
def send_database(err, silent) -> Any: ...
def set2jcnd(code) -> mcode_t: ...
def set_type(id, tif, source, force=...) -> bool: ...
def simple_graph_t_colored_gdl_edges_get(self) -> bool: ...
def simple_graph_t_colored_gdl_edges_set(self, colored_gdl_edges) -> Any: ...
def simple_graph_t_swigregister(*args, **kwargs): ...
def simple_graph_t_title_get(*args, **kwargs): ...
def simple_graph_t_title_set(self, title) -> Any: ...
def stkvar_ref_t___eq__(self, r) -> bool: ...
def stkvar_ref_t___ge__(self, r) -> bool: ...
def stkvar_ref_t___gt__(self, r) -> bool: ...
def stkvar_ref_t___le__(self, r) -> bool: ...
def stkvar_ref_t___lt__(self, r) -> bool: ...
def stkvar_ref_t___ne__(self, r) -> bool: ...
def stkvar_ref_t_compare(self, r) -> int: ...
def stkvar_ref_t_get_stkvar(*args, **kwargs): ...
def stkvar_ref_t_mba_get(self) -> mba_t: ...
def stkvar_ref_t_off_get(self) -> sval_t: ...
def stkvar_ref_t_off_set(self, off) -> Any: ...
def stkvar_ref_t_swap(self, r) -> Any: ...
def stkvar_ref_t_swiginit(*args, **kwargs): ...
def stkvar_ref_t_swigregister(*args, **kwargs): ...
def swap_mcode_relation(code) -> mcode_t: ...
def swapped_relation(op) -> ctype_t: ...
def term_hexrays_plugin() -> Any: ...
def treeloc_t___eq__(self, r) -> bool: ...
def treeloc_t___lt__(self, r) -> bool: ...
def treeloc_t_ea_get(self) -> ea_t: ...
def treeloc_t_ea_set(self, ea) -> Any: ...
def treeloc_t_itp_get(self) -> item_preciser_t: ...
def treeloc_t_itp_set(self, itp) -> Any: ...
def treeloc_t_swiginit(*args, **kwargs): ...
def treeloc_t_swigregister(*args, **kwargs): ...
def udc_filter_t_apply(self, cdg) -> merror_t: ...
def udc_filter_t_cleanup(self) -> Any: ...
def udc_filter_t_empty(self) -> bool: ...
def udc_filter_t_init(self, decl) -> bool: ...
def udc_filter_t_install(self) -> Any: ...
def udc_filter_t_match(self, cdg) -> bool: ...
def udc_filter_t_remove(self) -> bool: ...
def udc_filter_t_swiginit(*args, **kwargs): ...
def udc_filter_t_swigregister(*args, **kwargs): ...
def udcall_map_begin(map) -> udcall_map_iterator_t: ...
def udcall_map_clear(map) -> Any: ...
def udcall_map_end(map) -> udcall_map_iterator_t: ...
def udcall_map_erase(map, p) -> Any: ...
def udcall_map_find(map, key) -> udcall_map_iterator_t: ...
def udcall_map_first(*args, **kwargs): ...
def udcall_map_free(map) -> Any: ...
def udcall_map_insert(map, key, val) -> udcall_map_iterator_t: ...
def udcall_map_iterator_t___eq__(self, p) -> bool: ...
def udcall_map_iterator_t___ne__(self, p) -> bool: ...
def udcall_map_iterator_t_swiginit(*args, **kwargs): ...
def udcall_map_iterator_t_swigregister(*args, **kwargs): ...
def udcall_map_iterator_t_x_get(self) -> iterator_word: ...
def udcall_map_iterator_t_x_set(self, x) -> Any: ...
def udcall_map_new(*args, **kwargs): ...
def udcall_map_next(p) -> udcall_map_iterator_t: ...
def udcall_map_prev(p) -> udcall_map_iterator_t: ...
def udcall_map_second(p) -> udcall_t: ...
def udcall_map_size(map) -> size_t: ...
def udcall_t___eq__(self, r) -> bool: ...
def udcall_t___ge__(self, r) -> bool: ...
def udcall_t___gt__(self, r) -> bool: ...
def udcall_t___le__(self, r) -> bool: ...
def udcall_t___lt__(self, r) -> bool: ...
def udcall_t___ne__(self, r) -> bool: ...
def udcall_t_compare(self, r) -> int: ...
def udcall_t_empty(self) -> bool: ...
def udcall_t_name_get(*args, **kwargs): ...
def udcall_t_name_set(self, name) -> Any: ...
def udcall_t_swiginit(*args, **kwargs): ...
def udcall_t_swigregister(*args, **kwargs): ...
def udcall_t_tif_get(self) -> tinfo_t: ...
def udcall_t_tif_set(self, tif) -> Any: ...
def ui_stroff_applicator_t_apply(self, opnum, path, top_tif, spath) -> bool: ...
def ui_stroff_applicator_t_swiginit(*args, **kwargs): ...
def ui_stroff_applicator_t_swigregister(*args, **kwargs): ...
def ui_stroff_op_t___eq__(self, r) -> bool: ...
def ui_stroff_op_t___ne__(self, r) -> bool: ...
def ui_stroff_op_t_offset_get(self) -> uval_t: ...
def ui_stroff_op_t_offset_set(self, offset) -> Any: ...
def ui_stroff_op_t_swiginit(*args, **kwargs): ...
def ui_stroff_op_t_swigregister(*args, **kwargs): ...
def ui_stroff_op_t_text_get(*args, **kwargs): ...
def ui_stroff_op_t_text_set(self, text) -> Any: ...
def ui_stroff_ops_t___eq__(self, r) -> bool: ...
def ui_stroff_ops_t___getitem__(self, i) -> ui_stroff_op_t: ...
def ui_stroff_ops_t___len__(self) -> size_t: ...
def ui_stroff_ops_t___ne__(self, r) -> bool: ...
def ui_stroff_ops_t___setitem__(self, i, v) -> Any: ...
def ui_stroff_ops_t__del(self, x) -> bool: ...
def ui_stroff_ops_t_add_unique(self, x) -> bool: ...
def ui_stroff_ops_t_at(self, _idx) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_begin(self) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_begin(self) -> ui_stroff_op_t: ...
def ui_stroff_ops_t_capacity(self) -> size_t: ...
def ui_stroff_ops_t_clear(self) -> Any: ...
def ui_stroff_ops_t_empty(self) -> bool: ...
@overload
def ui_stroff_ops_t_end(self) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_end(self) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_erase(self, it) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_erase(self, first, last) -> ui_stroff_op_t: ...
def ui_stroff_ops_t_extract(self) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_find(self, x) -> ui_stroff_op_t: ...
@overload
def ui_stroff_ops_t_find(self, x) -> ui_stroff_op_t: ...
def ui_stroff_ops_t_grow(self, x=...) -> Any: ...
def ui_stroff_ops_t_has(self, x) -> bool: ...
def ui_stroff_ops_t_inject(self, s, len) -> Any: ...
def ui_stroff_ops_t_insert(self, it, x) -> ui_stroff_op_t: ...
def ui_stroff_ops_t_pop_back(self) -> Any: ...
@overload
def ui_stroff_ops_t_push_back(self, x) -> Any: ...
@overload
def ui_stroff_ops_t_push_back(self) -> ui_stroff_op_t: ...
def ui_stroff_ops_t_qclear(self) -> Any: ...
def ui_stroff_ops_t_reserve(self, cnt) -> Any: ...
@overload
def ui_stroff_ops_t_resize(self, _newsize, x) -> Any: ...
@overload
def ui_stroff_ops_t_resize(self, _newsize) -> Any: ...
def ui_stroff_ops_t_size(self) -> size_t: ...
def ui_stroff_ops_t_swap(self, r) -> Any: ...
def ui_stroff_ops_t_swiginit(*args, **kwargs): ...
def ui_stroff_ops_t_swigregister(*args, **kwargs): ...
def ui_stroff_ops_t_truncate(self) -> Any: ...
def user_cmts_begin(map) -> user_cmts_iterator_t: ...
def user_cmts_clear(map) -> Any: ...
def user_cmts_end(map) -> user_cmts_iterator_t: ...
def user_cmts_erase(map, p) -> Any: ...
def user_cmts_find(map, key) -> user_cmts_iterator_t: ...
def user_cmts_first(p) -> treeloc_t: ...
def user_cmts_free(map) -> Any: ...
def user_cmts_insert(map, key, val) -> user_cmts_iterator_t: ...
def user_cmts_iterator_t___eq__(self, p) -> bool: ...
def user_cmts_iterator_t___ne__(self, p) -> bool: ...
def user_cmts_iterator_t_swiginit(*args, **kwargs): ...
def user_cmts_iterator_t_swigregister(*args, **kwargs): ...
def user_cmts_iterator_t_x_get(self) -> iterator_word: ...
def user_cmts_iterator_t_x_set(self, x) -> Any: ...
def user_cmts_new() -> user_cmts_t: ...
def user_cmts_next(p) -> user_cmts_iterator_t: ...
def user_cmts_prev(p) -> user_cmts_iterator_t: ...
def user_cmts_second(p) -> citem_cmt_t: ...
def user_cmts_size(map) -> size_t: ...
def user_cmts_t_at(self, _Keyval) -> citem_cmt_t: ...
def user_cmts_t_size(self) -> size_t: ...
def user_cmts_t_swiginit(*args, **kwargs): ...
def user_cmts_t_swigregister(*args, **kwargs): ...
def user_iflags_begin(map) -> user_iflags_iterator_t: ...
def user_iflags_clear(map) -> Any: ...
def user_iflags_end(map) -> user_iflags_iterator_t: ...
def user_iflags_erase(map, p) -> Any: ...
def user_iflags_find(map, key) -> user_iflags_iterator_t: ...
def user_iflags_first(p) -> citem_locator_t: ...
def user_iflags_free(map) -> Any: ...
def user_iflags_insert(map, key, val) -> user_iflags_iterator_t: ...
def user_iflags_iterator_t___eq__(self, p) -> bool: ...
def user_iflags_iterator_t___ne__(self, p) -> bool: ...
def user_iflags_iterator_t_swiginit(*args, **kwargs): ...
def user_iflags_iterator_t_swigregister(*args, **kwargs): ...
def user_iflags_iterator_t_x_get(self) -> iterator_word: ...
def user_iflags_iterator_t_x_set(self, x) -> Any: ...
def user_iflags_new() -> user_iflags_t: ...
def user_iflags_next(p) -> user_iflags_iterator_t: ...
def user_iflags_prev(p) -> user_iflags_iterator_t: ...
def user_iflags_second(*args, **kwargs): ...
def user_iflags_size(map) -> size_t: ...
def user_iflags_t_at(*args, **kwargs): ...
def user_iflags_t_size(self) -> size_t: ...
def user_iflags_t_swiginit(*args, **kwargs): ...
def user_iflags_t_swigregister(*args, **kwargs): ...
def user_labels_begin(map) -> user_labels_iterator_t: ...
def user_labels_clear(map) -> Any: ...
def user_labels_end(map) -> user_labels_iterator_t: ...
def user_labels_erase(map, p) -> Any: ...
def user_labels_find(map, key) -> user_labels_iterator_t: ...
def user_labels_first(*args, **kwargs): ...
def user_labels_free(map) -> Any: ...
def user_labels_insert(map, key, val) -> user_labels_iterator_t: ...
def user_labels_iterator_t___eq__(self, p) -> bool: ...
def user_labels_iterator_t___ne__(self, p) -> bool: ...
def user_labels_iterator_t_swiginit(*args, **kwargs): ...
def user_labels_iterator_t_swigregister(*args, **kwargs): ...
def user_labels_iterator_t_x_get(self) -> iterator_word: ...
def user_labels_iterator_t_x_set(self, x) -> Any: ...
def user_labels_new() -> user_labels_t: ...
def user_labels_next(p) -> user_labels_iterator_t: ...
def user_labels_prev(p) -> user_labels_iterator_t: ...
def user_labels_second(*args, **kwargs): ...
def user_labels_size(map) -> size_t: ...
def user_labels_t_at(*args, **kwargs): ...
def user_labels_t_size(self) -> size_t: ...
def user_labels_t_swiginit(*args, **kwargs): ...
def user_labels_t_swigregister(*args, **kwargs): ...
def user_lvar_modifier_t_modify_lvars(self, lvinf) -> bool: ...
def user_lvar_modifier_t_swiginit(*args, **kwargs): ...
def user_lvar_modifier_t_swigregister(*args, **kwargs): ...
def user_numforms_begin(map) -> user_numforms_iterator_t: ...
def user_numforms_clear(map) -> Any: ...
def user_numforms_end(map) -> user_numforms_iterator_t: ...
def user_numforms_erase(map, p) -> Any: ...
def user_numforms_find(map, key) -> user_numforms_iterator_t: ...
def user_numforms_first(p) -> operand_locator_t: ...
def user_numforms_free(map) -> Any: ...
def user_numforms_insert(map, key, val) -> user_numforms_iterator_t: ...
def user_numforms_iterator_t___eq__(self, p) -> bool: ...
def user_numforms_iterator_t___ne__(self, p) -> bool: ...
def user_numforms_iterator_t_swiginit(*args, **kwargs): ...
def user_numforms_iterator_t_swigregister(*args, **kwargs): ...
def user_numforms_iterator_t_x_get(self) -> iterator_word: ...
def user_numforms_iterator_t_x_set(self, x) -> Any: ...
def user_numforms_new() -> user_numforms_t: ...
def user_numforms_next(p) -> user_numforms_iterator_t: ...
def user_numforms_prev(p) -> user_numforms_iterator_t: ...
def user_numforms_second(p) -> number_format_t: ...
def user_numforms_size(map) -> size_t: ...
def user_numforms_t_at(self, _Keyval) -> number_format_t: ...
def user_numforms_t_size(self) -> size_t: ...
def user_numforms_t_swiginit(*args, **kwargs): ...
def user_numforms_t_swigregister(*args, **kwargs): ...
def user_unions_begin(map) -> user_unions_iterator_t: ...
def user_unions_clear(map) -> Any: ...
def user_unions_end(map) -> user_unions_iterator_t: ...
def user_unions_erase(map, p) -> Any: ...
def user_unions_find(map, key) -> user_unions_iterator_t: ...
def user_unions_first(*args, **kwargs): ...
def user_unions_free(map) -> Any: ...
def user_unions_insert(map, key, val) -> user_unions_iterator_t: ...
def user_unions_iterator_t___eq__(self, p) -> bool: ...
def user_unions_iterator_t___ne__(self, p) -> bool: ...
def user_unions_iterator_t_swiginit(*args, **kwargs): ...
def user_unions_iterator_t_swigregister(*args, **kwargs): ...
def user_unions_iterator_t_x_get(self) -> iterator_word: ...
def user_unions_iterator_t_x_set(self, x) -> Any: ...
def user_unions_new() -> user_unions_t: ...
def user_unions_next(p) -> user_unions_iterator_t: ...
def user_unions_prev(p) -> user_unions_iterator_t: ...
def user_unions_second(p) -> intvec_t: ...
def user_unions_size(map) -> size_t: ...
def user_unions_t_at(self, _Keyval) -> intvec_t: ...
def user_unions_t_size(self) -> size_t: ...
def user_unions_t_swiginit(*args, **kwargs): ...
def user_unions_t_swigregister(*args, **kwargs): ...
def uval_ivl_ivlset_t___eq__(self, v) -> bool: ...
def uval_ivl_ivlset_t___ne__(self, v) -> bool: ...
def uval_ivl_ivlset_t_all_values(self) -> bool: ...
def uval_ivl_ivlset_t_begin(*args, **kwargs): ...
def uval_ivl_ivlset_t_clear(self) -> Any: ...
def uval_ivl_ivlset_t_empty(self) -> bool: ...
def uval_ivl_ivlset_t_end(*args, **kwargs): ...
def uval_ivl_ivlset_t_getivl(self, idx) -> ivl_t: ...
def uval_ivl_ivlset_t_lastivl(self) -> ivl_t: ...
def uval_ivl_ivlset_t_nivls(self) -> size_t: ...
def uval_ivl_ivlset_t_qclear(self) -> Any: ...
def uval_ivl_ivlset_t_set_all_values(self) -> Any: ...
@overload
def uval_ivl_ivlset_t_single_value(self) -> bool: ...
@overload
def uval_ivl_ivlset_t_single_value(self, v) -> bool: ...
def uval_ivl_ivlset_t_swap(self, r) -> Any: ...
def uval_ivl_ivlset_t_swiginit(*args, **kwargs): ...
def uval_ivl_ivlset_t_swigregister(*args, **kwargs): ...
def uval_ivl_t_end(self) -> unsignedint: ...
def uval_ivl_t_last(self) -> unsignedint: ...
def uval_ivl_t_off_get(self) -> unsignedint: ...
def uval_ivl_t_off_set(self, off) -> Any: ...
def uval_ivl_t_size_get(self) -> unsignedint: ...
def uval_ivl_t_size_set(self, size) -> Any: ...
def uval_ivl_t_swiginit(*args, **kwargs): ...
def uval_ivl_t_swigregister(*args, **kwargs): ...
def uval_ivl_t_valid(self) -> bool: ...
def valrng_t___eq__(self, r) -> bool: ...
def valrng_t___ge__(self, r) -> bool: ...
def valrng_t___gt__(self, r) -> bool: ...
def valrng_t___le__(self, r) -> bool: ...
def valrng_t___lt__(self, r) -> bool: ...
def valrng_t___ne__(self, r) -> bool: ...
def valrng_t__deregister(self) -> Any: ...
def valrng_t__print(self) -> Any: ...
def valrng_t__register(self) -> Any: ...
def valrng_t_all_values(self) -> bool: ...
def valrng_t_compare(self, r) -> int: ...
def valrng_t_cvt_to_cmp(self, strict) -> bool: ...
def valrng_t_cvt_to_single_value(self) -> bool: ...
def valrng_t_dstr(*args, **kwargs): ...
def valrng_t_empty(self) -> bool: ...
def valrng_t_get_size(self) -> int: ...
def valrng_t_has(self, v) -> bool: ...
def valrng_t_intersect_with(self, r) -> bool: ...
def valrng_t_inverse(self) -> Any: ...
def valrng_t_is_unknown(self) -> bool: ...
@overload
def valrng_t_max_svalue(size_) -> uvlr_t: ...
@overload
def valrng_t_max_svalue() -> uvlr_t: ...
@overload
def valrng_t_max_value(size_) -> uvlr_t: ...
@overload
def valrng_t_max_value() -> uvlr_t: ...
@overload
def valrng_t_min_svalue(size_) -> uvlr_t: ...
@overload
def valrng_t_min_svalue() -> uvlr_t: ...
def valrng_t_reduce_size(self, new_size) -> bool: ...
def valrng_t_set_all(self) -> Any: ...
def valrng_t_set_cmp(self, cmp, _value) -> Any: ...
def valrng_t_set_eq(self, v) -> Any: ...
def valrng_t_set_none(self) -> Any: ...
def valrng_t_set_unk(self) -> Any: ...
def valrng_t_swap(self, r) -> Any: ...
def valrng_t_swiginit(*args, **kwargs): ...
def valrng_t_swigregister(*args, **kwargs): ...
def valrng_t_unite_with(self, r) -> bool: ...
def var_ref_t___eq__(self, r) -> bool: ...
def var_ref_t___ge__(self, r) -> bool: ...
def var_ref_t___gt__(self, r) -> bool: ...
def var_ref_t___le__(self, r) -> bool: ...
def var_ref_t___lt__(self, r) -> bool: ...
def var_ref_t___ne__(self, r) -> bool: ...
def var_ref_t_compare(self, r) -> int: ...
def var_ref_t_getv(self) -> lvar_t: ...
def var_ref_t_idx_get(self) -> int: ...
def var_ref_t_idx_set(self, idx) -> Any: ...
def var_ref_t_mba_get(self) -> mba_t: ...
def var_ref_t_mba_set(self, mba) -> Any: ...
def var_ref_t_swiginit(*args, **kwargs): ...
def var_ref_t_swigregister(*args, **kwargs): ...
def vc_printer_t_func_get(self) -> cfunc_t: ...
def vc_printer_t_func_set(self, func) -> Any: ...
def vc_printer_t_lastchar_get(self) -> char: ...
def vc_printer_t_lastchar_set(self, lastchar) -> Any: ...
def vc_printer_t_oneliner(self) -> bool: ...
def vc_printer_t_swiginit(*args, **kwargs): ...
def vc_printer_t_swigregister(*args, **kwargs): ...
def vd_failure_t_desc(self) -> qstring: ...
def vd_failure_t_hf_get(self) -> hexrays_failure_t: ...
def vd_failure_t_hf_set(self, hf) -> Any: ...
def vd_failure_t_swiginit(*args, **kwargs): ...
def vd_failure_t_swigregister(*args, **kwargs): ...
def vd_interr_t_swiginit(*args, **kwargs): ...
def vd_interr_t_swigregister(*args, **kwargs): ...
def vd_printer_t__print(self, indent, format) -> int: ...
def vd_printer_t_hdrlines_get(self) -> int: ...
def vd_printer_t_hdrlines_set(self, hdrlines) -> Any: ...
def vd_printer_t_swiginit(*args, **kwargs): ...
def vd_printer_t_swigregister(*args, **kwargs): ...
def vd_printer_t_tmpbuf_get(*args, **kwargs): ...
def vd_printer_t_tmpbuf_set(self, tmpbuf) -> Any: ...
def vdloc_t___eq__(self, r) -> bool: ...
def vdloc_t___ge__(self, r) -> bool: ...
def vdloc_t___gt__(self, r) -> bool: ...
def vdloc_t___le__(self, r) -> bool: ...
def vdloc_t___lt__(self, r) -> bool: ...
def vdloc_t___ne__(self, r) -> bool: ...
def vdloc_t__set_reg1(self, r1) -> Any: ...
def vdloc_t_compare(self, r) -> int: ...
def vdloc_t_is_aliasable(self, mb, size) -> bool: ...
def vdloc_t_reg1(self) -> int: ...
def vdloc_t_set_reg1(self, r1) -> Any: ...
def vdloc_t_swiginit(*args, **kwargs): ...
def vdloc_t_swigregister(*args, **kwargs): ...
def vdui_t_calc_cmt_type(self, lnnum, cmttype) -> cmt_type_t: ...
def vdui_t_cfunc_get(self) -> cfuncptr_t: ...
def vdui_t_cfunc_set(self, cfunc) -> Any: ...
def vdui_t_clear(self) -> Any: ...
def vdui_t_collapse_item(self, hide) -> bool: ...
def vdui_t_collapse_lvars(self, hide) -> bool: ...
def vdui_t_cpos_get(self) -> ctext_position_t: ...
def vdui_t_cpos_set(self, cpos) -> Any: ...
def vdui_t_ct_get(*args, **kwargs): ...
def vdui_t_ct_set(self, ct) -> Any: ...
def vdui_t_ctree_to_disasm(self) -> bool: ...
def vdui_t_del_orphan_cmts(self) -> bool: ...
def vdui_t_edit_cmt(self, loc) -> bool: ...
def vdui_t_edit_func_cmt(self) -> bool: ...
def vdui_t_flags_get(self) -> int: ...
def vdui_t_flags_set(self, flags) -> Any: ...
def vdui_t_get_current_item(self, idv) -> bool: ...
def vdui_t_get_current_label(self) -> int: ...
def vdui_t_get_number(self) -> cnumber_t: ...
def vdui_t_head_get(self) -> ctree_item_t: ...
def vdui_t_head_set(self, head) -> Any: ...
def vdui_t_in_ctree(self) -> bool: ...
def vdui_t_invert_bits(self) -> bool: ...
def vdui_t_invert_sign(self) -> bool: ...
def vdui_t_item_get(self) -> ctree_item_t: ...
def vdui_t_item_set(self, item) -> Any: ...
def vdui_t_jump_enter(self, idv, omflags) -> bool: ...
def vdui_t_last_code_get(self) -> merror_t: ...
def vdui_t_last_code_set(self, last_code) -> Any: ...
def vdui_t_locked(self) -> bool: ...
def vdui_t_map_lvar(self, frm, to) -> bool: ...
def vdui_t_mba_get(self) -> mba_t: ...
def vdui_t_mba_set(self, mba) -> Any: ...
def vdui_t_refresh_cpos(self, idv) -> bool: ...
def vdui_t_refresh_ctext(self, activate=...) -> Any: ...
def vdui_t_refresh_view(self, redo_mba) -> Any: ...
def vdui_t_rename_global(self, ea) -> bool: ...
def vdui_t_rename_label(self, label) -> bool: ...
def vdui_t_rename_lvar(self, v, name, is_user_name) -> bool: ...
def vdui_t_rename_strmem(self, sptr, mptr) -> bool: ...
def vdui_t_rename_udm(self, udt_type, udm_idx) -> bool: ...
def vdui_t_set_global_type(self, ea) -> bool: ...
def vdui_t_set_locked(self, v) -> bool: ...
def vdui_t_set_lvar_cmt(self, v, cmt) -> bool: ...
def vdui_t_set_lvar_type(self, v, type) -> bool: ...
def vdui_t_set_noptr_lvar(self, v) -> bool: ...
def vdui_t_set_num_enum(self) -> bool: ...
def vdui_t_set_num_radix(self, base) -> bool: ...
def vdui_t_set_num_stroff(self) -> bool: ...
def vdui_t_set_strmem_type(self, sptr, mptr) -> bool: ...
def vdui_t_set_udm_type(self, udt_type, udm_idx) -> bool: ...
def vdui_t_set_valid(self, v) -> Any: ...
def vdui_t_set_visible(self, v) -> Any: ...
def vdui_t_split_item(self, split) -> bool: ...
def vdui_t_swigregister(*args, **kwargs): ...
def vdui_t_switch_to(self, f, activate) -> Any: ...
def vdui_t_tail_get(self) -> ctree_item_t: ...
def vdui_t_tail_set(self, tail) -> Any: ...
def vdui_t_toplevel_get(*args, **kwargs): ...
def vdui_t_toplevel_set(self, toplevel) -> Any: ...
def vdui_t_ui_edit_lvar_cmt(self, v) -> bool: ...
def vdui_t_ui_map_lvar(self, v) -> bool: ...
def vdui_t_ui_rename_lvar(self, v) -> bool: ...
def vdui_t_ui_set_call_type(self, e) -> bool: ...
def vdui_t_ui_set_lvar_type(self, v) -> bool: ...
def vdui_t_ui_unmap_lvar(self, v) -> bool: ...
def vdui_t_valid(self) -> bool: ...
def vdui_t_view_idx_get(self) -> int: ...
def vdui_t_view_idx_set(self, view_idx) -> Any: ...
def vdui_t_visible(self) -> bool: ...
@overload
def vivl_t___eq__(self, r) -> bool: ...
@overload
def vivl_t___eq__(self, mop) -> bool: ...
def vivl_t___ge__(self, r) -> bool: ...
def vivl_t___gt__(self, r) -> bool: ...
def vivl_t___le__(self, r) -> bool: ...
def vivl_t___lt__(self, r) -> bool: ...
def vivl_t___ne__(self, r) -> bool: ...
def vivl_t__print(self) -> Any: ...
def vivl_t_compare(self, r) -> int: ...
def vivl_t_contains(self, voff2) -> bool: ...
def vivl_t_dstr(*args, **kwargs): ...
def vivl_t_extend_to_cover(self, r) -> bool: ...
def vivl_t_includes(self, r) -> bool: ...
def vivl_t_intersect(self, r) -> uval_t: ...
def vivl_t_overlap(self, r) -> bool: ...
@overload
def vivl_t_set(self, _type, _off, _size=...) -> Any: ...
@overload
def vivl_t_set(self, voff, _size) -> Any: ...
def vivl_t_set_reg(self, mreg, sz=...) -> Any: ...
def vivl_t_set_stkoff(self, stkoff, sz=...) -> Any: ...
def vivl_t_size_get(self) -> int: ...
def vivl_t_size_set(self, size) -> Any: ...
def vivl_t_swiginit(*args, **kwargs): ...
def vivl_t_swigregister(*args, **kwargs): ...
def voff_t___eq__(self, r) -> bool: ...
def voff_t___ge__(self, r) -> bool: ...
def voff_t___gt__(self, r) -> bool: ...
def voff_t___le__(self, r) -> bool: ...
def voff_t___lt__(self, r) -> bool: ...
def voff_t___ne__(self, r) -> bool: ...
def voff_t_add(self, width) -> voff_t: ...
def voff_t_compare(self, r) -> int: ...
def voff_t_defined(self) -> bool: ...
def voff_t_diff(self, r) -> sval_t: ...
def voff_t_get_reg(self) -> mreg_t: ...
def voff_t_get_stkoff(self) -> sval_t: ...
def voff_t_inc(self, delta) -> Any: ...
def voff_t_is_reg(self) -> bool: ...
def voff_t_is_stkoff(self) -> bool: ...
def voff_t_off_get(self) -> sval_t: ...
def voff_t_off_set(self, off) -> Any: ...
def voff_t_set(self, _type, _off) -> Any: ...
def voff_t_set_reg(self, mreg) -> Any: ...
def voff_t_set_stkoff(self, stkoff) -> Any: ...
def voff_t_swiginit(*args, **kwargs): ...
def voff_t_swigregister(*args, **kwargs): ...
def voff_t_type_get(self) -> mopt_t: ...
def voff_t_type_set(self, type) -> Any: ...
def voff_t_undef(self) -> Any: ...
