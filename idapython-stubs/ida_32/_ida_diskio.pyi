# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

from typing import Any

CFG_SUBDIR: str
CSIDL_APPDATA: int
CSIDL_LOCAL_APPDATA: int
CSIDL_PROGRAM_FILES: int
CSIDL_PROGRAM_FILESX86: int
CSIDL_PROGRAM_FILES_COMMON: int
IDA_SUBDIR_IDADIR_FIRST: int
IDA_SUBDIR_IDP: int
IDA_SUBDIR_ONLY_EXISTING: int
IDC_SUBDIR: str
IDP_SUBDIR: str
IDS_SUBDIR: str
LDR_SUBDIR: str
LINPUT_GENERIC: int
LINPUT_LOCAL: int
LINPUT_NONE: int
LINPUT_PROCMEM: int
LINPUT_RFILE: int
PLG_SUBDIR: str
SIG_SUBDIR: str
SWIG_PYTHON_LEGACY_BOOL: int
THM_SUBDIR: str
TIL_SUBDIR: str

def choose_ioport_device2(_device, file, parse_params) -> bool: ...
def choose_ioport_parser_t_parse(self, param, line) -> bool: ...
def choose_ioport_parser_t_swiginit(*args, **kwargs): ...
def choose_ioport_parser_t_swigregister(*args, **kwargs): ...
def close_linput(li) -> Any: ...
def create_bytearray_linput(*args, **kwargs): ...
def create_generic_linput(*args, **kwargs): ...
def create_memory_linput(*args, **kwargs): ...
def delete_choose_ioport_parser_t(self) -> Any: ...
def delete_file_enumerator_t(self) -> Any: ...
def delete_generic_linput_t(self) -> Any: ...
def delete_ioports_fallback_t(self) -> Any: ...
def disown_choose_ioport_parser_t(*args, **kwargs): ...
def disown_file_enumerator_t(*args, **kwargs): ...
def disown_ioports_fallback_t(*args, **kwargs): ...
def eclose(fp) -> Any: ...
def enumerate_files(*args, **kwargs): ...
def enumerate_files2(answer, answer_size, path, fname, fv) -> int: ...
def file_enumerator_t_swiginit(*args, **kwargs): ...
def file_enumerator_t_swigregister(*args, **kwargs): ...
def file_enumerator_t_visit_file(self, file) -> int: ...
def fopenA(*args, **kwargs): ...
def fopenM(*args, **kwargs): ...
def fopenRB(*args, **kwargs): ...
def fopenRT(*args, **kwargs): ...
def fopenWB(*args, **kwargs): ...
def fopenWT(*args, **kwargs): ...
def generic_linput_t_blocksize_get(self) -> uint32: ...
def generic_linput_t_blocksize_set(self, blocksize) -> Any: ...
def generic_linput_t_filesize_get(self) -> uint64: ...
def generic_linput_t_filesize_set(self, filesize) -> Any: ...
def generic_linput_t_read(self, off, buffer, nbytes) -> ssize_t: ...
def generic_linput_t_swigregister(*args, **kwargs): ...
def get_ida_subdirs(subdir, flags=...) -> int: ...
def get_linput_type(li) -> linput_type_t: ...
def get_special_folder(csidl) -> bool: ...
def get_user_idadir(*args, **kwargs): ...
def getsysfile(*args, **kwargs): ...
def idadir(*args, **kwargs): ...
def ioports_fallback_t_handle(self, ports, line) -> bool: ...
def ioports_fallback_t_swiginit(*args, **kwargs): ...
def ioports_fallback_t_swigregister(*args, **kwargs): ...
def new_choose_ioport_parser_t(_self) -> choose_ioport_parser_t: ...
def new_file_enumerator_t(_self) -> file_enumerator_t: ...
def new_ioports_fallback_t(_self) -> ioports_fallback_t: ...
def open_linput(*args, **kwargs): ...
def qlgetz(*args, **kwargs): ...
def read_ioports2(ports, device, file, callback=...) -> ssize_t: ...
