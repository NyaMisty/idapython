# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_gdl
import ida_idaapi
import ida_kernwin
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class screen_graph_selection_base_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'selection_item_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'selection_item_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'selection_item_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< selection_item_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< selection_item_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< selection_item_t >::iterator': ...
    def erase(self, *args) -> 'qvector< selection_item_t >::iterator': ...
    def find(self, *args) -> 'qvector< selection_item_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'selection_item_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class node_layout_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'rect_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'rect_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'rect_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< rect_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< rect_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< rect_t >::iterator': ...
    def erase(self, *args) -> 'qvector< rect_t >::iterator': ...
    def find(self, *args) -> 'qvector< rect_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'rect_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class pointvec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'point_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'point_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'point_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< point_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< point_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< point_t >::iterator': ...
    def erase(self, *args) -> 'qvector< point_t >::iterator': ...
    def find(self, *args) -> 'qvector< point_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'point_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

NIF_BG_COLOR: Incomplete
NIF_FRAME_COLOR: Incomplete
NIF_EA: Incomplete
NIF_TEXT: Incomplete
NIF_FLAGS: Incomplete
NIF_ALL: Incomplete
GLICTL_CENTER: Incomplete

class node_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    bg_color: Incomplete
    frame_color: Incomplete
    flags: Incomplete
    ea: Incomplete
    text: Incomplete
    def valid_bg_color(self, *args) -> bool: ...
    def valid_frame_color(self, *args) -> bool: ...
    def valid_ea(self, *args) -> bool: ...
    def valid_text(self, *args) -> bool: ...
    def valid_flags(self, *args) -> bool: ...
    def get_flags_for_valid(self, *args) -> uint32: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

NIFF_SHOW_CONTENTS: Incomplete

def get_node_info(*args) -> bool: ...
def set_node_info(*args) -> None: ...
def del_node_info(*args) -> None: ...
def clr_node_info(*args) -> None: ...

class node_ordering_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def set(self, *args) -> None: ...
    def clr(self, *args) -> bool: ...
    def node(self, *args) -> int: ...
    def order(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class edge_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    src: Incomplete
    dst: Incomplete
    def __init__(self, *args) -> None: ...
    def __lt__(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

edge_error: Incomplete
edge_tree: Incomplete
edge_forward: Incomplete
edge_back: Incomplete
edge_cross: Incomplete
edge_subgraph: Incomplete

class graph_node_visitor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def reinit(self, *args) -> None: ...
    def set_visited(self, *args) -> None: ...
    def is_visited(self, *args) -> bool: ...
    def visit_node(self, *args) -> int: ...
    def is_forbidden_edge(self, *args) -> bool: ...
    __swig_destroy__: Incomplete
    def __init__(self, *args) -> None: ...
    def __disown__(self): ...

class graph_path_visitor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    path: Incomplete
    prune: Incomplete
    def walk_forward(self, *args) -> int: ...
    def walk_backward(self, *args) -> int: ...
    __swig_destroy__: Incomplete
    def __init__(self, *args) -> None: ...
    def __disown__(self): ...

class point_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    x: Incomplete
    y: Incomplete
    def __init__(self, *args) -> None: ...
    def add(self, *args) -> 'point_t &': ...
    def sub(self, *args) -> 'point_t &': ...
    def negate(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

def calc_dist(*args) -> double: ...

class pointseq_t(pointvec_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class rect_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    left: Incomplete
    top: Incomplete
    right: Incomplete
    bottom: Incomplete
    def __init__(self, *args) -> None: ...
    def width(self, *args) -> int: ...
    def height(self, *args) -> int: ...
    def move_to(self, *args) -> None: ...
    def move_by(self, *args) -> None: ...
    def center(self, *args) -> point_t: ...
    def topleft(self, *args) -> point_t: ...
    def bottomright(self, *args) -> point_t: ...
    def grow(self, *args) -> None: ...
    def intersect(self, *args) -> None: ...
    def make_union(self, *args) -> None: ...
    def empty(self, *args) -> bool: ...
    def is_intersection_empty(self, *args) -> bool: ...
    def contains(self, *args) -> bool: ...
    def area(self, *args) -> int: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class TPointDouble:
    thisown: Incomplete
    __repr__ = _swig_repr
    x: Incomplete
    y: Incomplete
    def __init__(self, *args) -> None: ...
    def add(self, *args) -> None: ...
    def sub(self, *args) -> None: ...
    def negate(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class edge_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    color: Incomplete
    width: Incomplete
    srcoff: Incomplete
    dstoff: Incomplete
    layout: Incomplete
    def reverse_layout(self, *args) -> None: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

cvar: Incomplete
layout_none: Incomplete
layout_digraph: Incomplete
layout_tree: Incomplete
layout_circle: Incomplete
layout_polar_tree: Incomplete
layout_orthogonal: Incomplete
layout_radial_tree: Incomplete

class edge_layout_point_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    pidx: Incomplete
    e: Incomplete
    def __init__(self, *args) -> None: ...
    def compare(self, *args) -> int: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class selection_item_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    is_node: Incomplete
    node: Incomplete
    elp: Incomplete
    def __init__(self, *args) -> None: ...
    def compare(self, *args) -> int: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class screen_graph_selection_t(screen_graph_selection_base_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def has(self, *args) -> bool: ...
    def add(self, *args) -> None: ...
    def sub(self, *args) -> None: ...
    def add_node(self, *args) -> None: ...
    def del_node(self, *args) -> None: ...
    def add_point(self, *args) -> None: ...
    def del_point(self, *args) -> None: ...
    def nodes_count(self, *args) -> size_t: ...
    def points_count(self, *args) -> size_t: ...
    def items_count(self, *args) -> size_t: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class edge_segment_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    e: Incomplete
    nseg: Incomplete
    x0: Incomplete
    x1: Incomplete
    def length(self, *args) -> size_t: ...
    def toright(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

git_none: Incomplete
git_edge: Incomplete
git_node: Incomplete
git_tool: Incomplete
git_text: Incomplete
git_elp: Incomplete

class graph_item_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    type: Incomplete
    e: Incomplete
    n: Incomplete
    b: Incomplete
    p: Incomplete
    elp: Incomplete
    def is_node(self, *args) -> bool: ...
    def is_edge(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class interval_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    x0: Incomplete
    x1: Incomplete
    def empty(self, *args) -> bool: ...
    def intersect(self, *args) -> None: ...
    def make_union(self, *args) -> None: ...
    def move_by(self, *args) -> None: ...
    def __init__(self, *args) -> None: ...
    def length(self, *args) -> int: ...
    def contains(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    __swig_destroy__: Incomplete

class row_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    nodes: Incomplete
    top: Incomplete
    bottom: Incomplete
    def height(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class abstract_graph_t(ida_gdl.gdl_graph_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    title: Incomplete
    rect_edges_made: Incomplete
    current_layout: Incomplete
    circle_center: Incomplete
    circle_radius: Incomplete
    callback_ud: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def create_tree_layout(self, *args) -> bool: ...
    def create_circle_layout(self, *args) -> bool: ...
    def set_callback(self, *args) -> None: ...
    def grcall(self, *args) -> ssize_t: ...
    def get_edge(self, *args) -> 'edge_info_t *': ...
    def nrect(self, *args) -> rect_t: ...
    def __disown__(self): ...

ygap: Incomplete
xgap: Incomplete
arrow_height: Incomplete
arrow_width: Incomplete

class edge_infos_wrapper_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    def clear(self, *args) -> None: ...
    ptr: Incomplete

class mutable_graph_t(abstract_graph_t):
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    gid: Incomplete
    belongs: Incomplete
    node_flags: Incomplete
    org_succs: Incomplete
    org_preds: Incomplete
    succs: Incomplete
    preds: Incomplete
    nodes: Incomplete
    edges: Incomplete
    __swig_destroy__: Incomplete
    def size(self, *args) -> int: ...
    def node_qty(self, *args) -> int: ...
    def empty(self, *args) -> bool: ...
    def exists(self, *args) -> bool: ...
    def get_node_representative(self, *args) -> int: ...
    def get_node_group(self, *args) -> int: ...
    def set_node_group(self, *args) -> None: ...
    def is_deleted_node(self, *args) -> bool: ...
    def set_deleted_node(self, *args) -> None: ...
    def is_subgraph_node(self, *args) -> bool: ...
    def is_dot_node(self, *args) -> bool: ...
    def is_group_node(self, *args) -> bool: ...
    def is_displayable_node(self, *args) -> bool: ...
    def is_simple_node(self, *args) -> bool: ...
    def is_collapsed_node(self, *args) -> bool: ...
    def is_uncollapsed_node(self, *args) -> bool: ...
    def is_visible_node(self, *args) -> bool: ...
    def get_first_subgraph_node(self, *args) -> int: ...
    def get_next_subgraph_node(self, *args) -> int: ...
    def create_group(self, *args) -> int: ...
    def delete_group(self, *args) -> bool: ...
    def change_group_visibility(self, *args) -> bool: ...
    def nsucc(self, *args) -> int: ...
    def npred(self, *args) -> int: ...
    def succ(self, *args) -> int: ...
    def pred(self, *args) -> int: ...
    def succset(self, *args) -> 'intvec_t const &': ...
    def predset(self, *args) -> 'intvec_t const &': ...
    def reset(self, *args) -> None: ...
    def redo_layout(self, *args) -> bool: ...
    def resize(self, *args) -> None: ...
    def add_node(self, *args) -> int: ...
    def del_node(self, *args) -> ssize_t: ...
    def add_edge(self, *args) -> bool: ...
    def del_edge(self, *args) -> bool: ...
    def replace_edge(self, *args) -> bool: ...
    def refresh(self, *args) -> bool: ...
    def set_nrect(self, *args) -> bool: ...
    def set_edge(self, *args) -> bool: ...
    def create_digraph_layout(self, *args) -> bool: ...
    def del_custom_layout(self, *args) -> None: ...
    def get_custom_layout(self, *args) -> bool: ...
    def set_custom_layout(self, *args) -> None: ...
    def get_graph_groups(self, *args) -> bool: ...
    def set_graph_groups(self, *args) -> None: ...
    def calc_group_ea(self, *args) -> ea_t: ...
    def is_user_graph(self, *args) -> bool: ...

MTG_GROUP_NODE: Incomplete
MTG_DOT_NODE: Incomplete
MTG_NON_DISPLAYABLE_NODE: Incomplete
COLLAPSED_NODE: Incomplete

class graph_visitor_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def visit_node(self, *args) -> int: ...
    def visit_edge(self, *args) -> int: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def __disown__(self): ...

grcode_calculating_layout: Incomplete
grcode_layout_calculated: Incomplete
grcode_changed_graph: Incomplete
grcode_reserved: Incomplete
grcode_clicked: Incomplete
grcode_dblclicked: Incomplete
grcode_creating_group: Incomplete
grcode_deleting_group: Incomplete
grcode_group_visibility: Incomplete
grcode_gotfocus: Incomplete
grcode_lostfocus: Incomplete
grcode_user_refresh: Incomplete
grcode_reserved2: Incomplete
grcode_user_text: Incomplete
grcode_user_size: Incomplete
grcode_user_title: Incomplete
grcode_user_draw: Incomplete
grcode_user_hint: Incomplete
grcode_destroyed: Incomplete
grcode_create_graph_viewer: Incomplete
grcode_get_graph_viewer: Incomplete
grcode_get_viewer_graph: Incomplete
grcode_create_mutable_graph: Incomplete
grcode_set_viewer_graph: Incomplete
grcode_refresh_viewer: Incomplete
grcode_fit_window: Incomplete
grcode_get_curnode: Incomplete
grcode_center_on: Incomplete
grcode_get_selection: Incomplete
grcode_del_custom_layout: Incomplete
grcode_set_custom_layout: Incomplete
grcode_set_graph_groups: Incomplete
grcode_clear: Incomplete
grcode_create_digraph_layout: Incomplete
grcode_create_tree_layout: Incomplete
grcode_create_circle_layout: Incomplete
grcode_get_node_representative: Incomplete
grcode_find_subgraph_node: Incomplete
grcode_create_group: Incomplete
grcode_get_custom_layout: Incomplete
grcode_get_graph_groups: Incomplete
grcode_empty: Incomplete
grcode_is_visible_node: Incomplete
grcode_delete_group: Incomplete
grcode_change_group_visibility: Incomplete
grcode_set_edge: Incomplete
grcode_node_qty: Incomplete
grcode_nrect: Incomplete
grcode_set_titlebar_height: Incomplete
grcode_create_user_graph_place: Incomplete
grcode_create_disasm_graph1: Incomplete
grcode_create_disasm_graph2: Incomplete
grcode_set_node_info: Incomplete
grcode_get_node_info: Incomplete
grcode_del_node_info: Incomplete
grcode_viewer_create_groups: Incomplete
grcode_viewer_delete_groups: Incomplete
grcode_viewer_groups_visibility: Incomplete
grcode_viewer_create_groups_vec: Incomplete
grcode_viewer_delete_groups_vec: Incomplete
grcode_viewer_groups_visibility_vec: Incomplete
grcode_delete_mutable_graph: Incomplete
grcode_edge_infos_wrapper_copy: Incomplete
grcode_edge_infos_wrapper_clear: Incomplete
grcode_attach_menu_item: Incomplete
grcode_set_gli: Incomplete
grcode_get_gli: Incomplete

class group_crinfo_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    nodes: Incomplete
    text: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def create_graph_viewer(*args) -> 'graph_viewer_t *': ...
def get_graph_viewer(*args) -> 'graph_viewer_t *': ...
def create_mutable_graph(*args) -> 'mutable_graph_t *': ...
def create_disasm_graph(*args) -> 'mutable_graph_t *': ...
def get_viewer_graph(*args) -> 'mutable_graph_t *': ...
def set_viewer_graph(*args) -> None: ...
def refresh_viewer(*args) -> None: ...
def viewer_fit_window(*args) -> None: ...
def viewer_get_curnode(*args) -> int: ...
def viewer_center_on(*args) -> None: ...
def viewer_set_gli(*args) -> None: ...
def viewer_get_gli(*args) -> bool: ...
def viewer_set_node_info(*args) -> None: ...
def viewer_get_node_info(*args) -> bool: ...
def viewer_del_node_info(*args) -> None: ...
def viewer_create_groups(*args) -> bool: ...
def viewer_delete_groups(*args) -> bool: ...
def viewer_set_groups_visibility(*args) -> bool: ...
def viewer_attach_menu_item(*args) -> bool: ...
def viewer_get_selection(*args) -> bool: ...
def viewer_set_titlebar_height(*args) -> int: ...
def delete_mutable_graph(*args) -> None: ...

class user_graph_place_t:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __repr__ = _swig_repr
    node: Incomplete
    __swig_destroy__: Incomplete

def create_user_graph_place(*args) -> 'user_graph_place_t *': ...
def pyg_close(*args) -> None: ...
def pyg_select_node(*args) -> None: ...
def pyg_show(*args) -> bool: ...

class GraphViewer(ida_kernwin.CustomIDAMemo):
    class UI_Hooks_Trampoline(ida_kernwin.UI_Hooks):
        v: Incomplete
        def __init__(self, v) -> None: ...
        def populating_widget_popup(self, w, popup_handle) -> None: ...
    _title: Incomplete
    _nodes: Incomplete
    _edges: Incomplete
    _close_open: Incomplete
    _quick_commands: Incomplete
    ui_hooks_trampoline: Incomplete
    def __init__(self, title, close_open: bool = False) -> None: ...
    def AddNode(self, obj): ...
    def AddEdge(self, src_node, dest_node) -> None: ...
    def Clear(self) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, idx): ...
    def Count(self): ...
    def Close(self) -> None: ...
    def Show(self): ...
    def Select(self, node_id) -> None: ...
    def OnRefresh(self): ...
    def AddCommand(self, title, shortcut): ...
    def OnPopup(self, widget, popup_handle) -> None: ...
    def OnCommand(self, cmd_id): ...
    def _OnBind(self, hook) -> None: ...
