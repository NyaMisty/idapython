# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class qvector_snapshotvec_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'snapshot_t *&': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'snapshot_t *const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'snapshot_t **': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< snapshot_t * >::const_iterator': ...
    def end(self, *args) -> 'qvector< snapshot_t * >::const_iterator': ...
    def insert(self, *args) -> 'qvector< snapshot_t * >::iterator': ...
    def erase(self, *args) -> 'qvector< snapshot_t * >::iterator': ...
    def find(self, *args) -> 'qvector< snapshot_t * >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'snapshot_t *const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class loader_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    version: Incomplete
    flags: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

LDRF_RELOAD: Incomplete
LDRF_REQ_PROC: Incomplete
ACCEPT_ARCHIVE: Incomplete
ACCEPT_CONTINUE: Incomplete
ACCEPT_FIRST: Incomplete
NEF_SEGS: Incomplete
NEF_RSCS: Incomplete
NEF_NAME: Incomplete
NEF_MAN: Incomplete
NEF_FILL: Incomplete
NEF_IMPS: Incomplete
NEF_FIRST: Incomplete
NEF_CODE: Incomplete
NEF_RELOAD: Incomplete
NEF_FLAT: Incomplete
NEF_MINI: Incomplete
NEF_LOPT: Incomplete
NEF_LALL: Incomplete
DLLEXT: Incomplete
LOADER_DLL: Incomplete

def load_binary_file(*args) -> bool: ...
def process_archive(*args) -> 'qstring *': ...

OFILE_MAP: Incomplete
OFILE_EXE: Incomplete
OFILE_IDC: Incomplete
OFILE_LST: Incomplete
OFILE_ASM: Incomplete
OFILE_DIF: Incomplete

def gen_file(*args) -> int: ...

GENFLG_MAPSEG: Incomplete
GENFLG_MAPNAME: Incomplete
GENFLG_MAPDMNG: Incomplete
GENFLG_MAPLOC: Incomplete
GENFLG_IDCTYPE: Incomplete
GENFLG_ASMTYPE: Incomplete
GENFLG_GENHTML: Incomplete
GENFLG_ASMINC: Incomplete

def file2base(*args) -> int: ...

FILEREG_PATCHABLE: Incomplete
FILEREG_NOTPATCHABLE: Incomplete

def base2file(*args) -> int: ...
def get_basic_file_type(*args) -> filetype_t: ...
def get_file_type_name(*args) -> size_t: ...
def set_import_ordinal(*args) -> None: ...
def set_import_name(*args) -> None: ...
def load_ids_module(*args) -> int: ...
def get_plugin_options(*args) -> 'char const *': ...

PLUGIN_DLL: Incomplete
MODULE_ENTRY_LOADER: Incomplete
MODULE_ENTRY_PLUGIN: Incomplete
MODULE_ENTRY_IDP: Incomplete

class idp_name_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    lname: Incomplete
    sname: Incomplete
    hidden: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

class idp_desc_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    path: Incomplete
    mtime: Incomplete
    family: Incomplete
    names: Incomplete
    is_script: Incomplete
    checked: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

IDP_DLL: Incomplete

class plugin_info_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    next: Incomplete
    path: Incomplete
    org_name: Incomplete
    name: Incomplete
    org_hotkey: Incomplete
    hotkey: Incomplete
    arg: Incomplete
    entry: Incomplete
    dllmem: Incomplete
    flags: Incomplete
    comment: Incomplete
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def find_plugin(*args) -> 'plugin_t *': ...
def get_fileregion_offset(*args) -> qoff64_t: ...
def get_fileregion_ea(*args) -> ea_t: ...
def gen_exe_file(*args) -> int: ...
def reload_file(*args) -> bool: ...

MAX_DATABASE_DESCRIPTION: Incomplete

class snapshot_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    id: Incomplete
    flags: Incomplete
    desc: Incomplete
    filename: Incomplete
    children: Incomplete
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def clear(self, *args) -> None: ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

SSF_AUTOMATIC: Incomplete

def build_snapshot_tree(*args) -> bool: ...

SSUF_DESC: Incomplete
SSUF_PATH: Incomplete
SSUF_FLAGS: Incomplete

def flush_buffers(*args) -> int: ...
def is_trusted_idb(*args) -> bool: ...
def save_database(*args) -> bool: ...

DBFL_KILL: Incomplete
DBFL_COMP: Incomplete
DBFL_BAK: Incomplete
DBFL_TEMP: Incomplete

def is_database_flag(*args) -> bool: ...
def set_database_flag(*args) -> None: ...
def clr_database_flag(*args) -> None: ...

PATH_TYPE_CMD: Incomplete
PATH_TYPE_IDB: Incomplete
PATH_TYPE_ID0: Incomplete

def get_path(*args) -> 'char const *': ...
def set_path(*args) -> None: ...
def get_elf_debug_file_directory(*args) -> 'char const *': ...
def mem2base(*args) -> int: ...
def load_plugin(*args) -> 'PyObject *': ...
def run_plugin(*args) -> bool: ...
def load_and_run_plugin(*args) -> bool: ...
def extract_module_from_archive(*args) -> 'PyObject *': ...
