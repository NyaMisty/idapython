# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
import ida_range
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class segment_defsr_array:
    thisown: Incomplete
    __repr__ = _swig_repr
    data: Incomplete
    def __init__(self, *args) -> None: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'unsigned long long const &': ...
    def __setitem__(self, *args) -> None: ...
    def _get_bytes(self, *args) -> bytevec_t: ...
    def _set_bytes(self, *args) -> None: ...
    __iter__ = ida_idaapi._bounded_getitem_iterator
    bytes: Incomplete
    __swig_destroy__: Incomplete

def set_segment_translations(*args) -> bool: ...

SREG_NUM: Incomplete

class segment_t(ida_range.range_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    name: Incomplete
    sclass: Incomplete
    orgbase: Incomplete
    align: Incomplete
    comb: Incomplete
    perm: Incomplete
    bitness: Incomplete
    def is_16bit(self, *args) -> bool: ...
    def is_32bit(self, *args) -> bool: ...
    def is_64bit(self, *args) -> bool: ...
    def abits(self, *args) -> int: ...
    def abytes(self, *args) -> int: ...
    flags: Incomplete
    def comorg(self, *args) -> bool: ...
    def set_comorg(self, *args) -> None: ...
    def clr_comorg(self, *args) -> None: ...
    def ob_ok(self, *args) -> bool: ...
    def set_ob_ok(self, *args) -> None: ...
    def clr_ob_ok(self, *args) -> None: ...
    def is_visible_segm(self, *args) -> bool: ...
    def set_visible_segm(self, *args) -> None: ...
    def set_debugger_segm(self, *args) -> None: ...
    def is_loader_segm(self, *args) -> bool: ...
    def set_loader_segm(self, *args) -> None: ...
    def is_hidden_segtype(self, *args) -> bool: ...
    def set_hidden_segtype(self, *args) -> None: ...
    def is_header_segm(self, *args) -> bool: ...
    def set_header_segm(self, *args) -> None: ...
    sel: Incomplete
    defsr: Incomplete
    type: Incomplete
    color: Incomplete
    def update(self, *args) -> bool: ...
    def __init__(self, *args) -> None: ...
    start_ea: Incomplete
    end_ea: Incomplete
    def __getDefsr(self, *args) -> 'wrapped_array_t< sel_t,SREG_NUM >': ...
    use64 = is_64bit
    __swig_destroy__: Incomplete

saAbs: Incomplete
saRelByte: Incomplete
saRelWord: Incomplete
saRelPara: Incomplete
saRelPage: Incomplete
saRelDble: Incomplete
saRel4K: Incomplete
saGroup: Incomplete
saRel32Bytes: Incomplete
saRel64Bytes: Incomplete
saRelQword: Incomplete
saRel128Bytes: Incomplete
saRel512Bytes: Incomplete
saRel1024Bytes: Incomplete
saRel2048Bytes: Incomplete
saRel_MAX_ALIGN_CODE: Incomplete
scPriv: Incomplete
scGroup: Incomplete
scPub: Incomplete
scPub2: Incomplete
scStack: Incomplete
scCommon: Incomplete
scPub3: Incomplete
sc_MAX_COMB_CODE: Incomplete
SEGPERM_EXEC: Incomplete
SEGPERM_WRITE: Incomplete
SEGPERM_READ: Incomplete
SEGPERM_MAXVAL: Incomplete
SEG_MAX_BITNESS_CODE: Incomplete
SFL_COMORG: Incomplete
SFL_OBOK: Incomplete
SFL_HIDDEN: Incomplete
SFL_DEBUG: Incomplete
SFL_LOADER: Incomplete
SFL_HIDETYPE: Incomplete
SFL_HEADER: Incomplete
SEG_NORM: Incomplete
SEG_XTRN: Incomplete
SEG_CODE: Incomplete
SEG_DATA: Incomplete
SEG_IMP: Incomplete
SEG_GRP: Incomplete
SEG_NULL: Incomplete
SEG_UNDF: Incomplete
SEG_BSS: Incomplete
SEG_ABSSYM: Incomplete
SEG_COMM: Incomplete
SEG_IMEM: Incomplete
SEG_MAX_SEGTYPE_CODE: Incomplete

def is_visible_segm(*args) -> bool: ...
def is_finally_visible_segm(*args) -> bool: ...
def set_visible_segm(*args) -> None: ...
def is_spec_segm(*args) -> bool: ...
def is_spec_ea(*args) -> bool: ...
def lock_segm(*args) -> None: ...

class lock_segment:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

def is_segm_locked(*args) -> bool: ...
def getn_selector(*args) -> 'sel_t *, ea_t *': ...
def get_selector_qty(*args) -> size_t: ...
def setup_selector(*args) -> sel_t: ...
def allocate_selector(*args) -> sel_t: ...
def find_free_selector(*args) -> sel_t: ...
def set_selector(*args) -> int: ...
def del_selector(*args) -> None: ...
def sel2para(*args) -> ea_t: ...
def sel2ea(*args) -> ea_t: ...
def find_selector(*args) -> sel_t: ...
def get_segm_by_sel(*args) -> 'segment_t *': ...
def add_segm_ex(*args) -> bool: ...

ADDSEG_NOSREG: Incomplete
ADDSEG_OR_DIE: Incomplete
ADDSEG_NOTRUNC: Incomplete
ADDSEG_QUIET: Incomplete
ADDSEG_FILLGAP: Incomplete
ADDSEG_SPARSE: Incomplete
ADDSEG_NOAA: Incomplete
ADDSEG_IDBENC: Incomplete

def add_segm(*args) -> bool: ...
def del_segm(*args) -> bool: ...

SEGMOD_KILL: Incomplete
SEGMOD_KEEP: Incomplete
SEGMOD_SILENT: Incomplete
SEGMOD_KEEP0: Incomplete
SEGMOD_KEEPSEL: Incomplete
SEGMOD_NOMOVE: Incomplete
SEGMOD_SPARSE: Incomplete

def get_segm_qty(*args) -> int: ...
def getseg(*args) -> 'segment_t *': ...
def getnseg(*args) -> 'segment_t *': ...
def get_segm_num(*args) -> int: ...
def get_next_seg(*args) -> 'segment_t *': ...
def get_prev_seg(*args) -> 'segment_t *': ...
def get_first_seg(*args) -> 'segment_t *': ...
def get_last_seg(*args) -> 'segment_t *': ...
def get_segm_by_name(*args) -> 'segment_t *': ...
def set_segm_end(*args) -> bool: ...
def set_segm_start(*args) -> bool: ...
def move_segm_start(*args) -> bool: ...

MOVE_SEGM_OK: Incomplete
MOVE_SEGM_PARAM: Incomplete
MOVE_SEGM_ROOM: Incomplete
MOVE_SEGM_IDP: Incomplete
MOVE_SEGM_CHUNK: Incomplete
MOVE_SEGM_LOADER: Incomplete
MOVE_SEGM_ODD: Incomplete
MOVE_SEGM_ORPHAN: Incomplete
MOVE_SEGM_DEBUG: Incomplete
MOVE_SEGM_SOURCEFILES: Incomplete
MOVE_SEGM_MAPPING: Incomplete
MOVE_SEGM_INVAL: Incomplete

def move_segm_strerror(*args) -> 'char const *': ...
def move_segm(*args) -> move_segm_code_t: ...

MSF_SILENT: Incomplete
MSF_NOFIX: Incomplete
MSF_LDKEEP: Incomplete
MSF_FIXONCE: Incomplete
MSF_PRIORITY: Incomplete
MSF_NETNODES: Incomplete

def change_segment_status(*args) -> int: ...

CSS_OK: Incomplete
CSS_NODBG: Incomplete
CSS_NORANGE: Incomplete
CSS_NOMEM: Incomplete
CSS_BREAK: Incomplete
SNAP_ALL_SEG: Incomplete
SNAP_LOAD_SEG: Incomplete
SNAP_CUR_SEG: Incomplete

def take_memory_snapshot(*args) -> bool: ...
def is_miniidb(*args) -> bool: ...
def set_segm_base(*args) -> bool: ...
def set_group_selector(*args) -> int: ...

MAX_GROUPS: Incomplete

def get_group_selector(*args) -> sel_t: ...
def add_segment_translation(*args) -> bool: ...

MAX_SEGM_TRANSLATIONS: Incomplete

def del_segment_translations(*args) -> None: ...
def get_segment_translations(*args) -> ssize_t: ...
def get_segment_cmt(*args) -> 'qstring *': ...
def set_segment_cmt(*args) -> None: ...
def std_out_segm_footer(*args) -> None: ...
def set_segm_name(*args) -> int: ...
def get_segm_name(*args) -> 'qstring *': ...
def get_visible_segm_name(*args) -> 'qstring *': ...
def get_segm_class(*args) -> 'qstring *': ...
def set_segm_class(*args) -> int: ...
def segtype(*args) -> uchar: ...
def get_segment_alignment(*args) -> 'char const *': ...
def get_segment_combination(*args) -> 'char const *': ...
def get_segm_para(*args) -> ea_t: ...
def get_segm_base(*args) -> ea_t: ...
def set_segm_addressing(*args) -> bool: ...
def update_segm(*args) -> bool: ...
def segm_adjust_diff(*args) -> adiff_t: ...
def segm_adjust_ea(*args) -> ea_t: ...
def get_defsr(*args) -> sel_t: ...
def set_defsr(*args) -> None: ...
def rebase_program(*args) -> int: ...
