# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ctypes
from _typeshed import Incomplete

uint8 = ctypes.c_ubyte
char = ctypes.c_char
uint32 = ctypes.c_uint
uint64 = ctypes.c_uint64
uint16 = ctypes.c_ushort
ushort = uint16
__EA64__: Incomplete
ea_t: Incomplete

def to_uint32(v): ...
def get_struct(str_, off, struct): ...

_byte: Incomplete

def unpack_db(buf, off): ...
def get_dw(buf, off): ...
def unpack_dw(buf, off): ...
def unpack_dd(buf, off): ...
def unpack_dq(buf, off): ...
def unpack_ea(buf, off): ...
def unpack_eavec(buf, base_ea): ...

class dex_method(ctypes.LittleEndianStructure):
    IS_LOCAL: int
    HAS_CODE: int
    _fields_: Incomplete
    def is_local(self): ...

class dex_field(ctypes.LittleEndianStructure):
    _fields_: Incomplete

class longname_director_t(ctypes.LittleEndianStructure):
    _pack_: int
    _fields_: Incomplete

class Dex:
    HASHVAL_MAGIC: str
    HASHVAL_OPTIMIZED: str
    HASHVAL_DEXVERSION: str
    META_BASEADDRS: int
    DEXCMN_STRING_ID: Incomplete
    DEXCMN_METHOD_ID: Incomplete
    DEXCMN_TRY_TYPES: Incomplete
    DEXCMN_TRY_IDS: Incomplete
    DEXCMN_DEBINFO: Incomplete
    DEXCMN_DEBSTR: Incomplete
    DEXVAR_STRING_IDS: Incomplete
    DEXVAR_TYPE_IDS: Incomplete
    DEXVAR_TYPE_STR: Incomplete
    DEXVAR_TYPE_STRO: Incomplete
    DEXVAR_METHOD: Incomplete
    DEXVAR_METH_STR: Incomplete
    DEXVAR_METH_STRO: Incomplete
    DEXVAR_FIELD: Incomplete
    DEXVAR_TRYLIST: Incomplete
    DEBINFO_LINEINFO: int
    nn_meta: Incomplete
    nn_cmn: Incomplete
    baseaddrs: Incomplete
    nn_vars: Incomplete
    def __init__(self) -> None: ...
    def get_dexnum(self, from_ea): ...
    def get_nn_var(self, from_ea): ...
    ACCESS_FLAGS: Incomplete
    @staticmethod
    def access_string(flags): ...
    @staticmethod
    def as_string(s): ...
    def idx_to_ea(self, from_ea, idx, tag): ...
    def get_string(self, from_ea, string_idx): ...
    def get_method_idx(self, ea): ...
    def get_method(self, from_ea, method_idx): ...
    @staticmethod
    def get_string_by_index(node, idx, tag): ...
    PRIMITVE_TYPES: Incomplete
    @staticmethod
    def _primitive_type_label(typechar): ...
    @staticmethod
    def is_wide_type(typechar): ...
    @staticmethod
    def decorate_java_typename(desc): ...
    def get_type_string(self, from_ea, type_idx): ...
    def get_method_name(self, from_ea, method_idx): ...
    def get_parameter_name(self, from_ea, idx): ...
    @staticmethod
    def get_short_type_name(longname): ...
    @staticmethod
    def get_full_type_name(longname): ...
    def get_short_method_name(self, method): ...
    def get_full_method_name(self, method) -> None: ...
    def get_call_method_name(self, method): ...
    def get_field(self, from_ea, field_idx): ...
    def get_field_name(self, from_ea, field_idx): ...
    def get_full_field_name(self, field_idx, field, field_name): ...
    def get_short_field_name(self, field_idx, field, field_name) -> None: ...
