# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class fpvalue_shorts_array_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    data: Incomplete
    def __init__(self, *args) -> None: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'unsigned short const &': ...
    def __setitem__(self, *args) -> None: ...
    def _get_bytes(self, *args) -> bytevec_t: ...
    def _set_bytes(self, *args) -> None: ...
    __iter__ = ida_idaapi._bounded_getitem_iterator
    bytes: Incomplete
    __swig_destroy__: Incomplete

FPVAL_NWORDS: Incomplete
FPV_BADARG: Incomplete
FPV_NORM: Incomplete
FPV_NAN: Incomplete
FPV_PINF: Incomplete
FPV_NINF: Incomplete
REAL_ERROR_OK: Incomplete
REAL_ERROR_FORMAT: Incomplete
REAL_ERROR_RANGE: Incomplete
REAL_ERROR_BADDATA: Incomplete
REAL_ERROR_FPOVER: Incomplete
REAL_ERROR_BADSTR: Incomplete
REAL_ERROR_ZERODIV: Incomplete
REAL_ERROR_INTOVER: Incomplete

class fpvalue_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    w: Incomplete
    def clear(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    def from_10bytes(self, *args) -> fpvalue_error_t: ...
    def to_10bytes(self, *args) -> fpvalue_error_t: ...
    def from_12bytes(self, *args) -> fpvalue_error_t: ...
    def to_12bytes(self, *args) -> fpvalue_error_t: ...
    def to_str(self, *args) -> None: ...
    def from_sval(self, *args) -> None: ...
    def from_int64(self, *args) -> None: ...
    def from_uint64(self, *args) -> None: ...
    def to_sval(self, *args) -> fpvalue_error_t: ...
    def to_int64(self, *args) -> fpvalue_error_t: ...
    def to_uint64(self, *args) -> fpvalue_error_t: ...
    def fadd(self, *args) -> fpvalue_error_t: ...
    def fsub(self, *args) -> fpvalue_error_t: ...
    def fmul(self, *args) -> fpvalue_error_t: ...
    def fdiv(self, *args) -> fpvalue_error_t: ...
    def mul_pow2(self, *args) -> fpvalue_error_t: ...
    def eabs(self, *args) -> None: ...
    def is_negative(self, *args) -> bool: ...
    def negate(self, *args) -> None: ...
    def get_kind(self, *args) -> fpvalue_kind_t: ...
    def __init__(self, *args) -> None: ...
    def _get_bytes(self, *args) -> None: ...
    def _set_bytes(self, *args) -> None: ...
    def _get_10bytes(self, *args) -> None: ...
    def _set_10bytes(self, *args) -> None: ...
    def _get_float(self, *args) -> double: ...
    def _set_float(self, *args) -> None: ...
    def __str__(self, *args) -> qstring: ...
    def _get_shorts(self, *args) -> 'wrapped_array_t< uint16,FPVAL_NWORDS >': ...
    def from_str(self, *args) -> fpvalue_error_t: ...
    def assign(self, *args) -> None: ...
    bytes: Incomplete
    _10bytes: Incomplete
    shorts: Incomplete
    float: Incomplete
    sval: Incomplete
    int64: Incomplete
    uint64: Incomplete
    def __iter__(self): ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, v) -> None: ...
    def __add__(self, *args) -> fpvalue_t: ...
    def __sub__(self, *args) -> fpvalue_t: ...
    def __mul__(self, *args) -> fpvalue_t: ...
    def __truediv__(self, *args) -> fpvalue_t: ...
    __swig_destroy__: Incomplete

cvar: Incomplete
MAXEXP_FLOAT: Incomplete
MAXEXP_DOUBLE: Incomplete
MAXEXP_LNGDBL: Incomplete
IEEE_EXONE: Incomplete
E_SPECIAL_EXP: Incomplete
IEEE_NI: Incomplete
IEEE_E: Incomplete
IEEE_M: Incomplete

def ecleaz(*args) -> None: ...

EZERO: bytes
EONE: bytes
ETWO: bytes
