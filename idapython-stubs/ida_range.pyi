# mypy: disable-error-code="valid-type, name-defined, no-redef, assignment, misc, override"

import ida_idaapi
from _typeshed import Incomplete

def _swig_repr(self): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_add_metaclass(metaclass): ...

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

SWIG_PYTHON_LEGACY_BOOL: Incomplete

class rangevec_base_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'range_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'range_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'range_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< range_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< range_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< range_t >::iterator': ...
    def erase(self, *args) -> 'qvector< range_t >::iterator': ...
    def find(self, *args) -> 'qvector< range_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'range_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class array_of_rangesets:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete
    def push_back(self, *args) -> 'rangeset_t &': ...
    def pop_back(self, *args) -> None: ...
    def size(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def at(self, *args) -> 'rangeset_t const &': ...
    def qclear(self, *args) -> None: ...
    def clear(self, *args) -> None: ...
    def resize(self, *args) -> None: ...
    def grow(self, *args) -> None: ...
    def capacity(self, *args) -> size_t: ...
    def reserve(self, *args) -> None: ...
    def truncate(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def extract(self, *args) -> 'rangeset_t *': ...
    def inject(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'qvector< rangeset_t >::const_iterator': ...
    def end(self, *args) -> 'qvector< rangeset_t >::const_iterator': ...
    def insert(self, *args) -> 'qvector< rangeset_t >::iterator': ...
    def erase(self, *args) -> 'qvector< rangeset_t >::iterator': ...
    def find(self, *args) -> 'qvector< rangeset_t >::const_iterator': ...
    def has(self, *args) -> bool: ...
    def add_unique(self, *args) -> bool: ...
    def _del(self, *args) -> bool: ...
    def __len__(self, *args) -> size_t: ...
    def __getitem__(self, *args) -> 'rangeset_t const &': ...
    def __setitem__(self, *args) -> None: ...
    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

class range_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    start_ea: Incomplete
    end_ea: Incomplete
    def __init__(self, *args) -> None: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def __lt__(self, *args) -> bool: ...
    def __gt__(self, *args) -> bool: ...
    def __le__(self, *args) -> bool: ...
    def __ge__(self, *args) -> bool: ...
    def compare(self, *args) -> int: ...
    def contains(self, *args) -> bool: ...
    def overlaps(self, *args) -> bool: ...
    def clear(self, *args) -> None: ...
    def empty(self, *args) -> bool: ...
    def size(self, *args) -> asize_t: ...
    def intersect(self, *args) -> None: ...
    def extend(self, *args) -> None: ...
    def _print(self, *args) -> size_t: ...
    __swig_destroy__: Incomplete

def range_t_print(*args) -> size_t: ...

class rangevec_t(rangevec_base_t):
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Incomplete

RANGE_KIND_UNKNOWN: Incomplete
RANGE_KIND_FUNC: Incomplete
RANGE_KIND_SEGMENT: Incomplete
RANGE_KIND_HIDDEN_RANGE: Incomplete

class rangeset_t:
    thisown: Incomplete
    __repr__ = _swig_repr
    def __init__(self, *args) -> None: ...
    def swap(self, *args) -> None: ...
    def add(self, *args) -> bool: ...
    def sub(self, *args) -> bool: ...
    def includes(self, *args) -> bool: ...
    def _print(self, *args) -> size_t: ...
    def getrange(self, *args) -> 'range_t const &': ...
    def lastrange(self, *args) -> 'range_t const &': ...
    def nranges(self, *args) -> size_t: ...
    def empty(self, *args) -> bool: ...
    def clear(self, *args) -> None: ...
    def has_common(self, *args) -> bool: ...
    def contains(self, *args) -> bool: ...
    def intersect(self, *args) -> bool: ...
    def is_subset_of(self, *args) -> bool: ...
    def is_equal(self, *args) -> bool: ...
    def __eq__(self, *args) -> bool: ...
    def __ne__(self, *args) -> bool: ...
    def begin(self, *args) -> 'rangeset_t::iterator': ...
    def end(self, *args) -> 'rangeset_t::iterator': ...
    def find_range(self, *args) -> 'range_t const *': ...
    def cached_range(self, *args) -> 'range_t const *': ...
    def next_addr(self, *args) -> ea_t: ...
    def prev_addr(self, *args) -> ea_t: ...
    def next_range(self, *args) -> ea_t: ...
    def prev_range(self, *args) -> ea_t: ...
    def __getitem__(self, idx): ...
    __len__ = nranges
    __iter__ = ida_idaapi._bounded_getitem_iterator
    __swig_destroy__: Incomplete
